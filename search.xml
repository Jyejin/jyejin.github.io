<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>#python 프로그래머스 124 나라 </title>
      <link href="2021/07/21/til4/"/>
      <url>2021/07/21/til4/</url>
      
        <content type="html"><![CDATA[<br/><p>2021-07-21 TIL</p><a id="more"></a> <hr><p><a href="https://programmers.co.kr/learn/courses/30/lessons/12899">프로그래머스 124 나라</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(n)</span>:</span></span><br><span class="line">    nums = [<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'4'</span>]</span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> nums[n<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">    q, r = divmod(n<span class="number">-1</span>, <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">return</span> solution(q) + nums[r]</span><br></pre></td></tr></table></figure><h3 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h3><p>3진법을 사용해서 푸는 문제. 진법은 0부터 시작하지만 124 나라는 자연수이므로 n에서 1을 뺀 후 나머지를 구하고<br>0,1,2 대신 1,2,4를 사용해서 표현한다.</p>]]></content>
      
      
      
        <tags>
            
            <tag> TIL </tag>
            
            <tag> 프로그래머스 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>프로그래머스 타겟넘버</title>
      <link href="2021/07/19/TIL3/"/>
      <url>2021/07/19/TIL3/</url>
      
        <content type="html"><![CDATA[<br/><p>2021-07-19 TIL</p><a id="more"></a> <hr><ol><li>프로그래머스 타겟 넘버</li></ol><ul><li>문제 유형 : DFS</li><li>다시 풀어보기</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def solution(numbers, target):</span><br><span class="line">    result &#x3D; 0</span><br><span class="line">    answer &#x3D; dfs(result, numbers, target)</span><br><span class="line">    return answer</span><br><span class="line"></span><br><span class="line">def dfs(result, numbers, target):</span><br><span class="line">    if len(numbers) &#x3D;&#x3D; 1:</span><br><span class="line">        if result + numbers[0] &#x3D;&#x3D; target or result - numbers[0] &#x3D;&#x3D; target:</span><br><span class="line">            return 1</span><br><span class="line">        else: </span><br><span class="line">            return 0</span><br><span class="line">    else:</span><br><span class="line">        return dfs(result + numbers[0], numbers[1:], target) + dfs(result - numbers[0], numbers[1:], target)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TIL </tag>
            
            <tag> 다시풀어보기 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIL 2. 데코레이터 패턴, 알고리즘 문제</title>
      <link href="2021/07/18/TIL2/"/>
      <url>2021/07/18/TIL2/</url>
      
        <content type="html"><![CDATA[<br/><p>2021-07-18 TIL</p><a id="more"></a> <hr><h2 id="디자인-원칙"><a href="#디자인-원칙" class="headerlink" title="디자인 원칙"></a>디자인 원칙</h2><ul><li>클래스는 확장에 대해서는 열려 있어야 하지만 코드 변경에 대해서는 닫혀 있어야 한다.</li></ul><h2 id="데코레이터-패턴"><a href="#데코레이터-패턴" class="headerlink" title="데코레이터 패턴"></a>데코레이터 패턴</h2><p>데코레이터 패턴은 객체에 추가적인 요건을 동작으로 추가한다. 데코레이터는 서브클래스를 만드는 것을 통해서 기능을 유연하게 확장할 수 있는 방법을 제공한다.</p><h2 id="알고리즘"><a href="#알고리즘" class="headerlink" title="알고리즘"></a>알고리즘</h2><p><a href="https://programmers.co.kr/learn/courses/30/lessons/64061">크레인 인형 뽑기 게임</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">def solution(board, moves):            </span><br><span class="line">    answer &#x3D; 0</span><br><span class="line">    stack &#x3D; []</span><br><span class="line">    height &#x3D; len(board)</span><br><span class="line">    width &#x3D; len(board[0])</span><br><span class="line">    </span><br><span class="line">    for m in moves:</span><br><span class="line">        col_num &#x3D; m - 1</span><br><span class="line">        for w in range(0, height):</span><br><span class="line">            selected_v &#x3D; board[w][col_num]</span><br><span class="line">            if selected_v &gt; 0:</span><br><span class="line">                stack.append(selected_v)</span><br><span class="line">                board[w][col_num] &#x3D; 0</span><br><span class="line"></span><br><span class="line">                if len(stack) &gt; 1:</span><br><span class="line">                    if stack[-1] &#x3D;&#x3D; stack[-2]:</span><br><span class="line">                        del stack[-1]</span><br><span class="line">                        del stack[-1]</span><br><span class="line">                        answer +&#x3D; 2</span><br><span class="line">                break</span><br><span class="line">                </span><br><span class="line">    return answer</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
          <category> TIL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TIL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIL 1. 전략 패턴, 옵저버 패턴</title>
      <link href="2021/07/17/TIL1/"/>
      <url>2021/07/17/TIL1/</url>
      
        <content type="html"><![CDATA[<br/><p>2021-07-17 TIL</p><a id="more"></a> <hr><h1 id="디자인-원칙"><a href="#디자인-원칙" class="headerlink" title="디자인 원칙"></a>디자인 원칙</h1><ul><li>애플리케이션에서 달라지는 부분을 찾아내고, 달라지지 않는 부분으로부터 분리시킨다.</li><li>구현이 아닌 인터페이스에 맞춰 프로그래밍한다.</li><li>상속보다는 구성을 활용한다.</li><li>사로 상호작용을 하는 객체 사이에서는 가능하면 느슨하게 결합하는 디자인을 사용해야 한다.</li></ul><h2 id="전략패턴-Strategy-Pattern"><a href="#전략패턴-Strategy-Pattern" class="headerlink" title="전략패턴 (Strategy Pattern)"></a>전략패턴 (Strategy Pattern)</h2><p>알고리즘 군을 정의하고 각각을 캡슐화하여 상호 교체 가능하도록 만든다. 전략 패턴을 이용하면 알고리즘을 활용하는 클라이언트와 독립적으로 알고리즘을 변경할 수 있다.</p><h2 id="옵저버-패턴-Observer-Pattern"><a href="#옵저버-패턴-Observer-Pattern" class="headerlink" title="옵저버 패턴 (Observer Pattern)"></a>옵저버 패턴 (Observer Pattern)</h2><p>한 객체(Object)의 상태가 바뀌면 그 객체에 의존하는 다른 객체들(Observer)한테 알리고 자동으로 내용이 갱신된다. 객체와 옵저버의 관계는 1대 다 관계이며 느슨한 결합성을 가진다.</p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
          <category> TIL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TIL </tag>
            
            <tag> 디자인패턴 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx에 SSL 인증서 설정하기</title>
      <link href="2021/07/09/study11/"/>
      <url>2021/07/09/study11/</url>
      
        <content type="html"><![CDATA[<br/><p>테스트 환경 구성부터 Nginx에 SSL 인증서 적용까지</p><a id="more"></a> <hr><p>공인 인증기관 CA가 아닌 테스트용으로 사용할 수 있는 SSL 인증서 생성과 적용을 살펴보겠습니다.<br>openssl을 통해 SSL 인증서를 직접 생성하는 것이기 때문에 브라우저에서의 통신은 불가능합니다.<br>대신에 curl 명령어로 검증할 인증서를 전달하여 테스트하도록 하겠습니다.</p><h1 id="인증서-적용하기"><a href="#인증서-적용하기" class="headerlink" title="인증서 적용하기"></a>인증서 적용하기</h1><h2 id="1-테스트-환경-구성"><a href="#1-테스트-환경-구성" class="headerlink" title="1. 테스트 환경 구성"></a>1. 테스트 환경 구성</h2><hr><p>도커의 centos7 이미지로 테스트 환경을 구성하겠습니다.<br>centos7 버전 이미지를 다운 받은 후, 포트를 연결하여 컨테이너를 띄웁니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull centos:7</span><br><span class="line">$ docker run -it --name ssl-test -p 8443:443 -p 8080:80 centos:7 /bin/bash</span><br></pre></td></tr></table></figure><p>컨테이너에 접근하여 nginx와 openssl을 설치합니다.</p><h3 id="openssl-설치"><a href="#openssl-설치" class="headerlink" title="openssl 설치"></a>openssl 설치</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y openssl.aarch64</span><br></pre></td></tr></table></figure><h3 id="nginx-설치"><a href="#nginx-설치" class="headerlink" title="nginx 설치"></a>nginx 설치</h3><p>   nginx 레포지토리를 추가해야 합니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ vi /etc/yum.repos.d/nginx.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 아래 내용 추가 후 저장</span></span><br><span class="line">[nginx]</span><br><span class="line">name=nginx repo</span><br><span class="line">baseurl=http://nginx.org/packages/centos/7/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure><p>nginx를 설치 후 실행시킵니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y nginx</span><br><span class="line">$ nginx</span><br></pre></td></tr></table></figure><p>127.0.0.1:8080으로 접근 시, nginx 화면이 나타나는 것을 확인할 수 있습니다.</p><h2 id="2-인증서-생성"><a href="#2-인증서-생성" class="headerlink" title="2. 인증서 생성"></a>2. 인증서 생성</h2><hr><p>인증서로는 개인키, 인증요청서, 인증서 순으로 생성한다.</p><h3 id="개인키-생성"><a href="#개인키-생성" class="headerlink" title="개인키 생성"></a>개인키 생성</h3><p>아래와 같이 RSA 2048 비트의 비밀키를 생성합니다. </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ openssl genrsa -des3 -out server.key 2048</span><br></pre></td></tr></table></figure><p>RSA 이외에도 ECDSA 등이 있지만 보통 RSA를 사용합니다.</p><h3 id="인증-요청서-생성"><a href="#인증-요청서-생성" class="headerlink" title="인증 요청서 생성"></a>인증 요청서 생성</h3><p>인증서 요청 파일(CSR)을 아래와 같이 작성합니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ openssl req -new -key server.key -out server.csr</span><br></pre></td></tr></table></figure><h3 id="인증서-생성"><a href="#인증서-생성" class="headerlink" title="인증서 생성"></a>인증서 생성</h3><p>인증서를 자신의 비밀 키로 서명해서 생성합니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ openssl x509 -req -days 365 -<span class="keyword">in</span> server.csr -signkey server.key -out server.crt</span><br></pre></td></tr></table></figure><p>인증서 생성까지 마친 후 아래 3개의 파일을 확인 할 수 있습니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-rw-r--r--   1 root root  1184 Jul  9 05:41 server.crt</span><br><span class="line">-rw-r--r--   1 root root   997 Jul  9 05:40 server.csr</span><br><span class="line">-rw-r--r--   1 root root  1675 Jul  9 05:41 server.key</span><br></pre></td></tr></table></figure><h2 id="3-nginx-설정-파일-수정"><a href="#3-nginx-설정-파일-수정" class="headerlink" title="3. nginx 설정 파일 수정"></a>3. nginx 설정 파일 수정</h2><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;default.conf</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    rewrite ^(.*) https:&#x2F;&#x2F;localhost$1 permanent; </span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        root html;</span><br><span class="line">        index index.html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page   500 502 503 504  &#x2F;50x.html;</span><br><span class="line">    location &#x3D; &#x2F;50x.html &#123;</span><br><span class="line">        root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       443 ssl;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;host.access.log  main;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ssl_certificate &#x2F;tmp&#x2F;server.crt;</span><br><span class="line">    ssl_certificate_key &#x2F;tmp&#x2F;server.key;</span><br><span class="line">    ssl_protocols TLSv1.2 TLSv1.3;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page   500 502 503 504  &#x2F;50x.html;</span><br><span class="line">    location &#x3D; &#x2F;50x.html &#123;</span><br><span class="line">        root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-테스트"><a href="#4-테스트" class="headerlink" title="4. 테스트"></a>4. 테스트</h2><hr><p>우선 80 포트로 접근 시, 301로 리다이렉트되는 것을 확인할 수 있습니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ curl -i localhost</span><br><span class="line"></span><br><span class="line">HTTP/1.1 301 Moved Permanently</span><br><span class="line">Server: nginx/1.20.1</span><br><span class="line">Date: Fri, 09 Jul 2021 06:44:40 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 169</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Location: https://localhost:8443/</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;301 Moved Permanently&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;301 Moved Permanently&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;nginx/1.20.1&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>그리고 443 포트로 접근 시, nginx html을 확인할 수 있습니다.<br><code>cacert</code> 옵션으로 직접 인증서를 건내줍니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">$ curl --cacert server.crt https://localhost:443</span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.20.1</span><br><span class="line">Date: Fri, 09 Jul 2021 06:46:23 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 612</span><br><span class="line">Last-Modified: Tue, 25 May 2021 13:39:39 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">ETag: <span class="string">"60acfe1b-264"</span></span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    body &#123;</span><br><span class="line">        width: 35em;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">        font-family: Tahoma, Verdana, Arial, sans-serif;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;For online documentation and support please refer to</span><br><span class="line">&lt;a href=<span class="string">"http://nginx.org/"</span>&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class="line">Commercial support is available at</span><br><span class="line">&lt;a href=<span class="string">"http://nginx.com/"</span>&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;em&gt;Thank you <span class="keyword">for</span> using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
          <category> Network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> https </tag>
            
            <tag> ssl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CGI 개념 및 설명</title>
      <link href="2021/07/01/study10/"/>
      <url>2021/07/01/study10/</url>
      
        <content type="html"><![CDATA[<br/><p>CGI : Common Gateway Interface</p><a id="more"></a> <hr><h1 id="CGI-개념-설명"><a href="#CGI-개념-설명" class="headerlink" title="CGI 개념 설명"></a>CGI 개념 설명</h1><p>초창기의 웹 서버는 단순히 클라이언트의 요청에 정적 파일을 응답했다. 하지만 이제는 동적인 사이트가 확대됨에 따라 PHP, Python 같은 애플리케이션으로 처리된다. 웹 서버는 요청을 받아 애플리케이션에 전달하고, 애플리케이션에서 요청을 처리한 후 응답을 웹 서버에 반환하며, 이 응답을 클라이언트에 보낸다. 이 처럼 웹 서버와 애플리케이션이 연동될 수 있도록 CGI 규약이 개발됐다. 즉, CGI는 웹 서버와 게이트웨이 애플리케이션 간에 정보를 교환할 방법을 기술한 규약이다. </p><p>CGI의 동작 방식은 다음과 같은 결점을 가진다.</p><ul><li>요청마다 새로운 프로세스를 생성하기 때문에 상태 정보가 요청과 요청 사이에 상실된다.</li><li>요청 수 만큼 프로세스가 생성되기 때문에 쉽게 부하가 발생한다.</li></ul><h2 id="Fast-CGI"><a href="#Fast-CGI" class="headerlink" title="Fast CGI"></a>Fast CGI</h2><p>CGI의 결점을 보완한 Fast CGI는 다음과 같은 개선점을 가진다.</p><ul><li>영구적으로 지속되는 프로세스가 여러 요청을 처리하게 된다.</li><li>웹 서버와 게이트웨이 애플리케이션은 TCP나 IPC 소켓 같은 소켓을 사용해서 통신한다. 그렇기 때문에 두 컴퓨터로 분산 배치할 수 있다.</li><li>이어지는 요청에 대해 부가 생성하지 않고도 이어서 처리할 수 있다.</li><li>소켓 기반의 프로토콜인 만큼 어떤 언어를 사용해도 구현할 수 있다.</li></ul><h2 id="uWSGI와-SCGI"><a href="#uWSGI와-SCGI" class="headerlink" title="uWSGI와 SCGI"></a>uWSGI와 SCGI</h2><p>uWSGI 모듈은 엔진엑스와 애플리케이션이 uwsgi 프로토콜로 통신하게 해준다. uwsgi 프로토콜은 WSGI(웹 서버 게이트웨이 인터페이스)에서 파생됐다. WSGI는 웹 서버와 웹 애플리케이션의 인터페이스를 위한 파이썬 프레임워크이다.<br>SCGI는 Simple Common Gateway Interface의 약자로, FastCGI와 유사하다.</p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
          <category> ETC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CGI </tag>
            
            <tag> FastCGI </tag>
            
            <tag> uWSGI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx.conf 파일 기본 구조와 지시어 살펴보기</title>
      <link href="2021/06/30/study9/"/>
      <url>2021/06/30/study9/</url>
      
        <content type="html"><![CDATA[<br/><p>nginx.conf는 낯설어!</p><a id="more"></a> <hr><h1 id="nginx-conf"><a href="#nginx-conf" class="headerlink" title="nginx.conf"></a>nginx.conf</h1><hr><p>nginx 모듈을 설치하고 나면 prefix 경로 하위에 nginx.conf 파일이 생성된다.<br>처음 설정되는 nginx.conf 파일을 살펴보자.</p><blockquote><p>✏️ prefix 경로는 <code>nginx -V</code> 명령어로 확인할 수 있다.</p></blockquote><h2 id="nginx-conf-구조"><a href="#nginx-conf-구조" class="headerlink" title="nginx.conf 구조"></a>nginx.conf 구조</h2><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">error_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log notice;</span><br><span class="line">pid        &#x2F;var&#x2F;run&#x2F;nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       &#x2F;etc&#x2F;nginx&#x2F;mime.types;</span><br><span class="line">    default_type  application&#x2F;octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span><br><span class="line">                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span><br><span class="line">                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;</span><br><span class="line"></span><br><span class="line">    access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>중괄호로 감싸고 있는 것이 하나의 <code>블럭</code>이다. 이 파일에서 바로 보이는 블럭은 http 블럭과 events 블럭이다.<br>블럭 안에서 선언한 지시어는 해당 블럭에서만 사용할 수 있다. work_connections 지시어는 events 블럭에서만 의미를 가진다.<br>또한, 블럭은 중첩될 수 있으며 자식 블럭은 부모 블럭의 지시어에 영향을 받는다. http 블럭 안에는 보통 server 블럭이 있는데 http 블럭에서 선언한 keepalive_timeout은 server 블럭에도 영향을 준다.</p><p>파일의 최상단은 메인 블럭이라고 부른다. 현재 메인 블럭에는 user, work_process , error_log, pid 지시어가 있다.</p><h2 id="nginx-conf-기본-지시어-정리"><a href="#nginx-conf-기본-지시어-정리" class="headerlink" title="nginx.conf 기본 지시어 정리"></a>nginx.conf 기본 지시어 정리</h2><hr><p>가장 처음 세팅 되는 지시어를 블럭 단위 기준으로 정리해보았다.<br>user와 worker_process처럼 main 블럭에서만 선언해야 하는 지시어도 있고, include 여러 블럭에도 사용할 수 있는 지시어도 있다.</p><ul><li>참고<ul><li>구문의 대괄호는 필수값이 아님을 의미합니다.</li><li>구문의 콤마는 또는을 의미합니다.</li></ul></li></ul><h3 id="main-블럭"><a href="#main-블럭" class="headerlink" title="main 블럭"></a>main 블럭</h3><ul><li><code>user</code><ul><li>구문 : user username [groupname];</li><li>설명 : 엔진엑스의 worker process를 시작시키는 사용자 계정과 그룹을 지정한다. 지정하지 않으면 master proceess 사용자인 root가 worker process 사용자가 된다. 현재 파일의 user는 nginx로, worker process의 user가 nginx인 것을 확인할 수 있다.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># ps aux</span><br><span class="line">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</span><br><span class="line">root       106  0.0  0.1  10496  3008 ?        Ss   06:34   0:00 nginx: master process nginx</span><br><span class="line">nginx      131  0.0  0.1  10936  3476 ?        S    06:55   0:00 nginx: worker process</span><br></pre></td></tr></table></figure></li></ul></li><li><code>worker_process</code> <ul><li>구문 : worker_process 숫자,auto;</li><li>설명 : worker process의 수를 지정한다. 엔진엑스가 프로세스 수를 적절히 설정하도록 auto를 사용할 수도 있다.</li></ul></li><li><code>error_log</code> <ul><li>구문 : error_log file/path/error_log.log level:</li><li>설명 : 에러 로그의 파일 경로를 지정한다. level은 debug, info, notice, warn, error 등이 있다.</li></ul></li><li><code>pid</code><ul><li>구문 : pid logs/nginx.pid</li><li>설명 : 엔진엑스 데몬의 pid 파일 경로를 지정한다.</li></ul></li></ul><h3 id="events-블럭"><a href="#events-블럭" class="headerlink" title="events 블럭"></a>events 블럭</h3><ul><li><code>worker_connections</code><ul><li>구문 : worker_connections 숫자;</li><li>설명 : worker_process가 동시에 처리할 수 있는 연결 수를 지정한다. 서버의 성능에 따라 줄이거나 늘릴 수 있다.</li></ul></li></ul><h3 id="http-블럭"><a href="#http-블럭" class="headerlink" title="http 블럭"></a>http 블럭</h3><ul><li><code>include</code><ul><li>구문 : include 파일 경로(와일드 카드 * 가능)</li><li>설명 : 지정된 파일의 내용을 해당 블럭에 포함시킨다.</li></ul></li><li><code>default_type</code><ul><li>구문 : default_type MIME타입</li><li>설명 : 응답 헤더 값의 적절한 MIME 타입을 types 블럭에서 찾고 없으면 default_type 값을 사용한다.</li></ul></li><li><code>log_format</code><ul><li>구문 : log_format name <LOG_FORMAT></li><li>설명 : 로그파일의 로그 포맷 형식을 지정한다. 로그 포맷을 여러개 생성할 수 있으며, name을 통해 어떤 포맷을 적용할지 지정할 수 있다. 현재 선언된 log_format의 name은 main이며, access_log에서 아래와 같이 선언하여 포맷을 적용하고 있다.<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">access_log  /var/<span class="built_in">log</span>/nginx/access.log  main;  <span class="comment">#main is log_format name</span></span><br></pre></td></tr></table></figure></li></ul></li><li><code>access_log</code><ul><li>구문 : access_log file/path/access_log.log log_format_name</li><li>설명 : access 로그 파일의 경로와 로그 형식을 지정한다.</li></ul></li><li><code>sendfile</code><ul><li>구문 : sendfile on,off</li><li>설명 : 활성화되면 엔진엑스는 sendfile 커널 호출을 사용해서 파일을 전송하고, 비활성화되면 스스로 파일을 전송한다. </li></ul></li><li><code>keepalive_timeout</code><ul><li>구문 : keepalive_timeout 숫자</li><li>설명 : 서버가 유지되는 연결을 몇 초를 기다릴지 정의한다.</li></ul></li></ul><h2 id="nginx-conf-웹-서버용-세팅"><a href="#nginx-conf-웹-서버용-세팅" class="headerlink" title="nginx.conf 웹 서버용 세팅"></a>nginx.conf 웹 서버용 세팅</h2><hr><p>웹 서버 역할을 하기 위해서 사용되는 server 블럭과 location 블럭을 살펴보자.</p><h3 id="server-블럭"><a href="#server-블럭" class="headerlink" title="server 블럭"></a>server 블럭</h3><p>server 블럭은 웹 사이트 하나를 선언할 수 있다.<br>http 블럭 하위에 정의하며, 하나의 http 블럭 안에 여러개의 server 블럭을 둘 수 있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen      80;</span><br><span class="line">        server_name example.org www.example.org;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen      80;</span><br><span class="line">        server_name example.net www.example.net;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen      80;</span><br><span class="line">        server_name example.com www.example.com;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>listen</code><ul><li>구문 : listen [주소][:포트][추가 옵션]</li><li>설명 : 웹 사이트를 제공하는 소켓을 여는데 사용하는 IP 주소나 포트를 지정한다.</li><li>추가 옵션 :<ul><li>default_server : 해당 주소, 포트로 들어온 모든 요청의 기본 웹 사이트로 지정</li><li>ssl : 웹 사이트가 ssl을 통해 제공되도록 지정</li><li>http2 : HTTP/2 프로토콜을 지원하도록 활성화</li><li>proxy_protocol : 포트로 접속된 모든 네트워크 연결에 프로토콜을 활성화</li></ul></li></ul></li><li><code>server_name</code><ul><li>구문 : server_name 호스트명1 [호스트명2]</li><li>설명 : server_name과 맞는 첫 번째 server 블럭이 선택된다. 아무로 server 블럭도 요청 호스트명과 맞지 않다면, listen 지시어의 매개변수와 맞는 server 블럭을 선택한다. listen 지시어에 default 옵션이 활성화된 블럭에 우선권이 주어진다.</li></ul></li></ul><h3 id="location-블럭"><a href="#location-블럭" class="headerlink" title="location 블럭"></a>location 블럭</h3><p>server 블럭이 호스트명과 포트로 정의했다면, location 블럭은 요청 값의 path 및 파일을 기준으로 정의한다.<br>하나의 server 블럭 안에는 여러 개의 location 블럭을 설정할 수 있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen      80;</span><br><span class="line">    server_name example.org www.example.org;</span><br><span class="line">    root        &#x2F;data&#x2F;www;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        index   index.html index.php;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location &#x3D; &#x2F;doc &#123;</span><br><span class="line">        index   index.html index.php;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~* \.(gif|jpg|png)$ &#123;</span><br><span class="line">        expires 30d;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        fastcgi_pass  localhost:9000;</span><br><span class="line">        fastcgi_param SCRIPT_FILENAME</span><br><span class="line">                      $document_root$fastcgi_script_name;</span><br><span class="line">        include       fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>조정부호<br>  location 블럭 별로 path를 지정한다. path는 정규표현식 사용이 가능하다. 우선 부호를 살펴보자.<ul><li><code>=</code> 조정부호 : path가 지정된 패턴과 정확히 일치한다. 여기서는 정규식을 사용할 수 없다.</li><li>조정부호 생략 : 지정된 패턴으로 시작해야 한다. 정규식을 사용할 수 없다.</li><li><code>~</code> 조정부호 : 정규식이 일치하고 대소문자를 구분한다.</li><li><code>~*</code> 조정부호 : 정규식이 일치하고 대소문자를 구분하지 않는다.</li></ul></li><li><code>index</code><ul><li>구문 : index file1 [file2]</li><li>설명 : 요청에 아무런 path도 없을 때, 기본으로 제공할 페이지를 정의한다.</li></ul></li><li><code>exprires</code><ul><li>구문 : expires 숫자+날짜 기호</li><li>설명 : 파일의 캐시 유효 기간을 설정한다.</li></ul></li></ul><h3 id="다음에는…"><a href="#다음에는…" class="headerlink" title="다음에는…"></a>다음에는…</h3><hr><p>nginx 서버 운영 시, 가장 먼저 해야 할 nginx.conf 파일 내용을 살펴보았다.<br>다음 포스팅에서는 서버를 직접 세팅해보며 해당 지시어들이 어떻게 적용되는지 살펴보자!</p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
          <category> ETC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> backend </tag>
            
            <tag> nginx </tag>
            
            <tag> server </tag>
            
            <tag> conf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>push 방식, poll 방식</title>
      <link href="2021/06/03/study8/"/>
      <url>2021/06/03/study8/</url>
      
        <content type="html"><![CDATA[<br/><p>push, poll 방식을 알아보자.</p><a id="more"></a> <hr>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
          <category> ETC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> push </tag>
            
            <tag> poll </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python asnyc 함수</title>
      <link href="2021/05/31/study7/"/>
      <url>2021/05/31/study7/</url>
      
        <content type="html"><![CDATA[<br/><p>python async 함수를 알아보자.</p><a id="more"></a> <hr>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
          <category> ETC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> async </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 비트연산과 시프트 연산 방법 및 적용 예시</title>
      <link href="2021/05/29/study6/"/>
      <url>2021/05/29/study6/</url>
      
        <content type="html"><![CDATA[<br/><p>python 비트(bit) 연산과 시프트 연산(shift)의 사용 방법과 활용법에 대해 알아보자.</p><a id="more"></a> <hr><h1 id="비트-연산"><a href="#비트-연산" class="headerlink" title="비트 연산"></a>비트 연산</h1><p>비트 연산은 이진수로 논리 연산을 한다. 논리 연산에는 AND, OR, XOR, NAND가 있다. 하나씩 살펴보자.</p><h3 id="AND-amp-연산"><a href="#AND-amp-연산" class="headerlink" title="AND( &amp; ) 연산"></a>AND( &amp; ) 연산</h3>  <img src="/gallery/book1-1-4.jpg" width="200px" /><p>아래와 같이 두 비트의 연산에서 둘 다 1인 경우에만 1을 반환한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> &amp; <span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> &amp; <span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0</span> &amp; <span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p>이진수가 한자리 수가 아닌 경우 각 자리수를 보고 연산한다. 예를 들어,<br>이진수 1001과 1101가 있으면, 첫째자리와 넷째자리 수만 둘 다 1이므로, 1을 반환하고 나머지는 0을 반환한다.<br>그러므로 결과는 1001이된다.</p><p>십진수의 경우, 이진수로 변환 후에 계산한다. 예를 들어,<br>9는 이진수로 1001, 13는 이진수로 1101인데, 이 둘을 비트연산하면 1001이므로 리턴값은 9가 된다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">9</span> &amp; <span class="number">13</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0b1001</span> &amp; <span class="number">0b1101</span> <span class="comment">#이진수로 계산하고 싶은 경우, 0b를 앞에 붙이면 된다.</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><p>정리하면, 두 개의 이진수를 각자리 별로 진리표에 따라 계산하는 것이다! 간단하다. 계속 살펴보자.</p><h3 id="OR-연산"><a href="#OR-연산" class="headerlink" title="OR( | ) 연산"></a>OR( | ) 연산</h3><img src="/gallery/book1-1-5.jpg" width="200px"/><p>OR 연산은 둘 중 하나면 1이면 1을 반환한다. 마찬가지로 9와 13을 연산해보자.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">9</span> | <span class="number">13</span></span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0b1001</span> | <span class="number">0b1101</span></span><br><span class="line"><span class="number">13</span></span><br></pre></td></tr></table></figure><h3 id="XOR-연산"><a href="#XOR-연산" class="headerlink" title="XOR( ^ ) 연산"></a>XOR( ^ ) 연산</h3><img src="/gallery/book1-1-7.jpg" width="200px" /><p>XOR 연산은 비교 값이 서로 달라야 1을 반환한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">9</span> ^ <span class="number">13</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0b1001</span> ^ <span class="number">0b1101</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bin(<span class="number">4</span>) <span class="comment">#4는 100이다.</span></span><br><span class="line"><span class="string">'0b100'</span></span><br></pre></td></tr></table></figure><br/><h2 id="비트연산-적용-예시"><a href="#비트연산-적용-예시" class="headerlink" title="비트연산 적용 예시"></a>비트연산 적용 예시</h2><p>비트 연산으로 복수 개 값의 포함 여부를 알 수 있다.<br>예를 들어 사용자가 요일을 선택하면 해당 요일에 알람을 보내는 기능이 있다고 해보자.<br>이진수 계산을 위해 월요일을 1(2<sup>0</sup> ), 화요일을 2(2<sup>1</sup> ), 수요일을 4(2<sup>2</sup> ),,, 일요일을 64(2<sup>6</sup> )라고 둔다.<br>만악 사용자가 월, 수를 골랐다면 1+4 이므로 5이다. 오늘이 월요일이라고 했을 때, 해당 유저에게 알람을 보낼지 확인하려면 AND 비트 연산을 하면된다!</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> &amp; <span class="number">5</span> <span class="comment">#월요일은 1이다.</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> &amp; <span class="number">5</span> <span class="comment">#화요일은 2이며, 유저는 화요일을 선택하지 않았다!</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4</span> &amp; <span class="number">5</span> <span class="comment">#수요일은 4이며, 유저는 수요일을 선택했다.</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p>권한을 지정할 때도 비트연산은 좋은 방법이다. 보통 쓰기 권한이 있으면 읽기 권한도 있는 것이므로, 읽기 권한이 1이면 쓰기 권한은 읽기 권한 값 1과 쓰기 권한 2를 더해 3으로 둘 수 있다. 이 때에는 메뉴의 권한 값과 일치하는 결과를 리턴해야 권한이 있다고 보면된다.<br>만약 읽기 권한의 유저가 쓰기 권한용 메뉴를 접근하면 아래와 같이 1을 반환할 것이고 이는 쓰기 권한용 값이 아니므로 유저가 접근할 수 없다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> &amp; <span class="number">3</span> <span class="comment">#읽기 권한 유저</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> &amp; <span class="number">3</span> <span class="comment"># 쓰기 권한 유저</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p>만약 읽기 + 쓰기 + 알림 기능을 가진 슈퍼어드민은 1 + 2+ 4 = 7이라면, 쓰기 메뉴에 접근할 수 있다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">7</span> &amp; <span class="number">3</span> <span class="comment">#슈퍼어드민</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h1 id="비트-시프트-shift-연산"><a href="#비트-시프트-shift-연산" class="headerlink" title="비트 시프트(shift) 연산"></a>비트 시프트(shift) 연산</h1><p>시프트 연산은 지정한 숫자만큼 값을 이동하는 것이다.</p><h3 id="lt-lt-왼쪽-shift"><a href="#lt-lt-왼쪽-shift" class="headerlink" title="&lt;&lt; 왼쪽 shift"></a>&lt;&lt; 왼쪽 shift</h3><p>지정한 숫자만큼 왼쪽으로 비트를 이동한다. 앞으로 n개만큼 생기는 것이기 때문에, n개만큼 자릿수가 늘어난다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>bin(<span class="number">0b1000</span> &lt;&lt; <span class="number">1</span>) <span class="comment">#bin()은 10진수를 2진수로 바꿔준다.</span></span><br><span class="line"><span class="string">'0b10000'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bin(<span class="number">0b1001</span> &lt;&lt; <span class="number">2</span>)</span><br><span class="line"><span class="string">'0b100100'</span></span><br></pre></td></tr></table></figure><h3 id="gt-gt-오른쪽-shift"><a href="#gt-gt-오른쪽-shift" class="headerlink" title="&gt;&gt; 오른쪽 shift"></a>&gt;&gt; 오른쪽 shift</h3><p>지정한 숫자만큼 오른쪽으로 비트를 이동한다. 뒤로 이동하는 것이기 때문에, n개 만큼 자릿수가 줄어든다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>bin(<span class="number">0b1000</span> &gt;&gt; <span class="number">1</span>)</span><br><span class="line"><span class="string">'0b100'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bin(<span class="number">0b1001</span> &gt;&gt; <span class="number">2</span>)</span><br><span class="line"><span class="string">'0b10'</span></span><br></pre></td></tr></table></figure><h2 id="시프트-연산-서비스-적용-예시"><a href="#시프트-연산-서비스-적용-예시" class="headerlink" title="시프트 연산 서비스 적용 예시"></a>시프트 연산 서비스 적용 예시</h2><p>위에서 살펴본 요일 별 알림 서비스를 다시 가져와보자.<br>이번에는 차례대로 월요일이 0, 화요일이 1, 수요일이 2,,, 일요일이 6이다.<br>아래와 같이 오른쪽 shift 연산을 통해 2의 n승을 구할 수 있다. 만약 토요일(5)을 예로들면 2<sup>5</sup>인 32란 값이 나온다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> &lt;&lt; <span class="number">5</span></span><br><span class="line"><span class="number">32</span></span><br></pre></td></tr></table></figure><p>요일을 2의 n승으로 바꿀 필요없이 순서대로 숫자를 매기고 시프트 연산을 통해 계산을 할 수 있다.<br>사용자가 월, 수, 금요일(1 + 4 + 16 = 21)을 골랐다고 했을 때 아래와 같이 연산할 수 있다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">21</span> &amp; <span class="number">1</span> &lt;&lt; <span class="number">0</span> <span class="comment">#월요일</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">21</span> &amp; <span class="number">1</span> &lt;&lt; <span class="number">1</span> <span class="comment">#화요일</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">21</span> &amp; <span class="number">1</span> &lt;&lt; <span class="number">2</span> <span class="comment">#수요일</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p>참고로 시프트 연산자와 비트 연산자가 같이 있으면 시프트 연산부터 계산한다!</p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
          <category> ETC </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>로그인 상태 유지 원리</title>
      <link href="2021/05/26/study5/"/>
      <url>2021/05/26/study5/</url>
      
        <content type="html"><![CDATA[<br/><p>Stateless한 HTTP 통신에서 로그인 유지는 어떻게 가능할까?</p><a id="more"></a> <hr><p>로그인 후 로그인 상태를 유지하기 위해서는 쿠키와 세션이 필요한데, 그 이유는 HTTP 프로토콜의 특성 때문이다. HTTP 프로토콜은 비연결성(Connectless)을 특성으로 갖는데, 이는 클라이언트의 요청에 대한 응답 이후 클라이언트와의 관계를 끊어버리는 것을 의미한다. 서버와 클라이언트 간의 관계를 끊어버리기 때문에 서버는 클라이언트의 상태를 알 수 없으며 이전에 했던 요청 정보도 알 수 없다. 이를 무상태(Stateless) 특성이라고 말한다.<br>그러나 로그인 상태를 유지한다는 것은 이전의 정보를 기억하는 것을 의미하므로 HTTP 통신만으로는 구현이 불가능하다.</p><p>쿠키와 세션을 사용하여 HTTP 통신 과정에서 클라이언트와 서버 간의 정보를 공유하고 기억하는 것을 가능하게 한다.</p><p><b>동작 원리는 다음과 같다.</b></p><ol><li><p>로그인을 시도한 사용자가 유효한 사용자인 경우, 응답 헤더의 <code>Set-Cookie</code>에 유저를 식별할 수 있는 세션 아이디 값을 포함하여 응답한다.<br> 사용자 입력한 아이디와 패스워드를 확인하여 우리 사이트의 사용자인지 확인한다. 회원이 아니라면, 권한이 없다는 401응답 등과 함께 로그인을 실패한다. 그리고 회원이라면, 헤더의 <code>Set-Cookie</code> 필드에 유저를 식별할 수 있는 세션 아이디 값을 포함하여 응답하고 서버에는 해당 세션 아이디 값을 저장한다.     </p><br/></li><li><p>클라이언트는 이후 요청부터 현재 브라우저에 저장된 모든 쿠키 값을 <code>Cookie</code>에 포함하여 요청하게 된다.<br> 로그인에 성공하여 <code>Set-Cookie</code>가 포함된 헤더를 응답받은 클라이언트는 해당 값을 브라우저의 쿠키에 저장한다. 그리고 페이지 이동하여 재 요청하게 되는 경우, 브라우저의 쿠키롤 포함하여 요청한다. 이 때 브라우저 쿠키는 헤더의 <code>Cookie</code> 값에 포함된다.</p></li></ol><br/><ol start="3"><li>서버는 클라이언트 요청 헤더에 포함된 세션 아이디 값을 확인하여 사용자를 식별하고 새로운 세션 아이디 값을 발급하여 응답한다.<br> 클라이언트 요청 헤더의 쿠키 값에 세션 아이디를 서버의 세션 값과 비교하여 유효한 값인지 확인한다. 해당 세션 아이디가 유효하다면, 사용자가 요청한 값과 함께 새로운 세션 아이디를 발급하여 응답한다. 이처럼 주고 받는 세션 아이디를 통해 해당 사용자의 로그인 상태를 계속 유지할 수 있게 된다.</li></ol><br/><ol start="4"><li>클라이언트 종료 시 브라우저의 세션 아이디가 제거되며, 서버에서 세션도 제거 된다.<br> 클라이언트 종료 시, 다시 말해 브라우저 종료하거나 로그아웃 시 브라우저의 세션 아이디는 제거되며 서버에서 세션도 제거된다.  </li></ol><br/>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
          <category> Network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> login </tag>
            
            <tag> session </tag>
            
            <tag> cookie </tag>
            
            <tag> authentication </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>백준 10815번 숫자 카드</title>
      <link href="2021/05/25/algo4/"/>
      <url>2021/05/25/algo4/</url>
      
        <content type="html"><![CDATA[<br/><p>백준 10815번 숫자 카드</p><a id="more"></a> <hr><p>내가 푼 코드 시간 초과!</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exsitCard</span><span class="params">(card, my_card)</span>:</span></span><br><span class="line">    checked_card = my_card</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">        <span class="keyword">if</span> len(checked_card) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> card == checked_card[<span class="number">0</span>] <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> len(checked_card) &lt; <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            center_num = len(checked_card)//<span class="number">2</span> </span><br><span class="line">            <span class="keyword">if</span> card == checked_card[center_num]:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> card &lt; checked_card[center_num]:</span><br><span class="line">                checked_card = checked_card[:center_num]</span><br><span class="line">            <span class="keyword">elif</span> card &gt; checked_card[center_num]:</span><br><span class="line">                checked_card = checked_card[center_num+<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">num1 = int(input())</span><br><span class="line">my_card = list(map(int, input().split()))</span><br><span class="line">my_card.sort()</span><br><span class="line"></span><br><span class="line">num2 = int(input())</span><br><span class="line">card_list = list(map(int, input().split()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> card <span class="keyword">in</span> card_list:</span><br><span class="line">    print(exsitCard(card,my_card))</span><br></pre></td></tr></table></figure><p>정답</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">existCard</span><span class="params">(card, checked_card)</span>:</span></span><br><span class="line">    start_idx = <span class="number">0</span></span><br><span class="line">    end_idx = len(checked_card) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(start_idx &lt;= end_idx):</span><br><span class="line">        idx = (start_idx + end_idx) //<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> card == checked_card[idx]:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"1"</span></span><br><span class="line">        <span class="keyword">elif</span> card &lt; checked_card[idx]:</span><br><span class="line">            end_idx = idx <span class="number">-1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            start_idx = idx + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">num1 = int(input())</span><br><span class="line">my_card = list(map(int, sys.stdin.readline().split()))</span><br><span class="line">my_card.sort()</span><br><span class="line"></span><br><span class="line">num2 = int(input())</span><br><span class="line">card_list = list(map(int, sys.stdin.readline().split()))</span><br><span class="line"></span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> card <span class="keyword">in</span> card_list:</span><br><span class="line">    result.append(existCard(card,my_card))</span><br><span class="line"></span><br><span class="line">print(<span class="string">" "</span>.join(result))</span><br></pre></td></tr></table></figure><p>시간 초과 발생한 이유는, idx가 아닌 배열 자체를 잘랐기 때문에! 배열 자체를 반 씩 자르고 저장하고 이래서 시간 초과가 발생했다.<br>이진 탐색을 할 때에는 배열은 그대로 두고 인덱스를 바꿔가면서 찾도록 하자!<br>while은 true말고 조건을 달아주자! 이번의 경우는 start_idx는 계속 늘어나고 end_idx는 계속 줄어드니까 + end_idx가 무조건 같거나 커야하므로 start_idx ≤ end_idx로 설정</p><p>idx에 +1, -1을 하는 이유는, idx가 반복되는 일을 방지하기 위해서다.<br>idx가 될 수 있는 수는 start_idx보다 크거나 같은 경우인데<br>idx가 start_idx보다 큰 경우, idx가 start_idx보다 제일 작은 1만큼 더 크다고 했을 때, idx+1을 하게 되면 2차이가 나므로 나누기 2를 하면, 이전 idx와 항상 다르게 된다.</p><p>idx가 start_idx와 같은 경우, (start,end,idx)라고 할 때 (2, 2, 2)나 (2, 3, 2)를 예로 들어보자.<br>(2, 2, 2)의 경우, idx+1을 만나면 (3,2,2)가 되어 start &gt; end가 되므로 while이 끝나 버린다. idx-1을 만나도 마찬가지이다. 그리고 (2, 3, 2)의 경우, idx+1을 만나면 (3,3,2)가 되어 idx가 바뀐다. idx-1을 만나면 (2, 1, 2)가 되어 while이 끝나 버린다!<br>계속 이어서 end_idx = idx-1도 살펴보면, idx가 될 수 있는 수는 idx와 같거나 작은 수인데,<br>idx가 end_idx보다 작은 경우, idx - 1을 하면 최소 2이상의 차이가 나므로 이전 idx와 항상 다르게 된다.<br>idx가 end_idx와 같은 경우, (2, 2, 2)가 있는데 idx-1을 하면 while이 끝나 버린다.</p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>백준 1406번 에디터</title>
      <link href="2021/05/25/algo3/"/>
      <url>2021/05/25/algo3/</url>
      
        <content type="html"><![CDATA[<br/><p>백준 1406번 에디터</p><a id="more"></a> <hr><p>내가 푼 답 ⇒ 시간 초과</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#input = sys.stdin.readline</span></span><br><span class="line">row = list(input().rstrip())</span><br><span class="line">num = int(input())</span><br><span class="line">p = len(row)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">    req = input().rstrip().split(<span class="string">" "</span>)</span><br><span class="line">    <span class="keyword">if</span> len(req) &gt; <span class="number">1</span>:</span><br><span class="line">        row.insert(p, req[<span class="number">1</span>])</span><br><span class="line">        p += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        req = req[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> req == <span class="string">"L"</span>:</span><br><span class="line">        p = p - <span class="number">1</span> <span class="keyword">if</span> p &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> req == <span class="string">"D"</span>:</span><br><span class="line">        p = p + <span class="number">1</span> <span class="keyword">if</span> p &lt; len(row) <span class="keyword">else</span> p</span><br><span class="line">    <span class="keyword">elif</span> req == <span class="string">"B"</span>:</span><br><span class="line">        <span class="keyword">if</span> p &gt; <span class="number">0</span>:</span><br><span class="line">            p = p <span class="number">-1</span></span><br><span class="line">            row.pop(p)</span><br><span class="line"></span><br><span class="line">print(<span class="string">''</span>.join(row))</span><br></pre></td></tr></table></figure><p>다른방법 고민..</p><p>방법 1: 스택 2개를 만들고, 한 쪽의 top이 포인터가 되어 스택끼리 값을 넣었다 뺐다 해준다.<br>방법 2: collections 의 deque를 사용한다.<br>방법1 ⇒ 이것도 시간 초과 남 ;;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">stack1 = list(input().rstrip())</span><br><span class="line">stack2 = []</span><br><span class="line">num = int(input())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">    req = input().rstrip().split(<span class="string">" "</span>)</span><br><span class="line">    <span class="keyword">if</span> len(req) &gt; <span class="number">1</span>:</span><br><span class="line">        stack1.append(req[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        req = req[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> req == <span class="string">"L"</span>:</span><br><span class="line">        <span class="keyword">if</span> len(stack1) &gt; <span class="number">0</span>:</span><br><span class="line">            stack2.insert(<span class="number">0</span>, stack1.pop())</span><br><span class="line">    <span class="keyword">elif</span> req == <span class="string">"D"</span>:</span><br><span class="line">        <span class="keyword">if</span> len(stack2) &gt; <span class="number">0</span>:</span><br><span class="line">            stack1.append(stack2.pop(<span class="number">0</span>))</span><br><span class="line">    <span class="keyword">elif</span> req == <span class="string">"B"</span>:</span><br><span class="line">        <span class="keyword">if</span> len(stack1) &gt; <span class="number">0</span>:</span><br><span class="line">            stack1.pop()</span><br><span class="line"></span><br><span class="line">stack1.extend(stack2)</span><br><span class="line">print(<span class="string">""</span>.join(stack1))</span><br></pre></td></tr></table></figure><p>이건 블로그 복붙 방식은 같은데 이건 통과</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> stdin</span><br><span class="line"></span><br><span class="line">stk1 = list(stdin.readline().strip())</span><br><span class="line">stk2 = []</span><br><span class="line">n = int(input())</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> stdin:</span><br><span class="line">    <span class="keyword">if</span> line[<span class="number">0</span>] == <span class="string">'L'</span>:</span><br><span class="line">        <span class="keyword">if</span> stk1: stk2.append(stk1.pop())</span><br><span class="line">        <span class="keyword">else</span>: <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">elif</span> line[<span class="number">0</span>] == <span class="string">'D'</span>:</span><br><span class="line">        <span class="keyword">if</span> stk2: stk1.append(stk2.pop())</span><br><span class="line">        <span class="keyword">else</span>: <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">elif</span> line[<span class="number">0</span>] == <span class="string">'B'</span>:</span><br><span class="line">        <span class="keyword">if</span> stk1: stk1.pop()</span><br><span class="line">        <span class="keyword">else</span>: <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">elif</span> line[<span class="number">0</span>] == <span class="string">'P'</span>:</span><br><span class="line">        stk1.append(line[<span class="number">2</span>])</span><br><span class="line">print(<span class="string">''</span>.join(stk1 + list(reversed(stk2))))</span><br></pre></td></tr></table></figure><p>이유! insert() 메서드가 시간 초과의 원인이었다. 위 블로그 방식은 그냥 append() 후에 reveresed하는 방식으로 했다.</p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>백준 17299번 오등큰수</title>
      <link href="2021/05/25/algo2/"/>
      <url>2021/05/25/algo2/</url>
      
        <content type="html"><![CDATA[<br/><p>백준 17299번 오등큰수</p><a id="more"></a> <hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">num = int(input())</span><br><span class="line">a = list(map(int, input().split(<span class="string">" "</span>)))</span><br><span class="line">result = [<span class="string">"-1"</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(num)]</span><br><span class="line">stack = [<span class="number">0</span>]</span><br><span class="line">count = dict()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        count[i] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        count[i] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">    <span class="keyword">while</span> stack <span class="keyword">and</span> count[a[stack[<span class="number">-1</span>]]] &lt; count[a[i]]:</span><br><span class="line">        result[stack[<span class="number">-1</span>]] = str(a[i])</span><br><span class="line">        stack.pop()</span><br><span class="line">    stack.append(i)</span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">" "</span>.join(result))</span><br></pre></td></tr></table></figure><p>[17298]오큰수와 같은 유형의 문제이다. 다만, 오등큰수는 각 원소 별 합에 대한 크기를 비교한다.</p><p>count에 원소를 키로 해서 키 별 원소 개수를 저장한다.</p><p>stack에는 a의 인덱스 값을 저장할 건데, for문을 돌면서 count[a] 값이 작은 a의 인덱스를 stack에 push하다가 stack[-1]보다 큰 count[a]를 만나면 stack에서 인덱스를 pop한다.</p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>백준 2293번 동전1</title>
      <link href="2021/05/25/algo-1/"/>
      <url>2021/05/25/algo-1/</url>
      
        <content type="html"><![CDATA[<br/><p>백준 2293번 동전1</p><a id="more"></a> <hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">n, k = map(int, input().split())</span><br><span class="line">c = []</span><br><span class="line">dp = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(k + <span class="number">1</span>)]</span><br><span class="line">dp[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    c.append(int(input()))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, k + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> j - i &gt;= <span class="number">0</span>:</span><br><span class="line">            dp[j] += dp[j - i]</span><br><span class="line">print(dp[k])</span><br></pre></td></tr></table></figure><p>핵심 아이디어</p><p>k길이의 배열을 만들고, 각 원소 별 경우의 수를 계산하여 k가 되는 경우의 수를 구한다.</p><p>설명</p><p>dp 배열에서 원소를 dp[key] = value 라고 한다면,</p><p>key : 1, 2, 3, … k<br>value : key를 만들 수 있는 경우의 수</p><p>예를 들어 [1, 2, 5] coin을 가지고 k = 4라면, 우리는 약간의 계산으로 경우의 수가 3개인 걸 알 수 있는데, 코드로 보면</p><p>i = 1, j = 1 일 때, $j - i ≥ 0$이므로 $dp[1] += dp[0]$ 이 된다. 이 때 dp[0]은 1이므로 dp[1]도 1이다.<br>i = 1, j =2,3,4일 때도 모두 j - i ≥ 0이므로 dp[2], dp[3], dp[4] 역시 모두 1이다.<br>i =2, j = 2 일 때, j - i ≥ 0이므로 dp[2] += dp[0] 이 된다. dp[2]는 2이다. 왜냐하면 누적값이기 때문에<br>i = 2, j =3 일 때, j -i ≥ 0이므로, dp[3] += dp[1]에서 dp[1]은 1이므로, dp[3]도 1이다.<br>i = 2, j = 4일 때, j - i ≥0이므로, dp[4] += dp[2]에서 dp[2]는 2이므로 dp[4]도 3이다. 왜냐하면 dp[4]가 앞서 1이었기 때문에</p><p>이로써 dp[4] = 3이므로, 경우의 수가 3개가 나온다.</p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>프로젝트 App이 여러 개일 때 URL 분기 처리하기</title>
      <link href="2021/05/16/project4-3/"/>
      <url>2021/05/16/project4-3/</url>
      
        <content type="html"><![CDATA[<br/><p>앱이 여러 개 있을 때, URL에 따라 앱 별로 요청을 전달하는 방법에 대해 살펴보자.</p><a id="more"></a> <hr><p>장고의 한 프로젝트 안에는 여러 개의 앱을 만들 수 있다. 아래처럼 만들고 싶은 앱의 개수만큼 명령어를 실행해주면 된다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py startapp blogs</span><br><span class="line">$ python manage.py startapp reviews</span><br><span class="line">$ python manage.py startapp polls</span><br></pre></td></tr></table></figure><p>이번 포스팅에서는 앱이 여러 개 있을 때, URL에 따라 앱 별로 요청을 전달하는 방법에 대해 살펴볼 것이다.</p><p>프로젝트에는 아래와 같이 3개의 앱(blogs, polls, reviews)이 있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">└── mysite</span><br><span class="line">    ├── blogs</span><br><span class="line">    ├── manage.py</span><br><span class="line">    ├── mysite</span><br><span class="line">    ├── polls</span><br><span class="line">    └── reviews</span><br></pre></td></tr></table></figure><p>앱을 추가한 뒤에는  <code>INSTALLED_APP</code>에 앱 config 정보를 추가해야 한다. config 명은 앱 하위의 apps.py를 확인하면 된다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS &#x3D; [</span><br><span class="line">    ...</span><br><span class="line">    &#39;blogs.apps.BlogsConfig&#39;,</span><br><span class="line">    &#39;polls.apps.PollsConfig&#39;,</span><br><span class="line">    &#39;reviews.apps.ReviewsConfig&#39;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="방법1-PATH로-분기-처리"><a href="#방법1-PATH로-분기-처리" class="headerlink" title="방법1. PATH로 분기 처리"></a>방법1. PATH로 분기 처리</h2><p>앱별로 시작하는 PATH를 다르게 하여 분기 처리할 수 있다.<br>각각의 앱 디렉토리 하위에 urls.py를 두고 프로젝트 세팅 디렉토리인 mysite에도 urls.py가 있어야 한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># mysite&#x2F;urls.py</span><br><span class="line"></span><br><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import path, include</span><br><span class="line">from xcapp.views import *</span><br><span class="line">from django.contrib.auth import views as auth_views</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    path(&#39;admin&#x2F;&#39;, admin.site.urls),</span><br><span class="line">    path(&#39;blogs&#x2F;&#39;, include(&#39;blogs.urls&#39;)),</span><br><span class="line">    path(&#39;polls&#x2F;&#39;, include(&#39;polls.urls&#39;)),</span><br><span class="line">    path(&#39;reviews&#x2F;&#39;, include(&#39;reviews.urls&#39;))</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>앱 별로  blogs, polls, reviews라는 프리픽스를 설정하여, 해당 PATH로 시작하는 요청이 들어오면 앱 하위의 urls.py를 임포트하는 방식이다.</p><p>앱 별 urls.py는 아래와 같을 것이다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#polls&#x2F;urls.py</span><br><span class="line"></span><br><span class="line">from django.urls import path</span><br><span class="line">from polls.views import *</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    path(&#39;&#39;, IndexView.as_view(), name&#x3D;&#39;polls&#39;), #127.0.0.1:8000&#x2F;polls&#x2F;</span><br><span class="line">    path(&#39;test&#x2F;&#39;, TestView.as_view(), name&#x3D;&#39;polls_test&#39;), #127.0.0.1:8000&#x2F;polls&#x2F;test&#x2F;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>확인해보면, 아래와 같이 잘 처리되는 것을 확인할 수 있다.</p><p><img src="https://images.velog.io/images/reowjd/post/c4bb7669-4513-4d89-90da-1881fcc1a696/image1.png" alt=""><br><img src="https://images.velog.io/images/reowjd/post/5f36fe2e-9fef-4d0d-a426-1758cb745aeb/image2.png" alt=""><br><img src="https://images.velog.io/images/reowjd/post/81514ac7-df2d-46e0-a485-dc1628ba484c/image3.png" alt=""></p><h2 id="방법2-도메인으로-분기-처리-Middleware"><a href="#방법2-도메인으로-분기-처리-Middleware" class="headerlink" title="방법2. 도메인으로 분기 처리 - Middleware"></a>방법2. 도메인으로 분기 처리 - Middleware</h2><p>다음은 <code>Middleware</code>를 사용하여 앱 별로 다른 도메인을 두는 방법을 소개한다.<br>장고 공식 문서의 <a href="https://docs.djangoproject.com/en/3.2/topics/http/urls/#how-django-processes-a-request">요청을 처리하는 법</a>을 살펴보면 아래와 같이 나와있다.</p><blockquote><p>Django는 사용할 루트 URLconf 모듈을 결정합니다. 일반적으로 이것은 ROOT_URLCONF설정 의 값 이지만 들어오는 HttpRequest개체에 urlconf 속성 (미들웨어에 의해 설정 됨)이있는 경우 해당 값이 ROOT_URLCONF설정 대신 사용됩니다 .</p></blockquote><p>기본적으로 <code>ROOT_URLCONF</code> 설정 값을 사용하지만 <code>HttpRequest</code>에 <code>urlconf</code> 속성이 있으면, <code>ROOT_URLCONF</code> 대신에 사용한다고 설명하고 있다. 이 같은 처리 방식을 사용하여 미들웨어에서 도메인을 확인하고, 도메인에 따라 <code>urlconf</code>  값을 지정할 것이다.</p><p>먼저, settings.py에 앱 별 도메인을 정의한다.<br>(도메인 대신 로컬호스트로 테스트하는 경우, 포트를 달리하여 확인할 수 있습니다.)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#mysite&#x2F;settings.py</span><br><span class="line"></span><br><span class="line">BLOGS_DOMAIN &#x3D; &#39;blog-dev.com&#39;</span><br><span class="line">REVIEWS_DOMAIN &#x3D; &#39;reviews-dev.com&#39;</span><br><span class="line">POLLS_DOMAIN &#x3D; &#39;polls-dev.com&#39;</span><br></pre></td></tr></table></figure><p><code>ALLOWED_HOST</code>에도 해당 도메인을 추가한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALLOWED_HOSTS &#x3D; [BLOGS_DOMAIN, REVIEWS_DOMAIN, POLLS_DOMAIN]</span><br></pre></td></tr></table></figure><p>그리고 나서, 미들웨어(Middleware)를 작성한다. 미들웨어 명은 <code>VirtualHostMiddleware</code>로 두었다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#mysite&#x2F;middlewares&#x2F;virtualhostmiddleware.py</span><br><span class="line"></span><br><span class="line">from django.conf import settings</span><br><span class="line"></span><br><span class="line">virtual_hosts &#x3D; &#123;</span><br><span class="line">    settings.BLOGS_DOMAIN : &#39;blogs.urls&#39;,</span><br><span class="line">    settings.REVIEWS_DOMAIN : &#39;reviews.urls&#39;,</span><br><span class="line">    settings.POLLS_DOMAIN : &#39;polls.urls&#39; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class VirtualHostMiddleware:</span><br><span class="line">    def __init__(self, get_response):</span><br><span class="line">        self.get_response &#x3D; get_response</span><br><span class="line"></span><br><span class="line">    def __call__(self, request):</span><br><span class="line">        host &#x3D; request.get_host()</span><br><span class="line">        request.urlconf &#x3D; virtual_hosts.get(host)</span><br><span class="line"></span><br><span class="line">        response &#x3D; self.get_response(request)        </span><br><span class="line">        return response</span><br></pre></td></tr></table></figure><p><a href="https://docs.djangoproject.com/en/3.1/topics/http/middleware/">미들웨어</a>는 request 전/후, response 전/후에 호출되어 요청 및 응답에 대한 후크 프레임 워크이다.<br><code>self.get_response()</code> 전후로 요청에 대한, 응답에 대한 처리를 할 수 있다. 우리가 해야할 것은 도메인에 따른 분기처리 이므로 view를 호출하기 전에 작업이 필요하다. 그러므로 self.get_response(request) 전에 작업을 처리한다.<br>코드가 짧으니 살펴보면,<br><code>request</code>의 <code>get_host()</code>메서드로 요청한 도메인 명을 가져온 뒤,  호스트 별 url 모듈을 urlconf 값으로 지정한다.<br>정말 간단하다!</p><p>새로 작성한 미들웨어는 settings.py에 추가해 준다.<br>미들웨어는 리스트에 정의된 순서대로 미들웨어를 적용하기 때문에 순서를 고려해야 하는데, 도메인에 따른 분기처리가 필요하기 때문에 맨 위에 두었다. SSL을 적용하는 경우 <code>SecuretiryMiddleware</code>를 가장 위에 두라니, 2번 째에 두는게 나을 수 것 같기도 하다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE &#x3D; [</span><br><span class="line">    &#39;mysite.middlewares.virtualhostmiddleware.VirtualHostMiddleware&#39;,</span><br><span class="line">    ...</span><br><span class="line">    &#39;django.middleware.security.SecurityMiddleware&#39;,</span><br><span class="line">    &#39;django.contrib.sessions.middleware.SessionMiddleware&#39;,</span><br><span class="line">    &#39;django.middleware.common.CommonMiddleware&#39;,</span><br><span class="line">    &#39;django.middleware.csrf.CsrfViewMiddleware&#39;,</span><br><span class="line">    &#39;django.contrib.auth.middleware.AuthenticationMiddleware&#39;,</span><br><span class="line">    &#39;django.contrib.messages.middleware.MessageMiddleware&#39;,</span><br><span class="line">    &#39;django.middleware.clickjacking.XFrameOptionsMiddleware&#39;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>도메인으로 호출해 보면, 프리픽스 없이도 분기 처리되는 것을 확인할 수 있다.<br><img src="https://images.velog.io/images/reowjd/post/acd6d72e-a734-4edd-b797-a013c4aca770/image4.png" alt=""></p><p>최종 프로젝트 구조</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── blogs</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── admin.py</span><br><span class="line">│   ├── apps.py</span><br><span class="line">│   ├── migrations</span><br><span class="line">│   │   └── __init__.py</span><br><span class="line">│   ├── models.py</span><br><span class="line">│   ├── templates</span><br><span class="line">│   │   └── blogs</span><br><span class="line">│   │       └── index.html</span><br><span class="line">│   ├── tests.py</span><br><span class="line">│   ├── urls.py</span><br><span class="line">│   └── views.py</span><br><span class="line">├── db.sqlite3</span><br><span class="line">├── manage.py</span><br><span class="line">├── mysite</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── asgi.py</span><br><span class="line">│   ├── middlewares</span><br><span class="line">│   │   └── virtualhostmiddleware.py</span><br><span class="line">│   ├── settings.py</span><br><span class="line">│   ├── urls.py</span><br><span class="line">│   └── wsgi.py</span><br><span class="line">├── polls</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── admin.py</span><br><span class="line">│   ├── apps.py</span><br><span class="line">│   ├── migrations</span><br><span class="line">│   │   └── __init__.py</span><br><span class="line">│   ├── models.py</span><br><span class="line">│   ├── templates</span><br><span class="line">│   │   └── polls</span><br><span class="line">│   │       └── index.html</span><br><span class="line">│   ├── tests.py</span><br><span class="line">│   ├── urls.py</span><br><span class="line">│   └── views.py</span><br><span class="line">└── reviews</span><br><span class="line">    ├── __init__.py</span><br><span class="line">    ├── admin.py</span><br><span class="line">    ├── apps.py</span><br><span class="line">    ├── migrations</span><br><span class="line">    │   └── __init__.py</span><br><span class="line">    ├── models.py</span><br><span class="line">    ├── templates</span><br><span class="line">    │   └── reviews</span><br><span class="line">    │       └── index.html</span><br><span class="line">    ├── tests.py</span><br><span class="line">    ├── urls.py</span><br><span class="line">    └── views.py</span><br></pre></td></tr></table></figure><h3 id="정리하며"><a href="#정리하며" class="headerlink" title="정리하며"></a>정리하며</h3><p>장고 프로젝트에 앱이 여러개일 때 PATH 별로, 도메인 별로 분기 처리하는 방법을 살펴 보았다. PATH 별은 간단하지만, 도메인 별로 분기처리 하는 방법의 경우, 로컬에서 개발 작업을 진행할 때 앱의 개수 만큼 포트를 열어줘야 돼서 번거로움이 생길 수 있다. 그래서 개발할 때는 PATH로, 스테이징/운영 환경에 배포할 때는 도메인 별로 사용하는 방법도 괜찮을 것 같다.<br>settings.py 대신, <code>settings/dev.py</code> 와 <code>settings/prod.py</code>로 환경을 나누고 prod.py에서만 미들웨어를 사용하게 하는 것이다. 개발 환경에서는 ROOT_URLCONF 값인 mysite.url 를 그대로 사용하기 때문에, 프리픽스로 URL에 접근할 수 있을 것이다.</p><p>끝:)</p>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
          <category> Deep Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> python </tag>
            
            <tag> domain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>static 파일 캐시 처리하기</title>
      <link href="2021/05/16/project4-2/"/>
      <url>2021/05/16/project4-2/</url>
      
        <content type="html"><![CDATA[<br/><p>templatetags를 사용하여 static 파일이 캐시되는 이슈를 해결합니다.</p><a id="more"></a> <hr><p>유지 보수 작업을 하고 서버에 배포 했는데, 정적(static) 파일(js, css..)들이 바로 반영되지 않는 이슈가 있다. 그 이유는 파일들이 캐시 처리되었기 때문이다. 캐시된 파일들은 로컬에서 가져오기 때문에 서버에 배포해도 반영되지 않는다. 이 문제를 해결하기 위해서는 새로운 파일이라는 표시를 해주어야 한다. 아래와 같이 파라미터를 추가하면 캐시된 파일을 사용하지 않고 서버에서 가져온다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://static.velog.io/static/js/20.c4f442fa.chunk.js?v=&lt;RANDOM_NUM&gt;👈"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>배포 시마다<code>&lt;RANDOM_NUM&gt;</code>을 달리하면, 캐시로 인해 반영되지 않는 문제를 해결할 수 있다. </p><p>그렇다면 장고에서는 이 처리를 어떻게 하는게 좋을까? 새로운 정적 파일을 로드할 때마다 파라미터를 추가할 수도 있지만, 장고에서 제공하는 <code>tempatetags</code>와  템플릿 태그인 static 태그를 사용하면 좀 더 간단하게 해결할 수 있다. static 태그를 사용하여 파일을 로드하면 자동으로 파라미터가 붙도록 작업할 것이다.<br>이 작업은 정적 파일을 아래와 같이 static 태그로 로드한다는 전제가 필요하다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"&#123;% static js/20.c4f442fa.chunk.js %&#125;"</span>&gt;</span><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span></span><br></pre></td></tr></table></figure><h2 id="templatetags"><a href="#templatetags" class="headerlink" title="templatetags"></a>templatetags</h2><p><code>tempatetags</code>는 장고에서 커스텀 템플릿 태그를 만들 때 사용한다. <code>app</code> 하위에 <code>templatetags</code> 폴더를 만들고 폴더 하위에 파일을 정의하면 된다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── app</span><br><span class="line">│   ├── migrations</span><br><span class="line">│   ├── templatetags 👈</span><br><span class="line">│   └── views</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── admin.py</span><br><span class="line">│   ├── apps.py</span><br><span class="line">│   ├── models.py</span><br><span class="line">├── djangoseries</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── __pycache__</span><br><span class="line">│   ├── settings.py</span><br><span class="line">│   ├── urls.py</span><br><span class="line">│   └── wsgi.py</span><br><span class="line">└── manage.py</span><br></pre></td></tr></table></figure><h2 id="static-템플릿-태그-커스텀하기"><a href="#static-템플릿-태그-커스텀하기" class="headerlink" title="static 템플릿 태그 커스텀하기"></a>static 템플릿 태그 커스텀하기</h2><p><code>templatetags</code> 폴더 하위에 <code>static.py</code>를 만든다. 그리고 아래와 같이 코드를 작성한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#templatetags/static.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> template</span><br><span class="line"><span class="keyword">from</span> django.templatetags.static <span class="keyword">import</span> StaticNode</span><br><span class="line">register = template.Library()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomStaticNode</span><span class="params">(StaticNode)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">url</span><span class="params">(self, context)</span>:</span></span><br><span class="line">        version = <span class="comment">#랜덤 값으로 하거나 날짜로 작업할 수 있음.</span></span><br><span class="line">        path = <span class="string">f'<span class="subst">&#123;super().url(context)&#125;</span>?v=<span class="subst">&#123;version&#125;</span>'</span></span><br><span class="line">        <span class="keyword">return</span> path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@register.tag('static')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_static</span><span class="params">(parser, token)</span>:</span></span><br><span class="line">    node = CustomStaticNode.handle_token(parser, token)</span><br><span class="line">    <span class="keyword">return</span> node</span><br></pre></td></tr></table></figure><ul><li><code>register = template.Library()</code> : <code>Library</code>에 등록하기 위해 <code>register</code>를 선언해야 한다.</li><li><code>@register.tag(&#39;static&#39;)</code> : <code>static</code>태그 호출 시, 아래 함수를 호출하고 결과를 반환한다.</li></ul><p>** <a href="https://himanmengit.github.io/django/2018/11/28/Django-custom-static-tags.html">코드 출처</a> </p><p>코드는 단순한데, 장고에서 기본적으로 제공하는 <code>static</code> 태그의 <code>StaticNode</code> 클래스를 상속 받아 <code>CustomStaticNode</code>로 재정의 하는 것이다. 부모 <code>url()</code> 메서드의 url을 받고 <code>?v={version}</code>를 추가해서 새로 반환한다.</p><blockquote><p><code>StaticNode</code>의 <code>url()</code>메서드는 아래와 같다.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StaticNode</span><span class="params">(template.Node)</span>:</span></span><br><span class="line">...</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">url</span><span class="params">(self, context)</span>:</span></span><br><span class="line">        path = self.path.resolve(context)</span><br><span class="line">        <span class="keyword">return</span> self.handle_simple(path)</span><br></pre></td></tr></table></figure><p>그리고 기존 <code>static</code> 태그는 아래와 같이 태그를 등록하였다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@register.tag('static')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_static</span><span class="params">(parser, token)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Join the given path with the STATIC_URL setting.</span></span><br><span class="line"><span class="string">    Usage::</span></span><br><span class="line"><span class="string">        &#123;% static path [as varname] %&#125;</span></span><br><span class="line"><span class="string">    Examples::</span></span><br><span class="line"><span class="string">        &#123;% static "myapp/css/base.css" %&#125;</span></span><br><span class="line"><span class="string">        &#123;% static variable_with_path %&#125;</span></span><br><span class="line"><span class="string">        &#123;% static "myapp/css/base.css" as admin_base_css %&#125;</span></span><br><span class="line"><span class="string">        &#123;% static variable_with_path as varname %&#125;</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> StaticNode.handle_token(parser, token)</span><br></pre></td></tr></table></figure><p>마찬가지로, 기존 <code>static</code> 등록 코드에서 <code>StaticNode</code> 대신, <code>CustomStaticNode</code>로 변경해 주면 된다!</p><p>파라미터 값의 경우, 호출할 때마다 값이 바뀌면 파일 변경이 없어도 서버에서 파일을 계속 새로 받기 때문에 날짜로 하거나 다른 파일에 파라미터 값을 따로 관리하는 방식을 추천하는 바이다.</p><p>끝!</p>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
          <category> Deep Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> python </tag>
            
            <tag> static </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>제네릭 뷰(Generic View) 살펴보기</title>
      <link href="2021/05/16/project4-1/"/>
      <url>2021/05/16/project4-1/</url>
      
        <content type="html"><![CDATA[<br/><p>장고의 제네릭 뷰를 살펴보고 예제를 작성해 보자.</p><a id="more"></a> <hr><p>장고는 모델(Model), 템플릿(Template), 뷰(View)로 구성된 <strong>MTV패턴</strong> 웹프레임워크이다.<br>이 중 뷰는 사용자 요청을 처리하고 응답을 반환하는 역할을 한다.<br>뷰는 함수로도, 클래스로도 구현할 수 있는데, 클래스로 구현하면 <strong>제네릭 뷰</strong>를 사용할 수 있다.</p><p>뷰를 작성하며, 제네릭 뷰의 역할 과 종류, 믹스인 뷰 등을 살펴보자!</p><h1 id="제네릭-뷰-Generic-View"><a href="#제네릭-뷰-Generic-View" class="headerlink" title="제네릭 뷰(Generic View)"></a>제네릭 뷰(Generic View)</h1><p>제네릭 뷰는 장고에서 기본적으로 제공하는 뷰 클래스를 의미한다. 용도에 따라 다양한 <a href="https://docs.djangoproject.com/ko/3.1/ref/class-based-views/">제네릭 뷰</a>를 제공하고 있으며, 우리는 이 제네릭 뷰를 상속하고 메서드를 재정의하여 좀 더 편리하게 작업할 수 있다.<br>제너릭 뷰에는 용도에 따라 ListView, DetailView, FormView, TemplateView 등이 있는데, 전부 <code>View</code> 클래스를 상속받고 있다. 그렇기 때문에 <code>View</code> 클래스 메서드를 이해하면, 다른 제너릭 뷰들의 공통 메서드도 이해할 수 있을 것이다.</p><h2 id="View"><a href="#View" class="headerlink" title="View"></a>View</h2><p>앞서 언급했듯이, 다른 제너릭 뷰가 상속받는 기본 제너릭 뷰이다. 메서드는 다음과 같다.</p><h3 id="1-setup-request-args-kwargs"><a href="#1-setup-request-args-kwargs" class="headerlink" title="1. setup(request, args, *kwargs)"></a>1. setup(request, <em>args, *</em>kwargs)</h3><p><code>dispatch()</code>전에 초기화를 수행한다. 이 메서드를 재정의하는 경우 <code>super()</code>를 호출해야 한다. 아래는 <code>View</code>에 정의된 <code>setup()</code> 코드이다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setup</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">    <span class="string">"""Initialize attributes shared by all view methods."""</span></span><br><span class="line">    self.request = request</span><br><span class="line">    self.args = args</span><br><span class="line">    self.kwargs = kwargs</span><br></pre></td></tr></table></figure><h3 id="2-dispatch-request-args-kwargs"><a href="#2-dispatch-request-args-kwargs" class="headerlink" title="2. dispatch(request, args, *kwargs)"></a>2. dispatch(request, <em>args, *</em>kwargs)</h3><p>요청을 받고 HTTP 응답을 반환하는 메서드이다. GET 요청은 <code>get()</code>으로, POST 요청은 <code>post()</code> 메서드로 호출한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">    <span class="comment"># Try to dispatch to the right method; if a method doesn't exist,</span></span><br><span class="line">    <span class="comment"># defer to the error handler. Also defer to the error handler if the</span></span><br><span class="line">    <span class="comment"># request method isn't on the approved list.</span></span><br><span class="line">    <span class="keyword">if</span> request.method.lower() <span class="keyword">in</span> self.http_method_names:</span><br><span class="line">        handler = getattr(self, request.method.lower(), self.http_method_not_allowed)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        handler = self.http_method_not_allowed</span><br><span class="line">    <span class="keyword">return</span> handler(request, *args, **kwargs)</span><br></pre></td></tr></table></figure><h3 id="3-http-method-not-allowed-request-args-kwargs"><a href="#3-http-method-not-allowed-request-args-kwargs" class="headerlink" title="3. http_method_not_allowed(request, args, *kwargs)"></a>3. http_method_not_allowed(request, <em>args, *</em>kwargs)</h3><p>뷰가 지원하지 않는 HTTP 메서드를 호출한 경우, <code>http_method_not_allowed()</code> 메서드가 대신 호출된다. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">http_method_not_allowed</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">     logger.warning(</span><br><span class="line">         <span class="string">'Method Not Allowed (%s): %s'</span>, request.method, request.path,</span><br><span class="line">         extra=&#123;<span class="string">'status_code'</span>: <span class="number">405</span>, <span class="string">'request'</span>: request&#125;</span><br><span class="line">     )</span><br><span class="line">     <span class="keyword">return</span> HttpResponseNotAllowed(self._allowed_methods())</span><br></pre></td></tr></table></figure><h3 id="4-options-request-args-kwargs"><a href="#4-options-request-args-kwargs" class="headerlink" title="4. options(request, args, *kwargs)"></a>4. options(request, <em>args, *</em>kwargs)</h3><p>HTTP OPTIONS 요청에 대한 응답을 처리한다. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">options</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">    <span class="string">"""Handle responding to requests for the OPTIONS HTTP verb."""</span></span><br><span class="line">    response = HttpResponse()</span><br><span class="line">    response[<span class="string">'Allow'</span>] = <span class="string">', '</span>.join(self._allowed_methods())</span><br><span class="line">    response[<span class="string">'Content-Length'</span>] = <span class="string">'0'</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><p>기본 <code>View</code> 메서드를 살펴 보았으니, 다른 제너릭 뷰들을 살펴보자. </p>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
          <category> Deep Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> python </tag>
            
            <tag> view </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>요청에서 응답까지의 프로세스 살펴보기</title>
      <link href="2021/05/16/project4/"/>
      <url>2021/05/16/project4/</url>
      
        <content type="html"><![CDATA[<br/><p>장고에서 요청을 받고 응답하기까지의 프로세스를 살펴보자.</p><a id="more"></a> <hr><p>아래 이미지는 프로세스를 도식화했다.<br><img src="/gallery/project4-1-1.png" style="width:500px;"></p><br/><p>요청을 받으면 가장 먼저 웹 애플리케이션 서버인 wsgi 서버를 만난다.</p><h3 id="1-WSGI"><a href="#1-WSGI" class="headerlink" title="1. WSGI"></a>1. WSGI</h3><p>WSGI는 웹 서버(apache, nginx)와 장고 프로젝트 간의 중계 역할을 한다. 웹 서버에서의 명령을 프레임워크가 이해할 수 없으니 그 사이를 메꿔주는 역할을 하는 것이다. <code>gunicorn</code>나 <code>uWSGI</code>가 wsgi 서버들이다. wsgi 서버에서 요청을 처리하기 위해 애플리케이션을 실행하고, 애플리케이션이 처리한 응답을 반환하는 역할을 한다. </p><blockquote><p>wsgi 서버는 보통 운영에서 사용되며 개발할 때는 <code>runserver</code> 명령어로 대신한다. 장고 내장 서버 (<code>runserver</code>)는 단일 프로세스를 사용하기 때문에 운영보다는 디버깅에 적합하다. 운영에서는 멀티프로세싱이 가능한 gunicorn이나 uWSGI등을 사용하여 많은 트래픽을 처리할 수 있도록 한다.</p></blockquote><h3 id="2-Middleware"><a href="#2-Middleware" class="headerlink" title="2. Middleware"></a>2. Middleware</h3><p>Middleware는 뷰에서 요청 받기 전, 사용자에게 응답을 넘기기 전 등에 호출되어 다양하게 사용된다. 미들웨어를 활성화하기 위해서는 <code>settings.py</code>에 <code>MIDDLEWARE</code>를 추가한다. 아래는 예시 값이다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#공식 문서 참고</span></span><br><span class="line"><span class="comment">#https://docs.djangoproject.com/en/3.1/topics/http/middleware/</span></span><br><span class="line"></span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">'django.middleware.security.SecurityMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.csrf.CsrfViewMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages.middleware.MessageMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>요청이 발생하면, wsgi 핸들러는 <code>settings.py</code> 파일을 임포트하고 <code>MIDDELWARE</code>를 찾아 모든 미들웨어 클래스를 로드한다.</p><p><strong>미들웨어에서 다음과 같은 메서드 등을 사용할 수 있다.</strong></p><ul><li><code>process_request</code><br>  -요청이 들어오자 마자 처리하는 메서드(로그인 여부 확인 등)<br>  -<code>process_request</code> 응답 후, <code>urls.py</code>에서 요청을 처리할 뷰를 찾는다.  <br/></li><li><code>process_view</code>:<br>  -뷰를 확인한 후, 뷰(<code>views.py</code>)에 접근하기 전에 호출 되는 메서드(csrf확인 등)<br>  -<code>None</code>(뷰 호출) 또는 <code>HttpResponse</code>(그대로 응답) 반환  <br/></li><li><code>process_exception</code><br>  -<code>process_view</code>에서 예외를 발생시키면 호출되는 메서드  <br/></li><li><code>process_tempate_response</code><ul><li>응답 객체에 render 메서드가 있는 경우에 호출되는 메서드<br/></li></ul></li><li><code>process_response</code><ul><li>뷰에서 반환된 객체를 응답하기 전에 호출되는 메서드</li></ul></li></ul><h3 id="3-View"><a href="#3-View" class="headerlink" title="3. View"></a>3. View</h3><p>요청을 처리하고 응답 객체<code>HttpRequest</code>를 반환하는 것은 뷰이다. 뷰에서 DB를 읽거나 하여 요청에 필요한 처리를 한다. 템플릿을 반환하는 경우 아래처럼 <code>render()</code>를 포함하여 응답한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">return</span> HttpResponse(template.render(context, request))</span><br></pre></td></tr></table></figure><h3 id="4-Template"><a href="#4-Template" class="headerlink" title="4. Template"></a>4. Template</h3><p>템플릿은 html을 반환한다. 템플릿 경로는 <code>settings.py</code>에서 아래와 같이 지정할 수 있다. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#공식 문서 참고</span></span><br><span class="line"><span class="comment">#https://docs.djangoproject.com/ko/3.1/topics/templates/</span></span><br><span class="line"></span><br><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'BACKEND'</span>: <span class="string">'django.template.backends.django.DjangoTemplates'</span>,</span><br><span class="line">        <span class="string">'DIRS'</span>: [],</span><br><span class="line">        <span class="string">'APP_DIRS'</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">'OPTIONS'</span>: &#123;</span><br><span class="line">            <span class="comment"># ... some options here ...</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li><code>BACKEND</code><br>  -템플릿 엔진 API 지정.<ul><li>기본 옵션으로는 <code>django.template.backends.django.DjangoTemplates</code>와 <code>django.template.backends.jinja2.Jinja2</code> 가 있음</li></ul></li><li><code>DIRS</code> : template 디렉토리 위치</li><li><code>APP_DIRS</code> : 엔진이 설치된 애플리케이션 내에서 템플릿 소스 파일을 찾을지에 대한 여부</li></ul><p>마지막으로 미들웨어의 <code>process_response</code>까지 호출하고 나면 응답을 반환한다.</p><h3 id="끝"><a href="#끝" class="headerlink" title="끝!"></a>끝!</h3><p>요청부터 응답까지 프로세스를 간략하게 살펴 보았는데, 상세 내용은 시리즈로 계속 추가할 예정이다. 끝!</p><p>참고 : <a href="https://medium.com/@adamking0126/django-middlewares-and-the-request-response-cycle-fcbf8efb903f">https://medium.com/@adamking0126/django-middlewares-and-the-request-response-cycle-fcbf8efb903f</a></p>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
          <category> Deep Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> python </tag>
            
            <tag> view </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IPC - 프로세스간 통신</title>
      <link href="2020/08/23/study3/"/>
      <url>2020/08/23/study3/</url>
      
        <content type="html"><![CDATA[<br/>프로세스는 독립적으로 실행한다. 다른 프로세스의 데이터에 접근하려 해도 memory protection에서 접근하지 못하게 한다. 이처럼 독립적인 프로세스가 서로 통신하기 위한 방법이 무엇인지 살펴보자.<a id="more"></a> <hr><h3 id="통신-방식"><a href="#통신-방식" class="headerlink" title="통신 방식"></a>통신 방식</h3><p>프로세스가 서로 통신하는 방식은 크게 2가지이다.</p><ol><li>Shared Memory </li><li>Message Passing</li></ol><h3 id="Shared-Memory"><a href="#Shared-Memory" class="headerlink" title="Shared Memory"></a>Shared Memory</h3><p>두 개 이상의 프로세스 들이 주소 공간의 일부를 공유하여 읽기 쓰기를 수행한다. 공유 메모리가 설정되면 커널의 관여없이 직접 읽고 쓸 수 있기 때문에 속도가 빠르다. 다른 프로세스의 변경 사항을 알기 위해 동기화가 필요하며, 한 번에 한 프로세스가 접근하는 접근 제어가 필요하다. 접근 제어 방식으로는 semaphore 등이 있다.</p><h3 id="Message-Passing"><a href="#Message-Passing" class="headerlink" title="Message Passing"></a>Message Passing</h3><p>한 프로세스에서 협력하는 다른 프로세스로 커널을 통해 메시지를 주고(send) 받는(receive) 방식이다. Message Passing 방식으로는 <code>PIPE, Message Queue, Socket, Signal</code> 등이 있다.</p><ul><li>파이프(PIPE)</li></ul><p>파이프는 통신을 위한 메모리 공간(버퍼)를 생성하고 버퍼를 통해 데이터를 전달하는데, 한 방향으로만 전달 가능하다. 다시 말해, 한 쪽 프로세스(A)는 보내기만 다른 한 쪽(B)은 받기만 가능한 것이다. 데이터를 서로 주고 받기 위해서는 A → B방향 파이프, B → A 방향 파이프 2개 연결해야 한다. 또한 여러 개 프로세스가 접근하지 못한다. 그렇기 때문에 프로세스가 많을수록 파이프 수도 증가하며 메모리 공간을 많이 차지하게 된다.</p><p>파이프는 Anonymous PIPE와 Named PIPE로 나뉜다.</p><ol><li>Anonymous PIPE</li></ol><p>관련없는 외부 프로세스에서는 사용하지 못하는, 부모 프로세스와 자식 프로세스 간에 사용하는 PIPE</p><ol start="2"><li>Named PIPE</li></ol><p>외부 프로세스에 간 통신에서 사용하는 PIPE</p><ul><li>메세지 큐(Message Queue)</li></ul><p>고정된 크기의 메시지를 연결 리스트를 이용하여 통신하는 방법이다. Message Queue에는 여러 프로세스가 접근 가능하며 동기화가 필요하다. </p><ul><li>소켓(Socket)</li></ul><p>상대 프로세스의 소켓으로 통신하며, 포트 번호를 통해 소켓을 찾아간다. 다른 IPC는 로컬에서만 사용 가능한 반면, 소켓은 로컬과 리모트 서버 모두 통신 가능하다.</p><ul><li>시그널(Signal)</li></ul><p>특정 이벤트가 발생했을 때 프로세스에게 시그널을 전달할 수 있다. 예를 들어, 자식 프로세스가 종료되었거나 오류가 발생했을 때, 인터럽트가 발생했을 때 그 정보를 알리는 시그널을 전달한다. 시그널은 여러 종류가 있으며 시그널 별로 번호가 붙어있다. 시그널 핸들러를 통해 특정 시그널에 대한 함수를 실행할 수 있다.</p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
          <category> 운영체제 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> roadmap </tag>
            
            <tag> ipc </tag>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>메모리 관리</title>
      <link href="2020/08/17/study4/"/>
      <url>2020/08/17/study4/</url>
      
        <content type="html"><![CDATA[<br/><p>메모리 관리에 대해 알아보자.</p><a id="more"></a> <hr><h3 id="메모리-관리"><a href="#메모리-관리" class="headerlink" title="메모리 관리?"></a>메모리 관리?</h3><p>프로세스를 실행할 때는 프로그램이 메모리에 적재 되어야 한다. 운영체제는 프로세스를 다중으로 운영하므로 메모리를 어떻게 사용하고, 배치할지, 메모리가 부족할 때는 어떻게 해야 하는지 등의 관리가 필요해진다.</p><h3 id="주소-지정-시점"><a href="#주소-지정-시점" class="headerlink" title="주소 지정 시점"></a>주소 지정 시점</h3><p>메모리 주소는 논리적 주소와 물리적 주소로 나뉜다. 논리적 주소는 프로세스 실행 시 생성되는 독자적인 가상의 주소 공간이며 물리적 주소는 실제 메모리 상의 위치를 의미한다. CPU가 논리적 주소를 통해 물리적 주소로 접근할 수 있어야 하는데, 논리적 주소를 물리적 주소로 매핑하는 것을 바인딩이라고 한다.</p><p>주소가 지정 되는 시점, 바인딩 되는 시점은 3가지로 나뉜다. </p><ul><li><p>컴파일 시점 바인딩</p><p>  프로그램이 메모리의 어느 위치에 적재될 지 컴파일 시점에 알 수 있다면 메모리 물리 주소를 지정할 수 있다.</p></li><li><p>로드 시점 바인딩</p><p>  프로그램의 실행이 시작될 때 물리 주소가 결정되는 방식으로 프로그램이 종료될 때까지 물리적 메모리 상의 위치가 고정된다.</p></li><li><p>실행 시점 바인딩</p><p>  프로그램 실행 중에 메모리 주소가 변경되는 방식이다. 하드웨어가 주소를 변경 해주는 하드웨어의 지원이 필요하다. ⇒ MMU</p></li></ul><p>** <strong>MMU</strong></p><p>논리 주소를 물리 주소로 변환하는 하드웨어이다. CPU에서 특정 논리 주소 위치에 저장된 데이터를 요청할 때 MMU가 자동으로 물리적 주소로 변환하여 해당 위치에 접근하는 것을 지원한다. 프로그램의 주소 공간이 메모리의 연속적인 공간에 적재되어 있다고 가정한다. </p><h3 id="메모리-할당법"><a href="#메모리-할당법" class="headerlink" title="메모리 할당법"></a>메모리 할당법</h3><ol><li>연속 할당</li></ol><p>메모리를 다수의 메모리로 분할하고 각 프로세스는 메모리의 연속적인 공간에 적재된다. 메모리 분할 방식으로는 고정 분할 방식과 가변 분할 방식이 있다. </p><ul><li>고정 분할 방식<ul><li>고정된 크기의 분할로 미리 나눔</li></ul></li><li>가변 분할 방식<ul><li>최초 적합 : 첫번째로 찾은 공간에 할당하는 방법, 시간 최적화</li><li>최적 적합 : 모든 공간 중에 수용 가능한 가장 작은 곳을 선택, 공간을 최적화</li><li>최악 적합 : 모든 공간 중에 수용 가능한 가장 큰 곳을 선택, 공간 낭비 발생</li></ul></li></ul><p>프로세스 실행 시, 프로세스에 필요한 메모리보다 같거나 큰 메모리 공간을 찾아 프로세스가 사용할 수 있도록 배정한다. </p><p>연속 할당에는 단편화라는 문제가 발생하는데, 단편화란 프로세스의 반복적인 실행과 종료로 인해 복수의 사용하지 않는 메모리 공간, 즉 구멍이 메모리 상에 발생하는 것을 의미한다. 여유 메모리 공간이 하나의 할당 요청을 만족시키기에는 충분하지만 구멍이 연속적이지 않아 할당할 수 없는 문제를 외부 단편화라고 한다. 그리고 할당된 메모리가 요청한 메모리 크기보다 커 남는 공간을 내부 단편화라고 한다. 이 문제를 해결하기 위해 남은 구멍들을 합치는 압축 기능을 사용하여 연속적인 메모리 공간을 만들고 프로세스에 할당한다.</p><ol start="2"><li>불연속 할당</li></ol><p>연속적인 메모리 공간이 아닌 불연속적인 메모리 공간을 사용함으로써 압축에 드는 시간을 없앤다. 불연속 할당 기법으로는 페이징 기법과 세그먼트 기법이 있다.</p><ul><li><p>페이징 기법</p><p>  프로세스의 주소 공간을 동일한 크기의 페이지 단위로 나누어 불연속적인 메모리 공간에 할당하는 방식이다. 물리적 메모리를 프로세스의 페이지 크기와 동일한 크기로 나누고 메모리에 페이지를 할당한다. 프로세스의 몇번째 페이지가 물리적 메모리에 몇번째 위치에 들어있다는 정보가 필요한데, 이 정보를 <code>페이지 테이블</code>이 갖고 있다. 페이지 테이블을 사용하여 논리주소를 물리주소로 매핑한다.</p><p>   각 프로세스의 메모리 영역 전체를 물리적 공간에 적재할 필요없으며 일부는 backing store에 일시적으로 보관하는 것이 가능하다. </p><p>  페이지 크기에 맞춰 메모리를 나누기 때문에 외부 단편화 문제가 발생하지 않지만 내부 단편화는 발생한다.</p></li><li><p>세그먼트 기법</p><p>  페이징 기법에서는 가상 메모리를 같은 크기의 페이지로 분리했다면, 세그먼트 기법은 서로 다른 크기의 논리적 단위인 세그먼트로 분할하고 메모리를  할당하며 주소를 반환한다. 세그먼트들은 크기가 각각 다르며 연속적인 메모리 공간에 저장되어 있다. 세그먼트 가상의 주소는 세그먼트 번호와 블록 내 세그먼트의 길이를 나타낸다. 페이징 기법에는 페이징 테이블이 있는 것처럼 세그먼트 기법에는 세그먼트 테이블이 있어 실제 주소를 매핑하는 저장 정보를 포함하고 있다. 세그먼트 테이블에는 항목별로 Base(세그먼트 시작 주소)와 Limit(세그먼트 길이)의 정보를 가지고 있다.</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
          <category> 운영체제 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> project </tag>
            
            <tag> roadmap </tag>
            
            <tag> backend </tag>
            
            <tag> memory </tag>
            
            <tag> sutdy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytest 사용기 - fixture, scope</title>
      <link href="2020/08/09/project-3/"/>
      <url>2020/08/09/project-3/</url>
      
        <content type="html"><![CDATA[<br/>파이썬에서 제공하는 테스팅 모듈로는 unittest, pytest가 유명한데, 둘 중 어느걸 사용해 볼까 하다가 pytest가 간단해 보여서 pytest로 작업을 진행했습니다. 빠른 진행을 위해서는 테스팅 모듈이 간편한게 좋을 것 같다는 생각이 들었기 때문입니다. pytest 어떻게 사용했는지 살펴보겠습니다.<a id="more"></a> <h3 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h3><p>pytest는 <code>pip</code> 로 설치하며 기초 설명은 <a href="https://docs.pytest.org/en/latest/index.html">공식 홈페이지</a>에서 확인 가능합니다.</p><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pytest</span><br></pre></td></tr></table></figure><h3 id="프로젝트-구조"><a href="#프로젝트-구조" class="headerlink" title="프로젝트 구조"></a>프로젝트 구조</h3><hr><p>테스트 코드를 작성한 <a href="https://github.com/Jyejin/logparser">프로젝트</a>의 구조는 다음과 같습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── logparser</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── models.py</span><br><span class="line">│   └── parser.py</span><br><span class="line">├── logs</span><br><span class="line">│   ├── elb1.log.gz</span><br><span class="line">│   ├── elb2.log.gz</span><br><span class="line">├── pytest.ini</span><br><span class="line">└── test</span><br><span class="line">    ├── __init__.py</span><br><span class="line">    ├── conftest.py</span><br><span class="line">    ├── logs&#x2F;</span><br><span class="line">    └── test_parser.py</span><br></pre></td></tr></table></figure><p>pytest를 위해 작성한 파일은 <code>pytest.ini</code>와 test폴더 하위의 파일들입니다. 먼저, <code>pytest.ini</code>에는 테스트에 사용할 파일과 테스트 옵션을 추가합니다. 일반적으로 test_*.py 또는 *_test.py를 테스트 파일로 인식하지만 직접 지정해줄 수도 있습니다. 파일이 여러 개인 경우 스페이스로 구분합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[pytest]</span><br><span class="line">python_files &#x3D; test_parser.py test_*.py</span><br></pre></td></tr></table></figure><p>테스트는 <code>pytest</code> 명령어를 사용해 실행합니다. 실행하는 경로에 상관없이 pytest용 파일을 찾아 실행합니다. <code>q</code>옵션을 사용하면 로그를 간략하게 볼 수 있습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(venv) yejinui-MacBook-Pro:logparser yejin$ pytest -q</span><br><span class="line">.....                                                                                                                                                                     [100%]</span><br><span class="line">5 passed in 31.78s</span><br></pre></td></tr></table></figure><h3 id="테스트-코드-작성"><a href="#테스트-코드-작성" class="headerlink" title="테스트 코드 작성"></a>테스트 코드 작성</h3><p>테스트 함수에는 아래와 같이 함수명에 접두사로 <code>test_</code> 를 붙여야 합니다. 접두사가 없으면 그 함수는 실행하지 않고 넘어갑니다. count 함수와 sequence 함수를 테스트 하기 위해 각각 <code>test_count</code>, <code>test_sequnce</code>함수를 만들었습니다. <code>test_count</code>는 로그 수가 맞는지를 확인하고 <code>test_sequence</code>는 ‘type’ 별 집계가 일치하는지 확인합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#test_parser.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_count</span><span class="params">()</span>:</span></span><br><span class="line">    logs = log_parser(get_test_log)</span><br><span class="line">    <span class="keyword">assert</span> count(logs) == <span class="number">87060</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_sequence</span><span class="params">()</span>:</span></span><br><span class="line">    logs = log_parser(get_test_log)</span><br><span class="line">    <span class="keyword">assert</span> sequence(logs, <span class="string">'type'</span>, reverse=<span class="literal">True</span>) == [</span><br><span class="line">        (<span class="string">'http'</span>, <span class="number">82719</span>),</span><br><span class="line">        (<span class="string">'h2'</span>, <span class="number">3398</span>),</span><br><span class="line">        (<span class="string">'https'</span>, <span class="number">943</span>)</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><p>두 함수에서는 공통적으로 log_parser()함수를 사용해 로그를 읽어옵니다. 예시 이외에도 로그를 읽어 오는 테스트가 더 있어 클래스를 정의하는 방식으로 변경하였습니다. self.logs를 사용하는 방식으로 코드를 수정했습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestParserClass</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, get_test_log)</span>:</span></span><br><span class="line">        self.logs = list(log_parser(get_test_log))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_count</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">assert</span> count(self.logs) == <span class="number">87060</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_sequence</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">assert</span> sequence(self.logs, <span class="string">'type'</span>, reverse=<span class="literal">True</span>) == [</span><br><span class="line">            (<span class="string">'http'</span>, <span class="number">82719</span>),</span><br><span class="line">            (<span class="string">'h2'</span>, <span class="number">3398</span>),</span><br><span class="line">            (<span class="string">'https'</span>, <span class="number">943</span>)</span><br><span class="line">        ]</span><br></pre></td></tr></table></figure><p>그런데 에러가 발생했습니다. 클래스에 <code>__init__</code>를 정의한 것이 문제가 되었습니다. <a href="https://docs.pytest.org/en/stable/warnings.html#internal-pytest-warnings">공식 홈페이지</a>를 확인해보니 <code>__init__</code>를 정의하는 경우 클래스가 인스턴스화 되지 않는다고 하네요.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(venv) yejinui-MacBook-Pro:logparser yejin$ pytest -q</span><br><span class="line">=============================================================================== warnings summary ================================================================================</span><br><span class="line">test/test_parser.py:<span class="number">9</span></span><br><span class="line">  /Users/yejin/Sites/project/logparser/test/test_parser.py:<span class="number">9</span>: PytestCollectionWarning: cannot collect test <span class="class"><span class="keyword">class</span> '<span class="title">TestParserClass</span>' <span class="title">because</span> <span class="title">it</span> <span class="title">has</span> <span class="title">a</span> <span class="title">__init__</span> <span class="title">constructor</span> <span class="params">(from: test/test_parser.py)</span></span></span><br><span class="line"><span class="class">    <span class="title">class</span> <span class="title">TestParserClass</span>:</span></span><br><span class="line"></span><br><span class="line">-- Docs: https://docs.pytest.org/en/stable/warnings.html</span><br><span class="line"><span class="number">1</span> passed, <span class="number">1</span> warning <span class="keyword">in</span> <span class="number">0.03</span>s</span><br></pre></td></tr></table></figure><p>그래서 <code>fixture</code>를 사용했습니다. fixture란, 테스트 시 사용하는 함수들을 미리 정의하는 기능입니다.</p><p><code>fixture</code>함수는 test/conftest.py에 작성합니다. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#test/conftest.py</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture(scope="module")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_log_parse</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> list(log_parser(get_log(<span class="string">'./logs/'</span>)))</span><br></pre></td></tr></table></figure><p>test_ 함수에서 사용할 때에는 따로 conftest를 임포트할 필요없이 매개변수로 지정하기만 하면됩니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#test_parser.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_count</span><span class="params">(test_log_parse)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> count(test_log_parse) == <span class="number">87060</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_sequence</span><span class="params">(test_log_parse)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> sequence(test_log_parse, <span class="string">'type'</span>, reverse=<span class="literal">True</span>) == [</span><br><span class="line">        (<span class="string">'http'</span>, <span class="number">82719</span>),</span><br><span class="line">        (<span class="string">'h2'</span>, <span class="number">3398</span>),</span><br><span class="line">        (<span class="string">'https'</span>, <span class="number">943</span>)</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><p>굳이 fixture를 사용하지 않고 test_log_parse 함수를 만들어도 되는게 아닌가 생각할 수도 있습니다. 그렇게도 가능합니다. 그러나 깨끗한 테스트 코드를 위해 변하지 않는 기능은 한 곳에 넣어두고 자주 변경되며 확장할 기능을 만들도록 하는 것이 관리에 좋아 보입니다. 클래스 상속 개념처럼요🙂 그리고 무엇보다도 fixture를 사용하면 fixture가 제공하는 부가 옵션들을 사용할 수 있습니다. 여기서는  <code>scope</code>를 사용했습니다.</p><p>scope를 사용해 fixture를 모듈, 클래스, 세션 단위로 공유합니다. 다시 말해, test_ 함수를 실행할 때마다 fixture함수를 재호출하지 않고 사용할 수 있다는 것입니다. scope를 module 단위로 지정했더니, test_log_parse 한 번 호출 후 계속 재사용하기 때문에 아래와 같이 실행 시간이 단축됩니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;scope 사용</span><br><span class="line">(venv) yejinui-MacBook-Pro:logparser yejin$ pytest -q</span><br><span class="line">.....                                                                                                                                                                     [100%]</span><br><span class="line">5 passed in 34.24s</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;scope 미사용</span><br><span class="line">(venv) yejinui-MacBook-Pro:logparser yejin$ pytest -q</span><br><span class="line">.....                                                                                                                                                                     [100%]</span><br><span class="line">5 passed in 131.13s (0:02:11)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> study </tag>
            
            <tag> project </tag>
            
            <tag> pytest </tag>
            
            <tag> logparser </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&lt;클린 코드&gt; 좋았던 내용 기록하기(7-12장)</title>
      <link href="2020/07/04/study2-2/"/>
      <url>2020/07/04/study2-2/</url>
      
        <content type="html"><![CDATA[<br/><p><strong>&lt; Clean Code &gt; 도서의 내용을 공부하며 요약 정리하였습니다.</strong></p><a id="more"></a> <hr><h3 id="7장"><a href="#7장" class="headerlink" title="7장"></a>7장</h3><p>오류 처리를 프로그램 논리와 분리하자. 프로그램 논리와 분리하면 독립적인 추론이 가능해지며 코드 유지보수성이 높아진다.</p><h3 id="오류-코드보다-예외를-사용해라"><a href="#오류-코드보다-예외를-사용해라" class="headerlink" title="오류 코드보다 예외를 사용해라"></a>오류 코드보다 예외를 사용해라</h3><p>If 처리보다 오류가 발생하면 예외를 던지는 편이 코드도 간결하고 읽기쉽다.</p><h3 id="감싸기-기법"><a href="#감싸기-기법" class="headerlink" title="감싸기 기법"></a>감싸기 기법</h3><p>외부 api를 사용할 때는 감싸기 기법이 최선이다.</p><p>LocalPort클래스에서 ACMEPort 클래스를 감싸고 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalPort</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> ACMEPort innerPort;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LocalPort</span><span class="params">(<span class="keyword">int</span> portNumber)</span></span>&#123;</span><br><span class="line">innerPort = <span class="keyword">new</span> ACMEPort(portnumber);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">innerPort.open();</span><br><span class="line">&#125;<span class="keyword">catch</span>(DeviceResponseException e)&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> PortDeviceFailure(e);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>외부 api를 감싸면 외부 라이브러리와 프로그램 사이에서 의존성이 크게 줄어든다. 나중에 다른 라이브러리로 갈아타도 비용이 적다. 또한 감싸기 클래스에서 외부 api를 호출하는 대신 테스트 코드를 넣어주는 방법으로 프로그램을 테스트하기 쉬어진다.</p><h3 id="9장-단위-테스트"><a href="#9장-단위-테스트" class="headerlink" title="9장 단위 테스트"></a>9장 단위 테스트</h3><h3 id="TDD법칙-3가지"><a href="#TDD법칙-3가지" class="headerlink" title="TDD법칙 3가지"></a>TDD법칙 3가지</h3><ol><li>실패하는 단위테스트를 작성할 때까지 실제 코드를 작성하지 않는다.</li><li>컴파일은 실패하지 않으면서 실행이 실패하는 정도로만 단위 테스트를 작성한다.</li><li>현재 실패하는 테스트를 통과할 정도로만 실제 코드를 작성한다.</li></ol><h3 id="깨끗한-테스트코드-유지하기"><a href="#깨끗한-테스트코드-유지하기" class="headerlink" title="깨끗한 테스트코드 유지하기"></a>깨끗한 테스트코드 유지하기</h3><p>테스트 코드는 실제코드 못지 않게 중요하다. 실제 코드 못지않게 깨끗하게 짜야한다.</p><p>코드에 유연성, 유지보수성, 재사용성을 제공하는 버팀목이 바로 단위테스트이다. 왜냐하면 테스트 케이스가 있으면 변경에 부담이 없기 때문이다.</p><h3 id="깨끗한-테스트-코드"><a href="#깨끗한-테스트-코드" class="headerlink" title="깨끗한 테스트 코드"></a>깨끗한 테스트 코드</h3><p>깨끗한 테스트 코드를 만들때에는 가독성이 제일 중요하다.</p><p>중복되는 코드를 삭제하고 의도를 흐리지 않아야 한다.</p><p>테스트는 BUILD-OPERATE-CHECK 패턴으로 나눠진다. 첫 부분은 테스트 자료를 만든다. 두 번째는 테스트 자료를 조작하며, 세번 째 부분은 조작한 결과가 올바른지 확인한다.</p><h3 id="이중-표준"><a href="#이중-표준" class="headerlink" title="이중 표준"></a>이중 표준</h3><p>테스트 코드는 단순하고 간결하고 표현력이 풍부해야 하지만 실제 코드만큼 효율적일 필요는 없다.</p><h3 id="테스트-당-assert-하나"><a href="#테스트-당-assert-하나" class="headerlink" title="테스트 당 assert 하나"></a>테스트 당 assert 하나</h3><p>한 함수에서 assert문을 적용하려 하다보면, 중복되는 코드가 많아진다. 이때는 <code>TEMPLATE METHOD</code> 패턴을 사용하면 중복을 제거할 수 있다. </p><p> ** template method : 변하지 않는 기능은 슈퍼 클래스에 넣어두고 자주 변경되며 확장할 기능은 서브 클래스에 만들도록 한다.</p><p>테스트 당 assert 함수 한개가 어렵다면, 테스트 함수마다 한 개념만 테스트하라는 규칙을 지키는 방법도 있겠다.</p><p>FIRST</p><p>빠르게, 독립적으로, 반복가능하게, 자가검증하는(return bool), 적시에(실제 코드 이전에 작성)</p><h3 id="10장-클래스"><a href="#10장-클래스" class="headerlink" title="10장 클래스"></a>10장 클래스</h3><h3 id="클래스-체계"><a href="#클래스-체계" class="headerlink" title="클래스 체계"></a>클래스 체계</h3><p>Static public 상수,</p><p>Private 변수,</p><p>비공개 인스턴스 변수,</p><p>공개 함수,</p><p>바로 위 공개 함수가 호출하는 비공개 함수</p><h3 id="클래스는-작아야-한다"><a href="#클래스는-작아야-한다" class="headerlink" title="클래스는 작아야 한다!"></a>클래스는 작아야 한다!</h3><h3 id="단일-책임-원칙-srp"><a href="#단일-책임-원칙-srp" class="headerlink" title="단일 책임 원칙(srp)"></a>단일 책임 원칙(srp)</h3><p>단일 책임 원칙은 클래스나 모듈을 변경할 이유가 하나뿐이어야 한다는 원칙이다.</p><p>큰 클래스 몇개가 아니라 작은 클래스 여럿으로 이뤄진 시스템이 더 바람직하다. 작은 클래스는 각자 맡은 책임이 하나이며 다른 작은 클래스와 협력해 싯스템에 필요한 동작을 수행한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuperDashboard</span> <span class="keyword">extends</span> <span class="title">JFrame</span> <span class="title">impletements</span> <span class="title">MetaDataUser</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Component <span class="title">getLastFocusedComponent</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastFocused</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMajorVersionNumber</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMinorVersionNumber</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getBuildNumber</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="응집도"><a href="#응집도" class="headerlink" title="응집도"></a>응집도</h3><p>클래스는 인스턴스 변수 수가 작아야 한다. 각 클래스 메서드는 클래스 인스턴스 변수를 하나 이상 사용해야 한다. 메서드가 변수를 더 많이 사용할수록 메서드와 클래스는 응집도가 높다.</p><p>응집도가 높다는 말은 메서드와 변수가 서로 의존하며 논리적인 단위로 묶여있음을 의미한다.</p><h3 id="클래스가-응집력을-잃는다면-쪼개라"><a href="#클래스가-응집력을-잃는다면-쪼개라" class="headerlink" title="클래스가 응집력을 잃는다면 쪼개라!"></a>클래스가 응집력을 잃는다면 쪼개라!</h3><p>메서드가 많아지고 인스턴스 변수가 많아지면, 응집도를 고려하여 변수와 메서드를 적절히 분리해 새로운 두세개 클래스로 쪼개야한다. 다시 말해, 응집도를 유지하면 작은 클래스 여럿이 나오게 된다.</p><h3 id="변경하기-쉬운-클래스"><a href="#변경하기-쉬운-클래스" class="headerlink" title="변경하기 쉬운 클래스"></a>변경하기 쉬운 클래스</h3><p>깨끗한 시스템은 클래스를 체계적으로 정리해 변경에 수반하는 위험을 낮춘다.</p><h3 id="변경으로부터-격리"><a href="#변경으로부터-격리" class="headerlink" title="변경으로부터 격리"></a>변경으로부터 격리</h3><p>외부 api를 사용해 코드를 작성하는데, 5분마다 api 값이 달라진다면 테스트 코드를 짜기란 쉽지 않다. 이럴 때에는, 함수 내에서 api를 직접 호출하는 대신 클래스로 따로 뺀 후 mocking을 사용해 테스트한다. 이처럼 결합도를 낮추면 유연성과 재사용성도 더욱 높아지며 DIP를 따르는 클래스가 나온다.</p><h3 id="12장-창발성"><a href="#12장-창발성" class="headerlink" title="12장 창발성"></a>12장 창발성</h3><p>단순한 설계 규칙은 설계 품질을 높여주며, 다음 규칙을 따르면 설계가 단순하다고 말한다.</p><ul><li>모든 테스트를 실행한다.</li><li>중복을 없앤다.</li><li>프로그래머 의도를 표현한다.</li><li>클래스 수와 메서드 수를 최소로 줄인다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
          <category> ETC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> study </tag>
            
            <tag> book </tag>
            
            <tag> programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&lt;클린 코드&gt; 좋았던 내용 기록하기(1-3장)</title>
      <link href="2020/06/14/study2-1/"/>
      <url>2020/06/14/study2-1/</url>
      
        <content type="html"><![CDATA[<br/><p><strong>&lt; Clean Code &gt; 도서의 내용을 공부하며 요약 정리하였습니다.</strong></p><a id="more"></a> <hr><h2 id="1장-깨끗한-코드"><a href="#1장-깨끗한-코드" class="headerlink" title="1장. 깨끗한 코드"></a>1장. 깨끗한 코드</h2><p>시간에 쫓겨서 급하게 나쁜 코드를 짠 적이 있을 것이다. 나중에 다시 짜야지라는 생각으로 급하게 코드를 짜고는 하지만 나중은 오지 않는다.</p><p>깨끗한 코드를 짜기 위해서는 코드 감각이 필요하다. 깨끗한 코드란 그 정의도 다양하지만 대충의 의견은 다음과 같다.</p><ol><li>논리가 간단해서 버그가 숨어들지 한다. 한 가지를 제대로 한다.</li><li>잘 쓴 문장처럼 읽힌다. </li><li>작성자가 아닌 사람도 읽기 쉽고 고치기 쉽다.</li><li>테스트 코드가 없는 코드는 깨끗한 코드가 아니다.</li><li>중복을 피해야 한다.</li></ol><p>정리 : 중복을 피하라. 한 기능만 수행해라. 제대로 표현하라. 작게 추상화하라</p><h2 id="2장-의미있는-이름"><a href="#2장-의미있는-이름" class="headerlink" title="2장. 의미있는 이름"></a>2장. 의미있는 이름</h2><h3 id="의도를-분명하게-밝혀라"><a href="#의도를-분명하게-밝혀라" class="headerlink" title="의도를 분명하게 밝혀라"></a>의도를 분명하게 밝혀라</h3><ul><li>Int d; ⇒ int daysSincedCreation;</li><li>List ⇒ group, bunch</li></ul><h3 id="의미-있게-구분하라"><a href="#의미-있게-구분하라" class="headerlink" title="의미 있게 구분하라"></a>의미 있게 구분하라</h3><ul><li>차이를 알도록 이름을 지어야 한다.<ul><li>나쁜 예시 : GetActiveAccount(), GetActiveAccounts(), GetActiveAccountInfo()</li><li>나쁜 예시2 : CustomerInfo/customer, accountdata/account</li></ul></li><li>문자 하나만 사용하는 변수 이름은 문제가 있다.<ul><li>루프에서 반복 횟수를 세는 i,j,k는 괜찮다(l은 절대 안됨). 단, 루프 범위가 아주 작고 다른 이름과 충돌하지 않을 때만 괜찮다.</li></ul></li></ul><h3 id="해법-영역에서-가져온-이름을-사용하라"><a href="#해법-영역에서-가져온-이름을-사용하라" class="headerlink" title="해법 영역에서 가져온 이름을 사용하라"></a>해법 영역에서 가져온 이름을 사용하라</h3><p> 코드를 읽는 사람도 프로그래머이다. 그러므로 전산용어, 알고리즘 이름 등을 사용해도 괜찮다. 모든 명칭을 문제 영역에서 가져올 것이 아니라, 기술 개념에는 기술 이름을 가져오는 것이 가장 적합한 선택이다.  적합한 프로그래머 용어가 없을 때, 문제 영역에서 이름을 가져온다.</p><p>** 문제 영역이란, 코드를 짜려는 프로젝트에 쓰이는 명칭 들을 말하는 것으로 보임. 예를 들면, 금리 관련 프로젝트에서는 정액제, 만기 등을 사용하는 것.</p><h3 id="의미있는-맥락을-추가하라"><a href="#의미있는-맥락을-추가하라" class="headerlink" title="의미있는 맥락을 추가하라"></a>의미있는 맥락을 추가하라</h3><p>예를 들어, firstName, city, street, houseNumber, state, zipcode라는 변수가 있다. 변수를 전체적으로 보면 주소라는 사실을 알 수 있지만 state변수 하나만으로는 쉽게 알아채기 어렵다. 이럴 때는 addr이라는 접두어를 추가해 addrFirstName, addrLastName, addrState라 쓰면 맥락이 좀 더 분명해진다.</p><h2 id="3장-함수"><a href="#3장-함수" class="headerlink" title="3장. 함수"></a>3장. 함수</h2><h3 id="작게-만들어라"><a href="#작게-만들어라" class="headerlink" title="작게 만들어라!"></a>작게 만들어라!</h3><p>함수를 만드는 첫째 규칙은 ‘작게!’다. 둘 째 규칙은 ‘더 작게!’이다. 함수는 100줄을 넘어서는 안된다. 20줄도 길다…</p><p>다시 말해, if문/else문/while문 등에 들어가는 블록은 한 줄이어야 한다는 의미이다. 대개 거기서 함수를 호출한다.</p><h3 id="한-가지만-해라"><a href="#한-가지만-해라" class="headerlink" title="한 가지만 해라!"></a>한 가지만 해라!</h3><p>충고 : <strong>함수는 한 가지를 해야 한다. 그 한가지를 잘해야 한다. 그 한가지 만을 해야한다.</strong></p><p>이 충고의 문제는 한 가지가 무엇인지 알기가 어렵다는 점이다. </p><p>3-3을 보자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3-3</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">renderPageWithSetupsAndTeardowns</span><span class="params">(PageData PageData,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">boolean</span> isSuite)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(isTestPage(pageData))</span><br><span class="line">includeSetupAndTeardownPages(pageData, isSuite);</span><br><span class="line"><span class="keyword">return</span> pageData.getHtml()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>목록 3-3은 한가지만 하는가? 세가지를 한다고 주장할 수도 있다.</p><ol><li>페이지가 테스트페이지인지 판단한다.</li><li>그렇다면 설정 페이지와 해제 페이지를 넣는다.</li><li>페이지를 HTML로 렌더링한다.</li></ol><p>위에서 언급하는 세 단계는 지정된 함수 이름 아래에서 추상화 수준이 하나다. 함수는 간단한 <code>TO</code>문단으로 기술할 수 있다.</p><p>** <code>TO</code> : LOGO 언어에서 사용하는 함수 선언 방식으로, 파이썬이나 루비의 <code>def</code>와 같다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TO RenderPageWithSetupAndTeardowns, </span><br><span class="line">페이지가 테스트 페이지인지 확인한 후 테스트 페이지라면 설정 페이지와 해제 페이지를 넣는다.</span><br><span class="line">테스트 페이지든 아니든 페이지를 HTML로 렌더링한다.</span><br></pre></td></tr></table></figure><p>정리하면, 지정된 함수 이름 아래에서 추상화 수준이 하나인 단계만 수행한다면 그 함수는 한가지 작업만 한다고 볼 수 있다. 또 다른 방법은, 단순히 다른 표현이 아니라 의미있는 이름으로 다른 함수를 추출할 수 있다면 그 함수는 여러작업을 하는 셈이다.</p><h3 id="함수-당-추상화-수준은-하나로-⭐"><a href="#함수-당-추상화-수준은-하나로-⭐" class="headerlink" title="함수 당 추상화 수준은 하나로!⭐"></a>함수 당 추상화 수준은 하나로!⭐</h3><p>함수가 확실히 한 가지 작업만 하려면 함수 내 모든 문장의 추상화 수준이 동일해야한다. 함수 호출 <code>getHtml()</code> 은 추상화 수준이 높다. 그리고 모듈을 사용한 변수 선언(?) <code>String pagePathName = PathParser.render(pagepath);</code>는 추상화 수준이 중간이다. 그리고<code>.append(“\n”)</code>와 같은 코드는 추상화 수준이 낮다.</p><p>한 함수내의 추상화 수준을 섞으면. 코드를 읽는 사람이 헷갈린다.</p><h3 id="내려가기-규칙"><a href="#내려가기-규칙" class="headerlink" title="내려가기 규칙"></a>내려가기 규칙</h3><p>코드는 위에서 아래로 이야기처럼 읽혀야 좋다. 한 함수 다음에는 추상화 수준이 한 단계 낮은 함수가 온다. 즉, 위에서 아래로 프로그램을 읽으면서 추상화 수준이 한 단계씩 낮아지는 것이다.</p><h3 id="서술적인-이름을-사용하라"><a href="#서술적인-이름을-사용하라" class="headerlink" title="서술적인 이름을 사용하라!"></a>서술적인 이름을 사용하라!</h3><p>함수 이름은 함수 내용이 짐작 가능할 수 있어야 한다. 함수 이름이 길어도 괜찮다. 길고 서술적인 이름이 짧고 어려운 이름보다 좋다. 길고 서술적인 이름이 길고 서술적인 주석보다 좋다. 이름을 정하느라 시간을 들여도 괜찮다.</p><h3 id="함수-인수"><a href="#함수-인수" class="headerlink" title="함수 인수"></a>함수 인수</h3><p>함수에서 이상적인 인수 개수는 0개이다. 4개이상은 사용하지 않는게 좋다. </p><ol><li>인수가 1개인 경우</li></ol><ul><li>인수에 질문을 던지는 경우<ul><li>Boolean fileExists(“MyFile”)</li></ul></li><li>인수를 뭔가로 변환해 결과를 반환하는 경우<ul><li>InputStream fileOpen(“MyFile”)</li></ul></li><li>이벤트 발생 ⇒ 출력 인수 없이 시스템 상태를 바꾼다.</li></ul><ol start="2"><li>플래그 인수</li></ol><p>플래그 인수는 추하다. 함수로 부울 값을 넘기는 관례는 정말로 끔찍하다. 함수가 한꺼번에 여러 가지를 처리한다고 대놓고 공표하는 셈이니까…!</p><ol start="3"><li>인수가 2개인 함수</li></ol><ul><li>2개가 적절한 경우도 있지만(예, 좌표를 찍는 함수 x축,y축) 단항 함수로 바꾸도록 애써야 한다.</li></ul><ol start="4"><li>인수가 3개인 함수</li></ol><ul><li>이해하기 어렵다. 신중히 고려하라..</li></ul><p>인수 객체가 2-3개 필요하다면 일부를 독자적인 클래스 변수로 선언할 가능성을 짚어보자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Circle <span class="title">makeCircle</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y, <span class="keyword">double</span> radius)</span></span></span><br><span class="line"><span class="function">Circle <span class="title">makeCircle</span><span class="params">(Point center, <span class="keyword">double</span> radius)</span></span></span><br></pre></td></tr></table></figure><h3 id="명령과-조회를-분리해라"><a href="#명령과-조회를-분리해라" class="headerlink" title="명령과 조회를 분리해라!"></a>명령과 조회를 분리해라!</h3><p>함수는 뭔가를 수행하거나 뭔가에 답하거나 둘 중하나만 해야한다. 아래 코드는 명령과 조회를 함께한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(set(<span class="string">"username"</span>, <span class="string">"unclebob"</span>))</span><br></pre></td></tr></table></figure><p>명령과 조회를 분리해 혼란을 없애야 한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(attributeExists(<span class="string">"username"</span>))&#123;</span><br><span class="line">setAttribute(<span class="string">"username"</span>, <span class="string">"unclebob"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="오류-코드보다-예외를-사용하라"><a href="#오류-코드보다-예외를-사용하라" class="headerlink" title="오류 코드보다 예외를 사용하라!"></a>오류 코드보다 예외를 사용하라!</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(deletePage(page) == E_OK)</span><br></pre></td></tr></table></figure><p>위 코드는 여러 단계로 중첩되는 코드를 야기한다. 오류 코드를 반환하면 호출자는 오류 코드를 바로 처리해야 한다. 반면 예외를 사용하면 오류 처리 코드가 원래 코드에서 분리되므로 코드가 깔끔해진다.</p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
          <category> ETC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> study </tag>
            
            <tag> book </tag>
            
            <tag> programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CORS(Cross Origin Resource Sharing)</title>
      <link href="2020/06/06/study1-2/"/>
      <url>2020/06/06/study1-2/</url>
      
        <content type="html"><![CDATA[<br/><p><strong>&lt;리얼월드 HTTP&gt; 도서의 내용을 요약 정리하고 관련 내용을 추가하였습니다.</strong></p><a id="more"></a> <hr><p>CORS란, 오리진(출처, 도메인) 사이에 리소스(자원)를 공유하는 방법을 말한다. 여기서 리소스 공유는 <code>XMLHttpRequest</code>나 <code>Fetch API</code>를 통하여 다른 출처의 자원에 접근하는 것이다. 보안을 위해 모든 서버에서 누구나 접근하는 것을 막고 클라이언트에서 서버로 액세스하기 직전까지의 권한을 확인한다.</p><p>보안 상의 이유로, 브라우저는 스크립트에서 시작한 서로 다른 출처의 HTTP 요청을 제한한다. XMLHttpRequest와 Fetch API를 사용하는 웹 애플리케이션은 자신의 출처와 동일한 리소스만 불러올 수 있으며, 예외적으로 다른 출처의 리소스를 불러오려면 자신의 출처를 증명할 수 있는 올바른 CORS 헤더를 포함해야 한다.</p><p>CORS에는 프리플라이트 요청을 하지않는 <code>simple cross-origin request</code>와 프리플라이트 요청이 필요한 <code>actual request</code>로 나뉜다. 프리플라이트(prefligt) 요청은 실제 통신 전에 권한을 확인하려 보내는 요청이다.</p><h3 id="Simple-Cross-Origin-Request"><a href="#Simple-Cross-Origin-Request" class="headerlink" title="Simple Cross-Origin Request"></a>Simple Cross-Origin Request</h3><p><code>simple cross-origin request</code>가 되는 조건은 다음 3가지이다.</p><ul><li>http 요청 메서드가 단순 메서드(GET, POST, HEAD)</li><li>헤더가 모드 심플 헤더(accept, accept-language, content-language, content-type 이외는 제외)</li><li>Content-type을 포함하는 경우, 그 값이 applicatin/x-www-form-urlencoded, multipart/form-data, text-plain 중 하나</li></ul><h3 id="프리플라이트-요청"><a href="#프리플라이트-요청" class="headerlink" title="프리플라이트 요청"></a>프리플라이트 요청</h3><p><code>simple cross-origin request</code> 조건에 맞지 않는 경우 프리플라이트 요청이 필수이다. 프리플라이트를 할 때 클라이언트는 아래 헤더를 붙여 <code>OPTIONS</code>메서드로 전송한다.</p><ul><li>Access-control-request-method 요청헤더 : 통신을 허용하길 원하는 메서드 지정</li><li>Access-control-reqeust-headers 요청 헤더: 허용하길 원하는 헤더를 쉼표로 구분해 나열</li><li>Origin 요청 헤더 : 통신 출처 웹 페이지의 도메인 이름을 지정</li></ul><p>프리플라이트 요청을 받고 나면, 서버측은 허용하는 통신 내용을 아래 헤더를 사용해 브라우저 측에 전달한다. 허용하지 않는 경우 각각의 헤더가 부여되지 않거나 <code>stauts = 401 forbidden</code>으로 반환되기도 한다.</p><ul><li>Access-control-allow-origin 응답헤더 : 통신을 허용할 오리진 이름. 쿠키를 이용하지 않을 때는 와일드카드(*)로 모든 도메인을 일괄적으로 허용하기도 한다.</li><li>Access-control-allow-method 응답헤더 : 대상 url에 허용되는 메서드 이름.</li><li>Access-control-allow-header 응답헤더 : 대상 url에 허용되는 헤더 이름 목록. 플라이트요청이 필요없는 간단한 헤더는 생략될 수 있다.</li><li>Access-control-allow-credentials 응답헤더: 쿠키 등의 자격 증명을 서버가 받는 것을 허용할 때 부여된다. 값으로는 true만 설정할 수 있다.</li><li>Access-control-expose-header 응답헤더 : 허용이 아니라 서버에서 반환하는 응답 헤더 중 스크립트에서 참조할 수 있는 헤더 이름목록을 반환한다.</li></ul><p>통신 내용을 일정 기간 캐시해서 통신을 생략하는 방법도 사양에 포함되어 있다. 이 지시에는 다음 헤더를 사용한다.</p><ul><li>Access-control-max-age 응답 헤더 : cahce-control을 사용한 캐시와 마찬가지로 캐시 가능한 초 수를 서버에서 클라이언트로 전달한다.</li></ul><p>프리플라이트 요청이 허용되면 실제 요청을 전송한다.</p><p>참고<br><a href="https://developer.mozilla.org/ko/docs/Web/HTTP/CORS">https://developer.mozilla.org/ko/docs/Web/HTTP/CORS</a></p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
          <category> Network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> study </tag>
            
            <tag> project </tag>
            
            <tag> network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XMLHttpRequest 와 Fetch API</title>
      <link href="2020/06/02/book3-3/"/>
      <url>2020/06/02/book3-3/</url>
      
        <content type="html"><![CDATA[<br/><p><strong>&lt;리얼월드 HTTP&gt; 도서의 내용을 요약 정리하고 관련 내용을 추가하였습니다.</strong></p><a id="more"></a> <hr><h2 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h2><p>curl 커맨드의 기능을 자바스크립트로 사용할 수 있게 해주는 기능이 <code>XMLHttpRequest</code>이다. http 통신과 마찬가지로 클라이언트가 서버에 요청을 보내고, 그 응답으로 서버가 클라이언트에 데이터를 보낼 수 있다. <U>단, http처럼 서버 측에서 클라이언트에 요청을 보낼 수는 없다.</U>(?)</p><h3 id="XMLHttpRequest-와-브라우저의-http요청-차이"><a href="#XMLHttpRequest-와-브라우저의-http요청-차이" class="headerlink" title="XMLHttpRequest 와 브라우저의 http요청 차이"></a>XMLHttpRequest 와 브라우저의 http요청 차이</h3><ul><li>송수신할 때 html화면이 새로 고침되지 않는다.</li><li>GET과 POST 이외의 메서드도 전송할 수 있다.</li><li>폼의 경우 키와 값이 일대일이 되는 형식의 데이터만 전송할 수 있고, 응답은 브라우저로 표시되어 버리지만, 플레인텍스트,json,binary data,xml등 다양한 형식을 송수신할 수 있다.</li></ul><p>http의 경우, 파일 다운로드를 제외하면 서버의 응답을 받을 때는 화면이 일단 지워지고 브라우저 내에서 새로운 페이지가 렌더링된다. 하지만 XMLHttpRequest를 사용하면 자바스크립트 내에서 송수신이 완결되므로 화면이 지워지지 않아도 최신 정보를 가져올 수 있다. 이처럼 화면을 지우지않고 웹페이이지를 갱신할 수 있는 아키텍처를 ajax라고 한다.</p><h3 id="XMLHttpRequest의-보안"><a href="#XMLHttpRequest의-보안" class="headerlink" title="XMLHttpRequest의 보안"></a>XMLHttpRequest의 보안</h3><p>XMLHttpRequest의 보안 제어는 액세스할 수 있는 정보 제한과 전송 제한이라는 두가지 제한으로 구성된다.</p><p>액세스할 수 있는 정보의 제한으로는 쿠키가 있다. 스크립트로 document.cookie 속성에 엑세스하면 브라우저에서 여는 페이지에 관한 쿠키를 모두 읽을 수 있다. 이 때, <code>httponly</code> 속성을 쿠키에 부여하면, 스크립트로 액세스할 수 없어지므로 외부로 유출될 위험이 줄어든다.</p><p>전송 제한에는 도메인, 메서드, 헤더 세 종류가 있다. 스크립트로 어느 웹사이트에나 자유롭게 액세스할 수 있게 되면, 악의가 있는 웹사이트로 정보를 전송해 버릴 수 있다. 이를 방지하기 위해 기본적으로 브라우저 액세스하고 있는 호스트에만 접근할 수 있다. 그 밖의 사이트에 액세스하는 방법으로서 xmlhttprequest뿐만 아니라 브라우저에서 널리 이용되는 <a href="https://jyejin.github.io/2020/06/06/study1-2/">CORS</a>라는 액세스 제한 시스템이 있다.</p><h2 id="Fetch-API"><a href="#Fetch-API" class="headerlink" title="Fetch API"></a>Fetch API</h2>]]></content>
      
      
      <categories>
          
          <category> Book </category>
          
          <category> 리얼월드 HTTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> project </tag>
            
            <tag> roadmap </tag>
            
            <tag> book </tag>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>쿠키, 세션, 캐시</title>
      <link href="2020/05/31/book3-2/"/>
      <url>2020/05/31/book3-2/</url>
      
        <content type="html"><![CDATA[<br/><p><strong>&lt;리얼월드 HTTP&gt; 도서의 내용을 요약 정리하고 관련 내용을 추가하였습니다.</strong></p><a id="more"></a> <hr><h1 id="콘텐트-니고시에이션"><a href="#콘텐트-니고시에이션" class="headerlink" title="콘텐트 니고시에이션"></a>콘텐트 니고시에이션</h1><p>서버와 클라이언트는 따로 개발되어 운용되므로 양쪽이 기대하는 형식이나 설정이 항상 일치한다고 할 수는 없다. 통신 방법을 최적화하고자 하나의 요청 안에서 서버와 클라이언트가 서로 최고의 설정을 공유하는 시스템을 콘텐트 니고시에이션이라고 한다.</p><p>니고시에이션에 사용하는 헤더는 다음 4개이다.</p><ul><li>Accept ⇒ MIME 타입</li><li>Accept-language ⇒ 표시 언어</li><li>Accept-charset ⇒ 문자의 문자셋</li><li>Accept-encoding ⇒ 바디 압축</li></ul><img src="/gallery/book3-2-1.png" ><p>Accept에서 q는 품질 계수로 0~1까지의 값이다. 기본은 1.0이며, 우선 순위를 나타낸다. 우선 순위대로 파일 형식을 체크하고 지원하지 않으면 다음 우선 순위로 넘어가는 방식이다.</p><h1 id="쿠키"><a href="#쿠키" class="headerlink" title="쿠키"></a>쿠키</h1><p>쿠키란 웹사이트의 정보를 브라우저 쪽에 저장하는 작은 파일이다. 쿠키도 http 헤더를 기반으로 구현됐다. 서버에서는 다음과 같이 응답 헤더를 보낸다.</p><ul><li>Set-cookie: last_access_date=jul/31/2019</li></ul><p>HTTP는 스테이트리스(언제 누가 요청해도 요청이 같으면 결과가 같음)을 기본으로 개발 됐지만, 쿠키를 이용하면 서버가 상태를 유지하는 스테이트풀처럼 보이게 서비스를 제공할 수 있다.</p><h3 id="쿠키의-잘못된-사용법"><a href="#쿠키의-잘못된-사용법" class="headerlink" title="쿠키의 잘못된 사용법"></a>쿠키의 잘못된 사용법</h3><ol><li>영속성 문제 : 브라우저의 비밀모드, 보안 설정에 따라 세션이 끝나면 초기화 되거나 쿠키를 보관하라는 서버의 지시를 무시하기도 한다. 사라지더라도 문제가 없는 정보나 서버 정보로 복원할 수 있는 자료를 저장하는 용도에 적합하다.</li><li>용량 문제 : 쿠키의 최대 크기는 4kb 제한되어 있다.</li><li>보안 문제 : secure 속성을 부여하면 https프로토콜로 암호화된 통신에서만 쿠키가 전송되지만, http통신에서는 쿠키가 평문으로 전송된다. 매 요청 시 쿠키가 전송되는데 노출될 위험성이 있다. 정보를 넣을 때는 서명이나 암호화 처리가 필요하다.</li></ol><h3 id="쿠키에-제약을-주다"><a href="#쿠키에-제약을-주다" class="headerlink" title="쿠키에 제약을 주다"></a>쿠키에 제약을 주다</h3><p>Http클라이언트는 쿠키를 제어하는 속성을 해석해 쿠키 전송을 제어할 책임이 있다. 속성은 세미클론으로 구분해 얼마든지 나열할 수 있다.</p><img src="/gallery/book3-2-2.png"><ul><li>Expires, max-age속성 : 쿠키의 수명을 설정한다. 각각 특정날짜와 초단위로 제한</li><li>Domain : 클라이언트에서 쿠키를 전송할 대상 서버. 생략하면 쿠키를 발행한 서버가 된다.</li><li>Secure : https로 프로토콜을 사용한 보안 접속일 때만 클라이언트에서 서버로 쿠키를 전송한다. Http접속일 때는 브라우저가 경고를 하고 접속하지 않아 정보 유출을 막는다.</li><li>Httponly : 자바스크립트 엔진으로부터 쿠키를 감출 수 있다.</li><li>Samesite : 크롬 브라우저에서 도입한 속성으로, 같은 오리진의 도메인에 전송하게 된다.</li></ul><h3 id="인증과-세션"><a href="#인증과-세션" class="headerlink" title="인증과 세션"></a>인증과 세션</h3><ul><li>Basic인증과 digest인증</li></ul><p>Basic인증은 유저명과 패스워드를 base64로 인코딩한 것이다. Base64는 복호화가 가능하므로 서버로부터 복원해 원래 유저명과 패스워드를 추출할 수 있다. 추출된 정보는 서버의 db와 비교해서 정상 사용자인지 검증한다. </p><p>Digest 인증은 해시함수를 이용한다. </p><h3 id="쿠키를-사용한-세션-관리"><a href="#쿠키를-사용한-세션-관리" class="headerlink" title="쿠키를 사용한 세션 관리"></a>쿠키를 사용한 세션 관리</h3><p>지금은 basic, digest인증 모두 거의 사용되지 않는다. 최근 많이 사용되는 방식은 폼을 이용한 로그인과 쿠키를 이용한 세션관리 조합이다. 설명하면,</p><ol><li>클라이언트는 폼으로 id,password를 전송한다.</li><li>Digest인증과 달리 직접 송신하므로 ssl/tls 방식이 필수다.</li><li>서버 측에서는 유저id와 패스워드로 인증하고 문제가 없으면 세션 토큰을 발행한다.</li><li>서버는 세션 토큰을 관계형 db나 키-밸류형 db에 저장해둔다. </li><li>토큰은 쿠키로 클라이언트에 되돌아간다. 두번째 이후 접속에서는 쿠키를 재전송해 로그인된 클라이언트임을 서버가 알 수 있다.</li></ol><h1 id="프록시"><a href="#프록시" class="headerlink" title="프록시"></a>프록시</h1><p>프록시는 http등의 통신을 중계한다. 때로는 중계만 하지 않고 각종 부가 기능을 구현한 경우도 있다. 또한 외부공격으로부터 네트워크를 보호하는 방화벽 역할도 한다. 중계되는 프록시는 중간의 호스트ip주소를 특정 헤더에 기록해 간다. </p><ul><li>X-forwarded-for: client, proxy1, proxy2…</li></ul><p>프록시와 비슷한 것으로는 게이트웨이가 있다. 이 둘은 http/1.0에서 다음과 같이 정의되어 있다.</p><ul><li>프록시 : 통신 내용을 이해한다. 필요에 따라서 콘텐츠를 수정하거나 대신 응답한다.</li><li>게이트 웨이: 통신 내용을 그대로 전송한다. 내용의 수정도 불허한다. 클라이언트에서는 중간에 존재하는 것을 알아채서는 안된다.</li></ul><h1 id="캐시"><a href="#캐시" class="headerlink" title="캐시"></a>캐시</h1><p>콘텐츠가 변경되지 않았을 땐 로컬에 저장된 파일을 재사용함으로써 다운로드 횟수를 줄이고 성능을 높인다. Get/head메서드 이외에는 캐시되지 않는다.</p><h3 id="갱신-일자에-따른-캐시"><a href="#갱신-일자에-따른-캐시" class="headerlink" title="갱신 일자에 따른 캐시"></a>갱신 일자에 따른 캐시</h3><p>기본적으로 last-modified가 있으면 콘텐츠를 캐시한다.</p><p>서버는 캐시 시간과 컨텐츠 갱신 일자를 비교해서 컨텐츠가 업데이트됐으면 200 ok를 반환하고 바디에 콘텐츠를 실어 보내지만, 업데이트 안됐으면 304 not modified를 반환하고 바디를 응답에 포함하지 않는다…!</p><h3 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a>Expires</h3><p>앞서 설명한 갱신 일시를 이용하여 캐시하는 경우 캐시의 유효성을 확인하기 위한 통신이 발생한다. 이 통신 자체를 없애기 위해 헤더에 expires를 추가한다. Expires헤더에는 날짜와 시간이 들어간다. Expires기간 이내라면 캐시가 유효하다고 판단해 요청을 아예 전송하지 않는다. 지정한 기간 이내의 변경 사항은 모두 무시되기 때문에 좀처럼 변경되지 않는 정적 콘텐츠에 사용하는 것이 바람직하다.</p><h3 id="Pragma-no-cache"><a href="#Pragma-no-cache" class="headerlink" title="Pragma:no-cache"></a>Pragma:no-cache</h3><p>이 헤더는 프록시 서버에 요청한 컨텐츠가 이미 저장돼 있어도, 원래 서버에서 가려오라고 지시한다. No-cache는 http/1.1에 이르러 cache-contorl로 통합됐지만, 아직 남아 있다. 그다지 적극적으로 사용되지는 않는다.</p><h3 id="Etag추가"><a href="#Etag추가" class="headerlink" title="Etag추가"></a>Etag추가</h3><p>동적으로 바뀌는 요소가 늘어날수록 어떤 날짜를 근거로 캐시의 유효성을 판단해야 하는지 판단하기 어려워진다. Etag는 순차적인 갱신 일시가 아니라 파일의 해시값으로 비교한다. 일시를 이용해 확인할 때처럼 서버는 응답에 etag 헤더를 부여한다. 두번째 이후 다운로드 시 클라이언트는 if-none-match헤더에 다운로드된 캐시에 들어 있던 etag값을 추가해 요청한다. 서버는 보내려는 파일의 etag와 비교해서 같으면 304 not modified로 응답한다. 오호! Etag는 서버가 자유롭게 그 값을 정할 수 있다. 예를 들어 아마존s3의 경우 콘텐츠 파일의 해시 값이 사용된다. </p><h3 id="Cahce-control"><a href="#Cahce-control" class="headerlink" title="Cahce-control"></a>Cahce-control</h3><p>Etag와 같은시기에 1.1에 추가된 것이 cache-control헤더이다. Expires보다 우선해서 처리된다.</p><h1 id="리퍼러"><a href="#리퍼러" class="headerlink" title="리퍼러"></a>리퍼러</h1><p>리퍼러는 사용자가 어느 경로로 웹사이트에 도달했는지 서버가 파악할 수 있도록 클라이언트가 서버에 보내는 헤더이다. 웹서비스는 리퍼러 정보를 수집함으로써 어떤 페이지가 자신의 서비스에 링크를 걸었는지도 알 수 있다.</p><p>리퍼러 정책으로서 설정할 수 있는 값은 다음과 같다.</p><ul><li>No-referrer:전혀 보내지 않는다.</li><li>No-referrer-when-downgrade:기본 동작과 마찬가지로 https→http일 때는 전송하지 않는다.</li><li>Same-origin:동일 도메인 내의 링크에 대해서만 리퍼러를 전송한다.</li><li>Origin:상세 페이지가 아니라 톱페이지에서 링크된 것으로 해 도메인 이름만 전송한다.</li><li>Strict-origin:origin과 같지만 https→http일 때는 전송하지 않는다.</li><li>Origin-when-crossorigin: 같은 도메인내에서는 완전 리퍼러를, 다른 도메인에는 도메인 이름만 전송한다.</li><li>Unsafe-url: 항상 전송한다.</li></ul><h1 id="검색-엔진용-콘텐츠-접근-제어"><a href="#검색-엔진용-콘텐츠-접근-제어" class="headerlink" title="검색 엔진용 콘텐츠 접근 제어"></a>검색 엔진용 콘텐츠 접근 제어</h1><p>크롤러, 로봇, 봇, 스파이더와 같은 정보를 수집하는 자동 순회 프로그램이 많이 운용되게 되었다. 이 크롤러의 접근을 제어하는 방법으로는 주로 2가지 방법이 쓰인다.</p><ul><li>Robots.txt</li><li>사이트맵</li></ul><h3 id="Robots-txt"><a href="#Robots-txt" class="headerlink" title="Robots.txt"></a>Robots.txt</h3><p>Robots.txt는 서버 콘텐츠 제공자가 크롤러에 접근 허가 여부를 전하기 위한 프로토콜이다. 파일 내에서는 읽기를 금지할 크롤러의 이름과 장소를 지정한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">User-agent:*</span><br><span class="line">Disallow:&#x2F;cgi-bin&#x2F;</span><br><span class="line">Disallow:&#x2F;tmp&#x2F;</span><br></pre></td></tr></table></figure><p>Robots.txt가 블랙리스트처럼 사용된다면, 사이트맵은 화이트리스트처럼 사용된다..</p>]]></content>
      
      
      <categories>
          
          <category> Book </category>
          
          <category> 리얼월드 HTTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> project </tag>
            
            <tag> roadmap </tag>
            
            <tag> book </tag>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>헤더와 바디</title>
      <link href="2020/05/22/book3-1/"/>
      <url>2020/05/22/book3-1/</url>
      
        <content type="html"><![CDATA[<br/><p><strong>&lt;리얼월드 HTTP&gt; 도서의 내용을 요약 정리하고 관련 내용을 추가하였습니다.</strong></p><a id="more"></a> <hr><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><p>HTTP는 웹 브라우저와 웹 서버가 통신하는 절차와 형식을 규정한 것이다. 더 나아가 번역 api나, 데이터 저장 api등 다양한 서비스의 인터페이스로 사용되면서 인터넷의 기초가 됐다.</p><p>다양한 프로토콜이 RFC로 정의됐다. RFC는 통신의 상호접속성 유지를 위한 공통화된 사양서 모음을 의미한다.</p><h3 id="HTTP-헤더"><a href="#HTTP-헤더" class="headerlink" title="HTTP 헤더"></a>HTTP 헤더</h3><p>헤더는 <code>파일명:값</code> 형식으로 본문 앞에 부가된다. 헤더 이름은 대, 소문자를 구별하지 않는다. http에도 이 전자메일과 같은 똑같은 형식의 헤더가 도입됐다.</p><h4 id="1-클라이언트가-서버에-보내는-헤더"><a href="#1-클라이언트가-서버에-보내는-헤더" class="headerlink" title="1. 클라이언트가 서버에 보내는 헤더"></a>1. 클라이언트가 서버에 보내는 헤더</h4><p>• User-Agent : 클라이언트가 자신의 애플리케이션 정보를 나타내는 곳. 스마트폰, pc의 브라우저 종류나 버전을 구분할 수 있다.</p><p>• Referer : 서버에서 참고하는 추가 정보. 클라이언트가 요청을 보낼 때 보고 있던 페이지의 url을 보낸다. 페이지의 참조원을 서버가 참조하하는데 이용한다.</p><p>• Authorization: 특별한 클라이언트에만 통신을 허가할 때, 인증 정보를 서버에 전달한다. aws나 git api등에서는 웹 서비스 자체 표기를 요구하기도 한다(?)</p><h4 id="2-서버에서-클라이언트로-보낼-때-부여하는-헤더"><a href="#2-서버에서-클라이언트로-보낼-때-부여하는-헤더" class="headerlink" title="2. 서버에서 클라이언트로 보낼 때 부여하는 헤더"></a>2. 서버에서 클라이언트로 보낼 때 부여하는 헤더</h4><p>• Contet-Type : 파일 종류를 지정. mime 타입이라는 식별자를 기술한다.</p><p>• Content-Length : 바디 크기. 만약 압축이 이루어지는 경우 압축 후의 크기가 들어간다.</p><p>• Content-Encoding : 압축이 이루어진 경우, 압축 형식을 설명한다.</p><p>• Date : 문서 날짜</p><p>• 또한 이 밖에 X-로 시작되는 헤더는 각 애플리케이션이 자유롭게 사용해도 된다.</p><h3 id="헤더의-전송"><a href="#헤더의-전송" class="headerlink" title="헤더의 전송"></a>헤더의 전송</h3><p>curl 커맨드로 실제 헤더를 보낼 수 있다. 헤더는 —header=헤더행 or -H옵션을 사용한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl —http1.0 -H “X-test: hello” http//localhost:8000</span><br></pre></td></tr></table></figure><h3 id="MIME-타입"><a href="#MIME-타입" class="headerlink" title="MIME 타입"></a>MIME 타입</h3><p>파일의 종류를 구분하는 문자열.</p><p>인터넷 옵션에 따라 mime타입이 아닌 내용을 보고 파일 형식을 추측하려 하는데 이런 동작을 콘텐츠 스니핑이라고 한다. 그런데 만약 text파일에 html, js가 써있으면 파일을 실행해버리는 문제가 생길 수도 있다. 이런 문제를 해결하기 위해서 다음과 같이 옵션을 추가한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-content-type-option: nosniff</span><br></pre></td></tr></table></figure><h3 id="메서드"><a href="#메서드" class="headerlink" title="메서드"></a>메서드</h3><p>http/1.0으로 통신할 때 전송되는 get부분은 메서드로 불린다. 다음 3가지가 흔히 쓰이는 메서드이다.</p><p>• get : 서버에 헤더와 콘텐츠 요청</p><p>• head: 서버에 헤더만 요청</p><p>• post : 새로운 문서 투고</p><p>html의 폼에서는 get과 post만 지원된다.</p><h3 id="스테이터스-코드"><a href="#스테이터스-코드" class="headerlink" title="스테이터스 코드"></a>스테이터스 코드</h3><p>3자리 숫자를 보고 서버가 어떻게 응답했는지 파악한다.</p><p>• 100번대 : 처리가 계속됨을 나타낸다.</p><p>• 200번대 : 성공했을 때의 응답.</p><p>• 300번대 : 서버에서 클라이언트로의 명령. 정상 처리의 범주이며 리디렉트나 캐시 이용을 지시한다.</p><p>• 400번대 : 클라이언트가 보낸 요청에 오류가 있다.</p><p>• 500번대 : 서버 내부에서 오류가 발생했다.</p><h3 id="리디렉트"><a href="#리디렉트" class="headerlink" title="리디렉트"></a>리디렉트</h3><p>서버는 브라우저에 대해 리디렉트하도록 지시할 수 있다. 300이외의 경우는 <strong>location</strong>헤더를 사용해 리디렉트할 곳을 서버에서 클라이언트로 전달한다. 리디렉트에는 다섯 가지 종류가 있다.</p><p>• 301 moved permanently : 도메인 전송, 웹사이트 이전, https</p><p>• 302 found : 일시적 관리, 모바일 기반 전송</p><p>• 303 see other : 로그인 후 페이지 전환</p><p>• 307 temporary redirect: ..</p><p>영구적인지 일시적인지는 이동하는 이전 페이지가 이후에도 존재하는지로 분류한다. http → https 로의 전환은 http를 볼 일이 없으므로 영구적이다.</p><p>클라이언트는 Location헤더 값을 보고 다시 요청한다.</p><h3 id="Url"><a href="#Url" class="headerlink" title="Url"></a>Url</h3><p>Uri에는 urn이라는 이름 부여 규칙도 포함된다. url은 장소로 문서 등의 리소스를 특정하는 수단을 제공한다. 다시 말해, url은 주소이며, urn은 이름 그 자체이다. urn 예시는 다음과 같다.</p><p>웹 시스템을 다루는 한 urn이 등장할 일은 없으므로 uri와 url은 거의 같다.</p><h3 id="url의-구조"><a href="#url의-구조" class="headerlink" title="url의 구조"></a>url의 구조</h3><p>스키마://호스트명/경로</p><p>• 스키마 : https</p><p>• 호스트명: <a href="http://www.oreilly.co.jp/">www.oreilly.co.jp</a></p><p>• 경로: index.html</p><p>Url 사양에 포함되는 모든 요소가 들어간다면, 다음과 같은 형식이 된다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">스키마:&#x2F;&#x2F;사용자:패스워드@호스트명:포트&#x2F;경로#프래그먼트?쿼리</span><br></pre></td></tr></table></figure><p>사용자 이름과 패스워드는 FTP등에서 사용되곤 하는데, 여기서 기술하는 방식은 basic인증으로, 패스워드가 그대로 노출되어 웹 시스템에서 사용되는 일은 없다.</p><p>프래그먼트는 html에서는 페이지 내 링크의 앵커를 지정하는 데 쓰인다.</p><p>쿼리는 검색 용어를 지정하거나 표시하고 싶은 웹페이지에 대해서 특정 파라미터를 부여하는 데 쓰인다.</p><p>처음에는 url의 도메인 이름을 영숫자와 하이픈만 쓸 수 있었지만, 국제화 도메인 네임을 표현하는 인코딩 규칙 퓨니코드가 정해져 다국어를 사용할 수 있게 되었다.</p><h3 id="바디"><a href="#바디" class="headerlink" title="바디"></a>바디</h3><p>헤더 마지막 줄에 빈 줄을 넣으면 그 이후는 모두 바디가 된다. 한 번 응답할 때마다 한 파일만 반환한다. 폼이나 xmlhttprequest를 사용해 클라이언트에서 서버로 데이터를 전송하는 경우도 있다.</p>]]></content>
      
      
      <categories>
          
          <category> Book </category>
          
          <category> 리얼월드 HTTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> project </tag>
            
            <tag> roadmap </tag>
            
            <tag> book </tag>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>역전파를 사용하여 모델 학습하기</title>
      <link href="2020/05/12/project1-4/"/>
      <url>2020/05/12/project1-4/</url>
      
        <content type="html"><![CDATA[<br/><p>오차역전파를 사용한 학습도 손실함수를 최소화하는 가중치를 찾는 것을 목표로합니다. 다만, 역전파는 가중치를 구함에 있어 연쇄법칙에 기반한 국소적 미분을 활용합니다. 순전파와 비교했을 때 훨씬 빠른 시간 안에 효울적으로 계산한다는 장점이 있습니다. 이번에는 역전파법을 사용하여 모델 학습을 진행해 보겠습니다.</p><p>먼저, 라이브러리와 공통함수를 읽어옵니다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#install.packages("dslabs")</span></span><br><span class="line">    <span class="keyword">library</span>(dslabs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">source</span>(<span class="string">"./functions.R"</span>)</span><br><span class="line">    <span class="keyword">source</span>(<span class="string">"./utils.R"</span>)</span><br><span class="line">    <span class="keyword">source</span>(<span class="string">"./model.R"</span>)</span><br></pre></td></tr></table></figure><p>1개의 은닉층을 갖는 네트워크를 생성합니다. 네트워크는 순전파와 동일합니다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">TwoLayerNet &lt;- <span class="keyword">function</span>(input_size, hidden_size, output_size, weight_init_std  =  <span class="number">0.01</span>) &#123;</span><br><span class="line">  W1 &lt;- weight_init_std * matrix(rnorm(n  =  input_size*hidden_size), nrow  =  input_size, ncol  =  hidden_size)</span><br><span class="line">  b1 &lt;- matrix(rep(<span class="number">0</span>,hidden_size), nrow = <span class="number">1</span>, ncol = hidden_size)</span><br><span class="line">  W2 &lt;- weight_init_std * matrix(rnorm(n  =  hidden_size*output_size), nrow  =  hidden_size, ncol  =  output_size)</span><br><span class="line">  b2 &lt;- matrix(rep(<span class="number">0</span>,output_size),nrow = <span class="number">1</span>, ncol = output_size)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (list(W1 = W1, b1 = b1, W2 = W2, b2 = b2))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>데이터를 불러와 트레이닝셋과 테스트셋으로 분리하는 <code>init()</code>함수를 생성합니다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">init &lt;- <span class="keyword">function</span>()&#123;</span><br><span class="line">  mnist_data &lt;- get_data()</span><br><span class="line">  <span class="comment">#손글씨 데이터</span></span><br><span class="line">  x_train_normalize &lt;&lt;- mnist_data$x_train </span><br><span class="line">  x_test_normalize &lt;&lt;- mnist_data$x_test</span><br><span class="line">  <span class="comment">#정답 레이블</span></span><br><span class="line">  t_train_onehotlabel &lt;&lt;- making_one_hot_label(mnist_data$t_train,<span class="number">60000</span>, <span class="number">10</span>)</span><br><span class="line">  t_test_onehotlabel &lt;&lt;- making_one_hot_label(mnist_data$t_test,<span class="number">10000</span>, <span class="number">10</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>앞서 역전파에서는 국소적 미분을 사용한다고 했습니다. 순전파와 반대방향으로 국소적 미분을 곱하여 이전 노드들에 값을 전달하는 것인데, 국소적 미분은 순전파 때의 미분을 구한다는 뜻입니다. 다시 말해, 순전파 때의 미분 값을 구해 다음 노드에 전달하는 함수가 필요합니다.<br>다음 코드는 순전파 때와 마찬가지로 입력신호와 가중치를 계산하고 Relu함수를 거쳐 다음 노드로 전달합니다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">forward &lt;- <span class="keyword">function</span>(x)&#123;</span><br><span class="line">  Affine_1 &lt;- Affine.forward(network$W1, network$b1, x)</span><br><span class="line">  Relu_1 &lt;- Relu.forward(Affine_1$out)</span><br><span class="line">  Affine_2 &lt;- Affine.forward(network$W2, network$b2, Relu_1$out)</span><br><span class="line">  <span class="keyword">return</span>(list(x = Affine_2$out, Affine_1.forward = Affine_1, Affine_2.forward = Affine_2, Relu_1.forward = Relu_1))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>역전파도 마찬가지로 손실함수를 계산합니다. </p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">loss &lt;- <span class="keyword">function</span>(model.forward, x, t)&#123;</span><br><span class="line">  temp &lt;- model.forward(x)</span><br><span class="line">  y &lt;- temp$x</span><br><span class="line">  last_layer.forward &lt;- SoftmaxWithLoss.forward(y, t)</span><br><span class="line">  <span class="keyword">return</span>(list(loss = last_layer.forward$loss, softmax = last_layer.forward, predict =  temp))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>순전파와 달리 마지막 노드에서부터 거꾸로 계산해 기울기를 구합니다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">gradient &lt;- <span class="keyword">function</span>(model.forward, x, t) &#123;</span><br><span class="line">  <span class="comment"># 순전파</span></span><br><span class="line">  temp &lt;- loss(model.forward, x, t)</span><br><span class="line">  <span class="comment"># 역전파</span></span><br><span class="line">  dout &lt;- <span class="number">1</span></span><br><span class="line">  last.backward &lt;- SoftmaxWithLoss.backward(temp$softmax, dout)</span><br><span class="line">  Affine_2.backward &lt;- Affine.backward(temp$predict$Affine_2.forward, dout  =  last.backward$dx)</span><br><span class="line">  Relu_1.backward &lt;- Relu.backward(temp$predict$Relu_1.forward, dout  =  Affine_2.backward$dx)</span><br><span class="line">  Affine_1.backward &lt;- Affine.backward(temp$predict$Affine_1.forward, dout  =  Relu_1.backward$dx)</span><br><span class="line">  grads  &lt;- list(W1  =  Affine_1.backward$dW, b1  =  Affine_1.backward$db, W2  =  Affine_2.backward$dW, b2  =  Affine_2.backward$db)</span><br><span class="line">  <span class="keyword">return</span>(grads)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>다음은 학습을 실제로 진행하는 코드입니다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">train_model &lt;- <span class="keyword">function</span>(batch_size, iters_num, learning_rate, debug=<span class="literal">FALSE</span>)&#123;</span><br><span class="line">  <span class="comment">#seperate train, test data</span></span><br><span class="line">  init()</span><br><span class="line">  train_size &lt;- dim(x_train_normalize)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">  iter_per_epoch &lt;- max(train_size / batch_size)</span><br><span class="line">  <span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span>:iters_num)&#123;</span><br><span class="line">      batch_mask &lt;- sample(train_size ,batch_size)</span><br><span class="line">      x_batch &lt;- x_train_normalize[batch_mask,]</span><br><span class="line">      t_batch &lt;- t_train_onehotlabel[batch_mask,]</span><br><span class="line"></span><br><span class="line">      grad &lt;- gradient(model.forward=forward, x_batch, t_batch)</span><br><span class="line">      <span class="comment">#update weights and biases using SGD</span></span><br><span class="line">      network &lt;&lt;- sgd.update(network,grad,lr=learning_rate)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(debug == <span class="literal">TRUE</span>)&#123;</span><br><span class="line">          <span class="keyword">if</span>(i %% iter_per_epoch == <span class="number">0</span>)&#123;</span><br><span class="line">              train_acc &lt;- model.evaluate(forward, x_train_normalize, t_train_onehotlabel)</span><br><span class="line">              test_acc &lt;- model.evaluate(forward, x_test_normalize, t_test_onehotlabel)</span><br><span class="line">              print(c(train_acc, test_acc))</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  train_accuracy = model.evaluate(forward, x_train_normalize, t_train_onehotlabel)</span><br><span class="line">  test_accuracy = model.evaluate(forward, x_test_normalize, t_test_onehotlabel)</span><br><span class="line">  <span class="keyword">return</span>(c(train_accuracy, test_accuracy))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>train_model()</code>함수 중간에 <code>sg.update()</code>함수는 경사하강법으로 변경된 가중치를 업데이트하는 역할을 합니다.<br>코드는 아래와 같습니다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sgd.update &lt;- <span class="keyword">function</span>(network, grads, lr = <span class="number">0.01</span>)&#123;</span><br><span class="line">  <span class="keyword">for</span>(i <span class="keyword">in</span> names(network))&#123;network[[i]] &lt;- network[[i]] - (grads[[i]]*lr)&#125;</span><br><span class="line">  <span class="keyword">return</span>(network)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제 모든 준비를 마쳤습니다. 네트워크를 생성한 후 모델을 학습시켜봅니다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">network &lt;&lt;- TwoLayerNet(input_size = <span class="number">784</span>, hidden_size = <span class="number">50</span>, output_size = <span class="number">10</span>)</span><br><span class="line">train_model(<span class="number">100</span>, <span class="number">10000</span>, <span class="number">0.1</span>, <span class="literal">TRUE</span>)</span><br></pre></td></tr></table></figure><p>위 코드를 실행시키고 3분 정도 지나면 아래와 같은 출력화면이 나올 것입니다. 한 행의 첫 번째 숫자는 훈련데이터 셋에 대한 정확도, 두 번째 숫자는 테스트 셋에 대한 정확도를 나타냅니다. 그리고 하나의 행은 1에폭(epoch)을 의미합니다. 에폭을 진행할수록 정확도가 높아지는 것을 확인할 수 있습니다!</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>] <span class="number">0.9048</span> <span class="number">0.9059</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">0.9228</span> <span class="number">0.9247</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">0.9355833</span> <span class="number">0.9343000</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">0.9436167</span> <span class="number">0.9416000</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">0.9496167</span> <span class="number">0.9470000</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">0.9563167</span> <span class="number">0.9519000</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">0.9602167</span> <span class="number">0.9555000</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">0.9629167</span> <span class="number">0.9558000</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">0.9664833</span> <span class="number">0.9603000</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">0.9680333</span> <span class="number">0.9619000</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">0.9711167</span> <span class="number">0.9635000</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">0.97315</span> <span class="number">0.96520</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">0.97445</span> <span class="number">0.96570</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">0.9754167</span> <span class="number">0.9659000</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">0.9771167</span> <span class="number">0.9698000</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">0.9779</span> <span class="number">0.9679</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">0.9776833</span> <span class="number">0.9680000</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
          <category> DeepLearningFromForR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 딥러닝 </tag>
            
            <tag> project </tag>
            
            <tag> 역전파 </tag>
            
            <tag> 모델학습 </tag>
            
            <tag> 모델링 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>순전파를 사용하여 모델 학습하기</title>
      <link href="2020/05/04/project1-3/"/>
      <url>2020/05/04/project1-3/</url>
      
        <content type="html"><![CDATA[<br/>순전파법을 사용하여 손글씨 추론 모델을 만들어보겠습니다. 순전파법의 기본 원리는 손실함수 값을 최소화 시키는 것입니다. 손실함수 값을 최소화 시키는 방법으로는 경사하강법(SGD)를 사용합니다. 순전파의 기본 설명은 다음 링크를 참고하세요.<ul><li><a href="https://jyejin.github.io/2020/04/11/book1-3/">신경망 학습하기-1 (손실함수, 교차엔트로피오차)</a></li><li><a href="https://jyejin.github.io/2020/04/11/book1-4/">CH5. 신경망 학습하기-2 (경사하강법)</a></li></ul><p>먼저, 학습할 네트워크를 만듭니다. W1,W2는 각 층별 가중치이며 b1,b2는 편향 값을 의미합니다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">TwoLayerNet &lt;- <span class="keyword">function</span>(input_size, hidden_size, output_size, weight_init_std  =  <span class="number">0.01</span>) &#123;</span><br><span class="line">  W1 &lt;- weight_init_std * matrix(rnorm(n  =  input_size*hidden_size), nrow  =  input_size, ncol  =  hidden_size)</span><br><span class="line">  b1 &lt;- matrix(rep(<span class="number">0</span>,hidden_size), nrow = <span class="number">1</span>, ncol = hidden_size)</span><br><span class="line">  W2 &lt;- weight_init_std * matrix(rnorm(n  =  hidden_size*output_size), nrow  =  hidden_size, ncol  =  output_size)</span><br><span class="line">  b2 &lt;- matrix(rep(<span class="number">0</span>,output_size),nrow = <span class="number">1</span>, ncol = output_size)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (list(W1 = W1, b1 = b1, W2 = W2, b2 = b2))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>TwoLayerNet</code> 네트워크는 아래와 같이 은닉층을 1개 갖습니다.</p><img src="/gallery/project1-3-1.png"><p>입력층에서 <code>input_size</code> 개수만큼의 노드를 갖고 은닉층에서는 <code>hidden_size</code> 개수만큼의 노드, 출력층에서는 <code>output_size</code>만큼의 노드를 갖습니다. <code>W1</code>과 <code>b1</code>은 입력층에서 은닉층으로 갈 때의 가중치와 편향이며 <code>W2</code>와 <code>b2</code>는 은닉층에서 출력층으로 갈 때 사용하는 가중치와 편향입니다. 그리고 <code>weight_init_std</code>는 가중치 초기값이 큰 값이 되는 것을 방지하는 파라미터입니다.</p><p>다음으로, 데이터를 불러오고 트레이닝 셋과 테스트 셋으로 분류합니다. 데이터는 MNIST 라이브러리의 손글씨 이미지입니다. R에서는 dslabs를 임포트합니다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span>(dslabs)</span><br><span class="line"><span class="keyword">source</span>(<span class="string">"./functions.R"</span>)</span><br><span class="line"><span class="keyword">source</span>(<span class="string">"./utils.R"</span>)</span><br><span class="line"><span class="keyword">source</span>(<span class="string">"./model.R"</span>)</span><br><span class="line"></span><br><span class="line">init &lt;- <span class="keyword">function</span>()&#123;</span><br><span class="line">  mnist_data &lt;- get_data()</span><br><span class="line">  <span class="comment">#손글씨 데이터</span></span><br><span class="line">  x_train_normalize &lt;&lt;- mnist_data$x_train </span><br><span class="line">  x_test_normalize &lt;&lt;- mnist_data$x_test</span><br><span class="line">  <span class="comment">#정답 레이블</span></span><br><span class="line">  t_train_onehotlabel &lt;&lt;- making_one_hot_label(mnist_data$t_train,<span class="number">60000</span>, <span class="number">10</span>)</span><br><span class="line">  t_test_onehotlabel &lt;&lt;- making_one_hot_label(mnist_data$t_test,<span class="number">10000</span>, <span class="number">10</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>손실함수는 교차엔트로피오차 함수를 사용합니다. 교차엔트로피오차 함수는 아래와 같이 구현합니다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">model.forward &lt;- <span class="keyword">function</span>(x)&#123;</span><br><span class="line">  z1 &lt;- sigmoid(sweep((x %*% network$W1),<span class="number">2</span>, network$b1,<span class="string">'+'</span>))</span><br><span class="line">  <span class="keyword">return</span>(softmax(sweep((z1 %*% network$W2),<span class="number">2</span>, network$b2,<span class="string">'+'</span>)))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cross_entropy_error &lt;- <span class="keyword">function</span>(y, t)&#123;</span><br><span class="line">    delta &lt;- <span class="number">1e-7</span></span><br><span class="line">    batchsize &lt;- dim(y)[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span>(-sum(t * log(y + delta))/batchsize)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loss &lt;-<span class="keyword">function</span>(x,t)&#123;</span><br><span class="line">  <span class="keyword">return</span>(cross_entropy_error(model.forward(x),t))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>기본 교차엔트로피 함수식에 <code>delta</code>값을 추가하였는데, 이는 log0이 되면 -Inf가 되는 문제를 방지하기 위해서 입니다.</p><p>다음으로 경사하강법은 손실함수 값을 최소화 시키기 위해 사용합니다. </p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">numerical_gradient_W &lt;- <span class="keyword">function</span>(f,x,t,weight)&#123;</span><br><span class="line">    h &lt;- <span class="number">1e-4</span></span><br><span class="line">    vec &lt;- matrix(<span class="number">0</span>, nrow = nrow(network[[weight]]) ,ncol = ncol(network[[weight]]))</span><br><span class="line">    <span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span>:length(network[[weight]]))&#123;</span><br><span class="line">        origin &lt;-  network[[weight]][i]</span><br><span class="line">        network[[weight]][i] &lt;&lt;- (network[[weight]][i] + h)</span><br><span class="line">        fxh1 &lt;- f(x, t)</span><br><span class="line">        network[[weight]][i] &lt;&lt;- (network[[weight]][i] - (<span class="number">2</span>*h))</span><br><span class="line">        fxh2 &lt;- f(x, t)</span><br><span class="line">        vec[i] &lt;- (fxh1 - fxh2) / (<span class="number">2</span>*h)</span><br><span class="line">        network[[weight]][i] &lt;&lt;- origin</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>(vec)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">numerical_gradient &lt;- <span class="keyword">function</span>(f,x,t) &#123;</span><br><span class="line">  grads  &lt;- list(W1 = numerical_gradient_W(f,x,t,<span class="string">"W1"</span>), </span><br><span class="line">                 b1 = numerical_gradient_W(f,x,t,<span class="string">"b1"</span>), </span><br><span class="line">                 W2 = numerical_gradient_W(f,x,t,<span class="string">"W2"</span>), </span><br><span class="line">                 b2 = numerical_gradient_W(f,x,t,<span class="string">"b2"</span>))</span><br><span class="line">  <span class="keyword">return</span>(grads)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>마지막으로 학습시키는 함수입니다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">train_model &lt;- <span class="keyword">function</span>(batch_size, iters_num, learning_rate, debug=<span class="literal">FALSE</span>)&#123;</span><br><span class="line">  <span class="comment">#seperate train, test data</span></span><br><span class="line">  init()</span><br><span class="line">  train_size &lt;- dim(x_train_normalize)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">  iter_per_epoch &lt;- max(train_size / batch_size)</span><br><span class="line">  <span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span>:iters_num)&#123;</span><br><span class="line">    batch_mask &lt;- sample(train_size,batch_size)</span><br><span class="line">    x_batch &lt;- x_train_normalize[batch_mask,]</span><br><span class="line">    t_batch &lt;- t_train_onehotlabel[batch_mask,]</span><br><span class="line"></span><br><span class="line">    grad &lt;- numerical_gradient(loss, x_batch, t_batch)</span><br><span class="line">    network &lt;&lt;- sgd.update(network,grad,lr=learning_rate)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(debug)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i %% iter_per_epoch == <span class="number">0</span>)&#123;</span><br><span class="line">            train_acc &lt;- model.evaluate(model.forward, x_train_normalize, t_train_onehotlabel)</span><br><span class="line">            test_acc &lt;- model.evaluate(model.forward, x_test_normalize, t_test_onehotlabel)</span><br><span class="line">            print(c(train_acc, test_acc))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    train_accuracy = model.evaluate(model.forward, x_train_normalize, t_train_onehotlabel)</span><br><span class="line">    test_accuracy = model.evaluate(model.forward, x_test_normalize, t_test_onehotlabel)</span><br><span class="line">    <span class="keyword">return</span>(c(train_accuracy, test_accuracy))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>train_model()</code>함수 중간에 <code>sg.update()</code>함수는 경사하강법으로 변경된 가중치를 업데이트하는 역할을 합니다.<br>코드는 아래와 같습니다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sgd.update &lt;- <span class="keyword">function</span>(network, grads, lr = <span class="number">0.01</span>)&#123;</span><br><span class="line">  <span class="keyword">for</span>(i <span class="keyword">in</span> names(network))&#123;network[[i]] &lt;- network[[i]] - (grads[[i]]*lr)&#125;</span><br><span class="line">  <span class="keyword">return</span>(network)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제 모든 준비를 마쳤습니다. 네트워크를 생성한 후 모델을 학습시켜봅니다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">network &lt;&lt;- TwoLayerNet(input_size = <span class="number">784</span>, hidden_size = <span class="number">50</span>, output_size = <span class="number">10</span>)</span><br><span class="line">train_model(<span class="number">100</span>, <span class="number">10000</span>, <span class="number">0.1</span>, <span class="literal">TRUE</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
          <category> DeepLearningFromForR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 딥러닝 </tag>
            
            <tag> project </tag>
            
            <tag> 모델학습 </tag>
            
            <tag> 모델링 </tag>
            
            <tag> 순전파 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>게시글</title>
      <link href="2020/05/04/project2-1/"/>
      <url>2020/05/04/project2-1/</url>
      
        <content type="html"><![CDATA[<br/><h3 id="5월-게시글"><a href="#5월-게시글" class="headerlink" title="5월 게시글"></a>5월 게시글</h3><ol><li><a href="https://jyejin.github.io/2020/05/01/study1/#more">DNS와 작동원리</a></li><li><a href="https://jyejin.github.io/2020/05/22/book3-1/">HTTP 1장</a></li><li><a href="https://jyejin.github.io/2020/05/31/book3-2/">HTTP 2장</a></li></ol><h3 id="6월-게시글"><a href="#6월-게시글" class="headerlink" title="6월 게시글"></a>6월 게시글</h3><ol><li><a href="https://jyejin.github.io/2020/06/02/book3-3/">HTTP 5장</a></li><li><a href="https://jyejin.github.io/2020/06/06/study1-2/">CORS</a></li></ol><h3 id="8월-게시글"><a href="#8월-게시글" class="headerlink" title="8월 게시글"></a>8월 게시글</h3><ol><li><a href="https://jyejin.github.io/2020/08/23/study4/">메모리 관리</a></li><li><a href="https://jyejin.github.io/2020/08/23/study3/">IPC</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
          <category> Roadmap2020 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> study </tag>
            
            <tag> project </tag>
            
            <tag> roadmap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DNS와 작동원리</title>
      <link href="2020/05/01/study1/"/>
      <url>2020/05/01/study1/</url>
      
        <content type="html"><![CDATA[<br/><p>DNS에 대해 알아보자.</p><a id="more"></a> <hr><p>DNS는 Domanin Name System의 약자로, IP주소를 도메인으로 변환하고 도메인을 IP주소로 변환함으로써 통신하게 하는 시스템입니다.<br>온라인 상의 네트워킹을 하는 모든 단말은 IP주소를 갖고 있고 이 IP를 통해 서로 통신합니다.</p><ul><li>참고: IP주소는 인터넷에 <a href="https://search.naver.com/search.naver?sm=top_hty&fbm=0&ie=utf8&query=%EB%82%B4+IP">내 IP</a>라고 검색하면 확인할 수 있습니다. </li></ul><p>IP주소는 숫자로 되어있기 때문에 이를 하나씩 기억하고 사용하기란 매우 불편합니다. 그래서 IP주소에 도메인 네임을 붙여서 통신하게 합니다. 네이버에 접근할 때, IP주소가 아닌 <a href="http://www.naver.com">www.naver.com</a> 이라고 치는 것처럼 말이죠.<br>여기서 <code>naver.com</code>이 네이버의 도메인입니다. 도메인의 IP주소는 <code>nslookup</code>명령어로 확인할 수 있습니다. </p><!-- more --> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> $ nslookup naver.com</span><br><span class="line"></span><br><span class="line">Server:8.8.8.8</span><br><span class="line">Address:8.8.8.8<span class="comment">#53</span></span><br><span class="line"></span><br><span class="line">Non-authoritative answer:</span><br><span class="line">Name:naver.com</span><br><span class="line">Address: 125.209.222.142</span><br><span class="line">Name:naver.com</span><br><span class="line">Address: 125.209.222.141</span><br><span class="line">Name:naver.com</span><br><span class="line">Address: 210.89.160.88</span><br><span class="line">Name:naver.com</span><br><span class="line">Address: 210.89.164.90</span><br></pre></td></tr></table></figure><p>결과에 대한 IP주소로 접근 시, 네이버로 접속되는 것을 확인할 수 있습니다. 정리하면, 사용자가 <a href="http://www.naver.com을">www.naver.com을</a> 치면 DNS 서버는 도메인에 해당하는 IP주소를 찾고 IP주소로 서버에 접속하게 되는 것이죠. </p><h3 id="동작원리"><a href="#동작원리" class="headerlink" title="동작원리"></a>동작원리</h3><p>구체적인 DNS 동작원리를 살펴보겠습니다.</p><ol><li>사용자가 <a href="http://www.example.com을">www.example.com을</a> 주소창에 입력합니다. 서버에 접근하는 행위는 요청(request)이라고 표현합니다.</li><li>가장 먼저, Local DNS 정보를 확인합니다. Local DNS에 정보가 없으면 도메인을 DNS루트 이름 서버에 질의합니다.</li><li>DNS루트 이름 서버로부터 .com 도메인을 관리하는 TLD(Top-Level Domain) 서버 정보를 전달받고, TLD 서버에 다시 질의하게 됩니다.</li><li>TLD 서버로부터 example.com 정보를 관리하는 도메인 서버 정보를 받고, 해당 서버로 부터 도메인에 ip주소를 취득하게 됩니다.</li><li>IP주소로부터 응답받고 웹브라우저에 페이지를 표시합니다.</li></ol><p>이처럼 루트 도메인 서버부터 차례대로 질의하며 도메인의 IP주소를 취득하는 것을 쿼리라고 합니다.</p><p>서버에 질의하기 전 Local DNS 먼저 확인을 하는데, 이 정보는 <code>/etc/hosts</code>에서 확인 가능합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ vi /etc/hosts</span><br><span class="line"></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment"># Host Database</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># localhost is used to configure the loopback interface</span></span><br><span class="line"><span class="comment"># when the system is booting.  Do not change this entry.</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line">127.0.0.1       localhost</span><br><span class="line">255.255.255.255 broadcasthost</span><br><span class="line">::1             localhost</span><br></pre></td></tr></table></figure><p>우리가 127.0.0.1 또는 localhost라고 둘 다 사용가능했던 것도 Local DNS에 등록되어 있었기 때문입니다. 또한 우리가 특정 IP를 도메인으로 접속하고 싶다면 <code>/etc/hosts</code>에다 등록하면 됩니다. 단, 본인 PC에 한정되서 사용 가능합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ vi /etc/hosts</span><br><span class="line"></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment"># Host Database</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># localhost is used to configure the loopback interface</span></span><br><span class="line"><span class="comment"># when the system is booting.  Do not change this entry.</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line">127.0.0.1       localhost</span><br><span class="line">255.255.255.255 broadcasthost</span><br><span class="line">::1             localhost</span><br><span class="line">123.45.67.78 naver.com</span><br></pre></td></tr></table></figure><p>이처럼 naver.com 도메인을 Local DNS에 특정 IP로 등록해 놓으면, naver.com을 서버에 질의하기 전에 먼저 확인하므로, 네이버 페이지가 아닌 내가 설정한 IP주소로 접속하게 됩니다. 신기하죵?ㅎㅎ</p><p>앞서 로트 도메인/최상위 도메인(Top-Level Domain)을 언급했는데, 이 내용은 도메인 생성 규칙과 연관되어 있습니다. <code>naver.com</code>의 경우 <code>com</code>이 최상위 도메인입니다. 가장 오른쪽 레이블이 최상위 도메인이며, 도메인 <code>naver.com</code>은 최상위 도메인에 포함됩니다. 오른쪽에서 왼쪽으로 갈수록 그 범위가 좁아집니다. 예를들어, 네이버 지도는 네이버 서비스 중 하나이므로 <code>map.naver.com</code>으로 나타냅니다. 루드 도메인은 어떤 값을 지칭하는 것은 아니고 모든 도메인의 시작점으로 보시면 됩니다.</p><h3 id="서브-도메인"><a href="#서브-도메인" class="headerlink" title="서브 도메인"></a>서브 도메인</h3><p>아직 설명하지 않은 <code>www</code>는 서브 도메인입니다. 서브 도메인이란, 메인 도메인에서 파생된 도메인으로 <code>map.naver.com</code>에서 <code>naver</code>가 메인 도메인, <code>map</code>이 서브 도메인이 됩니다. 다중의 웹서비스를 만들 때 주로 사용합니다. <code>www</code>의 경우, 메인 도메인 페이지로 접속하게 하는 서브 도메인이라고 보면 됩니다.</p><h3 id="CNAME"><a href="#CNAME" class="headerlink" title="CNAME"></a>CNAME</h3><p>CNAME은 하나의 도메인에 또다른 도메인을 추가하는 것입니다.<br>예를 들어 살펴보겠습니다.</p><pre><code>123.45.67.89 -&gt; test.comtest.com -&gt; test2.com</code></pre><p>위의 경우처럼, 하나의 IP주소에 <code>test.com</code>도메인이 있음에도, <code>test2.com</code>을 추가해 <code>test2.com</code> 도메인으로부터 <code>123.45.67.89</code>의 응답을 받는것입니다. CNAME은 보통 기존의 도메인을 대체할 때 사용합니다. 예를 들어 AWS에서 인스턴스를 생성하면 인스턴스 도메인 주소는 amazonelinux<del>~</del>.com 이런식으로 되는데 이 주소를 보통 그냥 사용하지 않고 CNAME을 통해서 웹페이지에 적합한 도메인이름을 붙입니다.</p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
          <category> Network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> project </tag>
            
            <tag> roadmap </tag>
            
            <tag> network </tag>
            
            <tag> dns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020 개발자 로드맵 따라가기 프로젝트!</title>
      <link href="2020/05/01/project2/"/>
      <url>2020/05/01/project2/</url>
      
        <content type="html"><![CDATA[<br/><p>이것저것 구글링을 하다가 프론트엔드,백엔드,데브옵스 개발자를 위한 로드맵이 있다는 것을 알게 되었습니다. 무엇을 공부할지, 무엇부터 공부할지, 그리고 내가 부족한게 무엇인지 잘 모르겠다면 이 로드맵을 한번 훑어보시는걸 추천드립니다. 로드맵을 살펴보니 들어는 봤어도 개념을 명확하게 모르는게 많더라구요 ㅠ.ㅠ 그래서 저도 로드맵을 따라 공부해보려 합니다!<br>저는 프론트엔드 로드맵 1/3, 백엔드 로드맵 1/3부터 공부해 나갈 예정입니다. 공부 내용은 블로그에 올리도록 하겠습니다. 같이 공부해요.:)</p><p>로드맵 링크 : <a href="https://github.com/devJang/developer-roadmap">https://github.com/devJang/developer-roadmap</a><br>로드맵 공부 : <a href="https://roadmap.sh/frontend/resources">https://roadmap.sh/frontend/resources</a></p>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
          <category> Roadmap2020 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> study </tag>
            
            <tag> project </tag>
            
            <tag> 프론트엔드 </tag>
            
            <tag> 백엔드 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>딥러닝에 쓰이는 함수를 R과 Python으로 구현하기</title>
      <link href="2020/04/25/project1-2/"/>
      <url>2020/04/25/project1-2/</url>
      
        <content type="html"><![CDATA[<br/><p>딥러닝 책 『밑바닥부터 시작하는 딥러닝』 을 공부하면서, 책에 있는 Python코드를 R로 구현하는 <a href="https://github.com/LOPES-HUFS/DeepLearningFromForR">프로젝트</a>를 진행하고 있습니다.</p><p>Python으로 구현한 딥러닝 함수 코드와 R로 구현한 함수 코드를 동시에 살펴 보고자 합니다.</p><h3 id="1-시그모이드-Sigmoid-함수"><a href="#1-시그모이드-Sigmoid-함수" class="headerlink" title="1. 시그모이드(Sigmoid) 함수"></a>1. 시그모이드(Sigmoid) 함수</h3><p>  시그모이드 함수는 활성화 함수역할을 하는 대표 함수입니다.<br>  함수 식은 다음과 같습니다.</p>   <img src="/gallery/project1-2-0.jpg" width="300px" /><p>  파이썬의 경우, Numpy의 지수함수인 <code>exp()</code>를 사용해서 구현합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def sigmoid(x):</span><br><span class="line">    <span class="built_in">return</span> 1/ (1+np.exp(-x))</span><br></pre></td></tr></table></figure>  <a id="more"></a> <p> 시그모이드 함수를 그래프로 나타내기 위해 임의의 <code>x</code>값을 정하고 <code>matplotlib</code>으로 나타냅니다.<br> 여기서 <code>x</code>는 [-5.0, -4.9, -4.8, …. 4.9]가 됩니다.</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(-5.0, 5.0, 0.1)</span><br><span class="line">y = sigmoid(x)</span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.ylim(-0.1, 1.1)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure> <img src="/gallery/project1-2-1.png" width="400px" /><p>R은 행렬 계산을 기본으로 하기 때문에 다른 라이브러리를 임포트할 필요 없이 <code>exp()</code>를 사용할 수 있습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sigmoid &lt;- <span class="keyword">function</span>(x)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">return</span>(1 / (1 + exp(-x)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>마찬가지로, 임의의 <code>x</code>값을 정하고 <code>ggplot2</code> 라이브러리로 그래프를 그립니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">library(ggplot2)</span><br><span class="line"></span><br><span class="line">x &lt;- seq(from =  -5, to =  4.9, by =  0.1)</span><br><span class="line">y &lt;- sigmoid(x)</span><br><span class="line">data &lt;- data.frame(x, y)</span><br><span class="line"></span><br><span class="line">ggplot(data, aes(x, y)) + geom_line()</span><br></pre></td></tr></table></figure> <img src="/gallery/project1-2-2.png" width="400px" /><h3 id="2-렐루-Relu-함수"><a href="#2-렐루-Relu-함수" class="headerlink" title="2. 렐루(Relu) 함수"></a>2. 렐루(Relu) 함수</h3><p> 렐루 함수 역시 마찬가지로 활성화 함수의 대표 함수 중 하나입니다.<br> 시그모이드 함수와의 차이점은 임계점을 기준으로 0 또는 입력 값을 출력한다는 것입니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def relu(x):</span><br><span class="line">    <span class="built_in">return</span> np.maximum(0, x)</span><br><span class="line"></span><br><span class="line">x = np.arange(-5.0, 5.0, 0.1)</span><br><span class="line">y = relu(x)</span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.ylim(-0.1, 1.1)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure> <img src="/gallery/project1-2-4.png" width="400px" /><p> R도 간단하게 구현합니다.</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">relu &lt;- <span class="keyword">function</span>(x)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">return</span>(ifelse(x &gt; 0, x, 0))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">x &lt;- seq(from = -5, to = 4.9, by = 0.1)</span><br><span class="line">y &lt;- relu(x)</span><br><span class="line">data &lt;- data.frame(x, y)</span><br><span class="line">ggplot(data, aes(x, y)) + geom_line()</span><br></pre></td></tr></table></figure><p> 아래의 결과를 보면 0보다 작은 <code>x</code>값에 대해서는 결과값이 0 이고, 0보다 큰 <code>x</code>값에 대해서는 <code>x</code>값을 출력하고 있음을 확인할 수 있습니다.</p> <img src="/gallery/project1-2-5.png" width="400px" /><h3 id="3-소프트맥스-Softmax-함수"><a href="#3-소프트맥스-Softmax-함수" class="headerlink" title="3. 소프트맥스(Softmax) 함수"></a>3. 소프트맥스(Softmax) 함수</h3><p> 소프트 맥스 함수는 활성화 함수 중에서도 출력층에서 사용하는 활성화 함수입니다.<br> 소프트 맥스 함수는 결과 값에 대해 0에서~1 사이의 값으로 변환해 주는 역할만 할 뿐, 결과가 바뀌는 등의 영향을 미치지는 않습니다.<br> 결과에 영향을 미치지 않아 실제 추록 과정에서는 사용하지 않지만, 학습 단계에서 영향도를 확인하는 척도로 사용합니다.<br> 소프트 맥스 함수식은 다음과 같습니다.</p>  <img src="/gallery/project1-2-6.jpg" width="300px" /><p> 함수식을 조금 살펴보면, 분모는 모든 입력값(a)의 지수함수에 대한 총합이고 분자는 입력값(a)의 지수함수입니다.<br> 이 식을 파이썬에서는 아래와 같이 구현합니다.</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def softmax(a):</span><br><span class="line">    c = np.max(a)</span><br><span class="line">    exp_a = np.exp(a-c)</span><br><span class="line">    sum_exp_a = np.sum(exp_a)</span><br><span class="line">    y = exp_a / sum_exp_a</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">return</span> y</span><br></pre></td></tr></table></figure><p> <code>exp_a</code>는 소프트맥스 함수 식에 없는 처리를 하고 있는데, 입력값 중(<code>a</code>) 최대값(<code>c</code>)를 구한 후 최대값(<code>c</code>)을 일괄적으로 뺀 지수함수를 구하고 있습니다. 이같은 처리를 하는 이유는 지수함수의 특징 때문입니다.<br> 지수함수는 쉽게 큰 값을 출력합니다. 이 때는 숫자 값이 아닌 무한대를 뜻하는 inf값을 출력하게 됩니다.<br> 이 문제를 방지하고자 최댓값을 빼는 것이 일반적입니다. 지수 함수는 일괄적으로 더하거나 빼도 결과가 바뀌지 않습니다.</p><p> 결과는 다음과 같습니다.<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([0.3, 2.9, 4.0])</span><br><span class="line">y = softmax(a)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(y)</span><br></pre></td></tr></table></figure><br>   <img src="/gallery/project1-2-8.png" width="400px" /></p><p> 소프트 맥스 함수는 결과 값의 합이 항상 1인 것이 특징입니다.</p><img src="/gallery/project1-2-7.png" width="200px" /><p> R에서도 마찬가지로 최댓값을 빼는 방법으로 소프트맥스 함수를 구현합니다.<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">softmax &lt;- <span class="keyword">function</span>(a)</span><br><span class="line">&#123;</span><br><span class="line">    exp_a &lt;- exp(a - max(a))</span><br><span class="line">    sum_exp_a &lt;- sum(exp_a)</span><br><span class="line">    <span class="built_in">return</span>(exp_a / sum_exp_a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="/gallery/project1-2-9.png" width="400px" /></p><h3 id="4-교차-엔트로피-오차-함수"><a href="#4-교차-엔트로피-오차-함수" class="headerlink" title="4. 교차 엔트로피 오차 함수"></a>4. 교차 엔트로피 오차 함수</h3><p> 교차 엔트로피 오차 함수는 손실함수에 사용하는 함수이다. 딥러닝 학습 시에 손실함수를 최소화하는 매개변수를 찾는 것을 목표로 한다.<br> 교차 엔트로피 오차 식은 다음과 같다.</p> <img src="/gallery/project1-2-10.jpg" width="400px" /><p>파이썬으로 다음과 같이 구현한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def cross_entropy_error(y, t):</span><br><span class="line">    delta = 1e-7</span><br><span class="line">    <span class="built_in">return</span> -np.sum(t * np.log(y + delta))</span><br></pre></td></tr></table></figure><p><code>delta</code>변수 역시 소프트맥스 함수와 비슷한 이유로 추가했는데, np.log() 함수에 0을 입력하면 마이너스 무한대를 뜻하는 -inf가 출력됩니다. 이문제를 방지하기 위해 아주 작은 값인 <code>delta</code>를 추가하게 됩니다.</p><p>교차엔트로피 오차는 다음과 같은 값을 출력합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">t = [0,0,1,0,0,0,0,0,0,0]</span><br><span class="line">y = [0.1, 0.05, 0.6, 0.0, 0.05, 0.1, 0.0, 0.1, 0.0, 0.0]</span><br><span class="line"></span><br><span class="line">cross_entropy_error(np.array(y), np.array(t))</span><br></pre></td></tr></table></figure><img src="/gallery/project1-2-11.png" width="300px" /><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">t = [0,0,1,0,0,0,0,0,0,0]</span><br><span class="line">y = [0.1, 0.05, 0.1, 0.0, 0.05, 0.1, 0.0, 0.6, 0.0, 0.0]</span><br><span class="line"></span><br><span class="line">cross_entropy_error(np.array(y), np.array(t))</span><br></pre></td></tr></table></figure><img src="/gallery/project1-2-12.png" width="300px" /><p>설명하면, <code>t</code>는 정답 레이블이고 <code>y</code>는 예측값입니다. 예측 값(<code>y</code>)을 정답레이블(<code>t</code>)로 채점하고 얼마나 틀렸나 확인해주는 것입니다. 첫번째 <code>t</code>에서 정답은 3번째=1)입니다. 그리고 <code>y</code>는 3번째가 정답일 확률을 0.6이라고 나타낸 것입니다. 이 때의 교차 엔트로피 오차값은 <code>0.51</code>입니다. 반면, 두번째와 같이 <code>t</code>에서 정답이 3번째(=1)인데, <code>y</code>는 3번째가 정답일 확률을 0.1로 나타냈더니, 교차 엔트로피 오차값은 <code>2.30</code>이 되었습니다. 정리하면, 오차율이 낮을 수록 교차 엔트로피 오차값이 낮아지며, 오차값이 낮을 수록 정확도가 높다는 것을 의미하게됩니다.</p><p>R에서는 다음과 같이 구현합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cross_entropy_error_single &lt;- <span class="keyword">function</span>(y, t) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">return</span>(-sum(t*<span class="built_in">log</span>(y+1e-7)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>마찬가지로 파이썬과 같이 <code>y</code>와 <code>t</code>값을 넣어보면 같은 결과를 확인할 수 있습니다.</p><p>지금까지 딥러닝 함수에서 기본적으로 사용하는 함수들을 파이썬과 R로 구현해보며 살펴 보았습니다.<br>기본 함수에 있어서는 언어 표현 방식의 차이일 뿐 같은 방식으로 구현하는 것을 확인할 수 있었습니다:)</p>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
          <category> DeepLearningFromForR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 딥러닝 </tag>
            
            <tag> project </tag>
            
            <tag> 역전파 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript 객체 지향[2] - class 상속/super/object 상속/__proto__ vs prototype</title>
      <link href="2020/04/12/book2-4/"/>
      <url>2020/04/12/book2-4/</url>
      
        <content type="html"><![CDATA[<br/><h3 id="1-class-상속"><a href="#1-class-상속" class="headerlink" title="1. class 상속"></a>1. class 상속</h3><p>클래스를 생성할 때 다른 클래스를 상속 받을 수 있는데, 새로 만들어지는 클래스가 자식 클래스, 상속하는 클래스가 부모 클래스가 된다. 자바스크립트에서 상속은 extends를 쓴다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class Person&#123;</span><br><span class="line">constructor(name, first, second)&#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">    this.first = first;</span><br><span class="line">    this.second = second;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="title">sum</span></span>()&#123;</span><br><span class="line">    <span class="built_in">return</span> this.first + this.second</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class PersonPlus extends Person&#123;</span><br><span class="line"><span class="function"><span class="title">avg</span></span>()&#123;</span><br><span class="line">    <span class="built_in">return</span> (this.first + this.second)/2;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var kim = new PersonPlus(<span class="string">'kim'</span>,10,20);</span><br><span class="line">console.log(<span class="string">"kim.sum()"</span>,kim.sum()); //kim.sum() 30</span><br><span class="line">console.log(<span class="string">"kim.avg()"</span>,kim.avg());  //kim.avg() 15</span><br></pre></td></tr></table></figure> <a id="more"></a> <p>PersonPlus 클래스에 sum()메서드가 없음에도 불구하고 kim 객체에 sum()을 호출하니 에러없이 결과값이 나왔다. 이는 PersonPlus의 부모 클래스 Person의 sum()메서드를 사용한 것이다. 약간 옆길로 새서 만약 Person과 PersonPlus 모두 sum()이 있었다면 PersonPlus 클래스의 sum()을 사용한다. 부모 클래스와 같은 함수명을 새로 정의하는 것을 오버라이딩이라고 한다.</p><h3 id="2-super"><a href="#2-super" class="headerlink" title="2. super"></a>2. super</h3><p>클래스를 생성할 때, 부모 클래스의 기능을 활용해서 메서드나 변수를 선언하고 싶다면 super를 사용하면 된다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">class Person&#123;</span><br><span class="line">    constructor(name, first, second)&#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.first = first;</span><br><span class="line">        this.second = second;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">sum</span></span>()&#123;</span><br><span class="line">        <span class="built_in">return</span> this.first+this.second;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class PersonPlus extends Person&#123;</span><br><span class="line">constructor(name,first,second,third)&#123;</span><br><span class="line">    super(name,first,second);</span><br><span class="line">        this.third = third;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="title">sum</span></span>()&#123;</span><br><span class="line">    <span class="built_in">return</span> super.sum() + this.third;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="title">avg</span></span>()&#123;</span><br><span class="line">    <span class="built_in">return</span> (super.sum() + this.third)/3;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var kim = new PersonPlus(<span class="string">'kim'</span>,10,20,30);</span><br><span class="line">console.log(<span class="string">"kim.sum()"</span>, kim.sum());  //kim.sum() 60</span><br><span class="line">console.log(<span class="string">"kim.avg()"</span>, kim.avg()); //kim.avg() 20</span><br></pre></td></tr></table></figure><p> PersonPlus constructor에 super()를 사용해서 Person constructor에 선언된 name,first,second 변수를 가져다 썼으며, 정의되지 않은 third는 새로 선언했다. 그리고 sum()과 avg메서드에서는 Person sum()메서드를 활용해서 함수를 정의하고 있다. </p><h3 id="3-object-상속"><a href="#3-object-상속" class="headerlink" title="3. object 상속"></a>3. object 상속</h3><p>중괄호{}로 표현하는 object도 상속이 가능하다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var superObj = &#123;superVal:<span class="string">'super'</span>&#125;;</span><br><span class="line"></span><br><span class="line">//case1</span><br><span class="line">var subObj = &#123;subVal:<span class="string">'sub'</span>&#125;;</span><br><span class="line">subObj.__proto__ = superObj;</span><br><span class="line"></span><br><span class="line">//case2</span><br><span class="line">var subObj = Object.create(superObj);</span><br><span class="line"></span><br><span class="line">//공통</span><br><span class="line">subObj.subVal = <span class="string">'sub'</span>;</span><br><span class="line">console.log(<span class="string">'subObj.subVal =&gt;'</span>, subObj.subVal); //subObj.subVal =&gt; sub</span><br><span class="line">console.log(<span class="string">'subObj.superVal =&gt;'</span>, subObj.superVal); //subObj.superVal =&gt; super</span><br><span class="line">subObj.superVal = <span class="string">'sub'</span>;</span><br><span class="line">console.log(<span class="string">'superObj.superVal =&gt;'</span>, superObj.superVal); //superObj.superVal =&gt; super</span><br></pre></td></tr></table></figure><p>case1과 case2의 결과값은 같다. superObj객체에는 superVal, subObj 객체에는 subVal이 있는데 상속을 통해 subObj에서도 superVal을 호출할 수 있었다. 단 subObj에서 superVal 값을 변경했을 때 subObj에서만 변경될 뿐, 참조하고 있는 SuperObj의 값은 변하지 않는다.</p><h3 id="4-95-95-proto-vs-prototype"><a href="#4-95-95-proto-vs-prototype" class="headerlink" title="4. &#95;&#95;proto__ vs prototype"></a>4. &#95;&#95;proto__ vs prototype</h3><p>객체가 생성될 때 객체가 참조하는 prototype 타입 객체도 함께 생성된다. 객체의 &#95;&#95;proto__는 prototype 객체를 참조하고, prototype 객체의 constructor 프로퍼티는 생성된 객체를 참조한다.</p><p>즉 서로가 서로를 참조하는 것이다.</p>]]></content>
      
      
      <categories>
          
          <category> Book </category>
          
          <category> 인사이드 자바스크립트 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> study </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>프로젝트 오픈!</title>
      <link href="2020/04/12/project1-1/"/>
      <url>2020/04/12/project1-1/</url>
      
        <content type="html"><![CDATA[<br/><p>손으로 쓴 숫자이미지를 판별하는 딥러닝을 R로만 구현하기 프로젝트를 1차 오픈했습니다.<br>앞으로 과정을 기록해 보겠습니다. 링크 공유드려요. 구경오세요 &#128513;<br>링크 : <a href="https://github.com/LOPES-HUFS/DeepLearningFromForR">https://github.com/LOPES-HUFS/DeepLearningFromForR</a></p>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
          <category> DeepLearningFromForR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 딥러닝 </tag>
            
            <tag> project </tag>
            
            <tag> 역전파 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 객체 지향[1] - this/constructor/prototype</title>
      <link href="2020/04/12/book2-3/"/>
      <url>2020/04/12/book2-3/</url>
      
        <content type="html"><![CDATA[<br/><p>자바스크립트는 객체지향 스크립트 언어이다.</p><p>객체지향을 내 기준에서 간단하게 설명하면 자주 사용하는 걸  구조화해놓는 것이다.</p><p>그러면 필요할 때마다 만들지 않아도 되고 이미 만들어진 걸 가져다 쓰기만 하면 된다.</p><p>여기서 미리 만들어 놓는다는 개념이 자바스크립트에서는 함수,클래스가 된다.</p>  <a id="more"></a> <p>자바스크립트가 객체지향 언어인 만큼 객체 관련 기능들을 제공한다. 이번에는 this, constructor, prototype을 알아본다.</p><p>*생활 코딩 javascript 객체지향 내용을 공부하며 정리한 것입니다.</p><p>1.this</p><ul><li>자신을 가리키는 특수한 키워드로 오브젝트, 클래스 안에서 선언한 변수 및 함수를 자기 안에서 호출할 때 사용한다.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">var fisrt = 5;</span><br><span class="line">var second = 10;</span><br><span class="line">var kim = &#123;</span><br><span class="line">name:<span class="string">"kim"</span>,</span><br><span class="line">    first:10,</span><br><span class="line">    second:20,</span><br><span class="line">    sum:<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    <span class="built_in">return</span> this.first+this.second;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var lee = &#123;</span><br><span class="line">name:<span class="string">"lee"</span>,</span><br><span class="line">    first:10,</span><br><span class="line">    second:20,</span><br><span class="line">    sum:<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    <span class="built_in">return</span> first+second;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line">    </span><br><span class="line"> console.log(<span class="string">"kim.sum()"</span>, kim.sum()); //kim.sum() 30</span><br><span class="line"> console.log(<span class="string">"lee.sum()"</span>, lee.sum()); //lee.sum() 15</span><br></pre></td></tr></table></figure><p>위 코드를 보면 kim은 오브젝트로써 name과 점수를 나타내는 first, second, 그리고 그 합계를 구하게 해주는 sum()이 있다. kim의 합계를 알고 싶을 때는 kim의 메서드 함수인 sum()을 호출해서 확인하면 된다. (= kim.sum())</p><p>sum()을 살펴보면, first, second 변수를 더한 값을 리턴하는데, 이 때 first, second 앞에 this가 붙어서 객체 안의 first, second 임을 명시하고 있다. 그렇기 때문에 리턴 값은 30 이 된다.</p><p>반면에, lee의 sum() this 없이 first와 second의 합을 리턴하고 있는데 결과 값은 30이 아닌 15가 된다.</p><p>lee 내의 first와 second가 아닌 전역변수의 fisrt, second의 합을 구했기 때문이다.</p><ol start="2"><li>생성자(constructor)</li></ol><p>만약 kim,lee 처럼 똑같은 구조를 가진 변수가 1억 개 필요하다고 한다면 1억 번 다 똑같이 정의해야 할까? 결국 1억 번을 다 정의했는데 3번째 점수인 third가 생긴다면 각각의 변수에 third를 추가하는 1억 번의 작업을 해야 할까? 같은 구조의 변수라면 구조를 미리 정의해놓고 가져다 쓸 수 있는데 그 방법이 constructor이다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> Person(name, first, second)&#123;</span><br><span class="line">    this.name=name;</span><br><span class="line">    this.first=first;</span><br><span class="line">    this.second=second;</span><br><span class="line">    this.sum = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        <span class="built_in">return</span> this.first+this.second;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var kim = new Person(<span class="string">'kim'</span>, 10, 20);</span><br><span class="line">var lee = new Person(<span class="string">'lee'</span>, 10, 10);</span><br><span class="line">console.log(<span class="string">"kim.sum()"</span>, kim.sum()); //kim.sum() 30</span><br><span class="line">console.log(<span class="string">"lee.sum()"</span>, lee.sum()); //lee.sum() 20</span><br></pre></td></tr></table></figure><p>먼저, 같은 구조를 정의하는 Person 함수를 만든다. 구조는 같아도 이름,점수는 다르기 때문에 값을 받는 파라미터도 추가한다. 그리고 Person 앞에 new를 붙이고 변수를 선언하면 된다. new를 붙이면 새로운 객체를 생성하는 생성자 함수가 된다.  즉, 함수로 객체를 생성한다는 말은 생성자 함수로 선언한다와 같다고 보면 된다.</p><p>third를 추가하고 싶으면 Person 내에다가 한 번만 추가하면 된다.</p><ol start="3"><li>prototype</li></ol><p>앞서 정의한 Person 함수에 new를 붙이면 함수로 객체(kim, lee)를 생성할 수 있었다. 그런데 생성자 함수를 호출할 때마다 공통적으로 사용하는 sum()을 계속 생성하는데, 이는 메모리를 차지하게 된다. 공통적으로 사용하는 함수는 한 번만 선언하어 좋지 않을까? 이럴 때 사용해 볼 수 있는 것이 prototype이다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> Person(name, first, second, third)&#123;</span><br><span class="line">    this.name=name;</span><br><span class="line">    this.first=first;</span><br><span class="line">    this.second=second;   </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">Person.prototype.sum = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    <span class="built_in">return</span> <span class="string">'prototype : '</span>+(this.first+this.second);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">var kim = new Person(<span class="string">'kim'</span>, 10, 20);</span><br><span class="line">kim.sum = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    <span class="built_in">return</span> <span class="string">'this : '</span>+(this.first+this.second);</span><br><span class="line">&#125;</span><br><span class="line">var lee = new Person(<span class="string">'lee'</span>, 10, 10);</span><br><span class="line">console.log(<span class="string">"kim.sum()"</span>, kim.sum());</span><br><span class="line">console.log(<span class="string">"lee.sum()"</span>, lee.sum());</span><br></pre></td></tr></table></figure><p>위 코드처럼 prototype을 사용해 sum 함수를 정의하면 된다. 그런데 저렇게 하면 Person에 sum()이 추가돼서 똑같아지는 거 아닌가 생각했는데, 확인해보니 아래와 같았다.</p><img src="/gallery/book2-3-1.jpg" width="400px" /><p>sum을 추가하고 나서 다시 확인해봤을 때 sum이 추가되지는 않았다…! 호오…</p><p>하지만 Person의 prototype을 확인해 보면, sum()이 정의되어 있다.</p><img src="/gallery/book2-3-2.jpg" width="400px" /><p>이 부분을 간단하게 설명하면 함수를 생성할 때 함수의 prototype object도 같이 생성되는데 생성자 함수로 만들어진 객체도 이 prototype에 접근할 수 있다. 그렇기 때문에 prototype의 속성을 사용할 수 있는 것이다. 여기서는 sum()이 된다.</p><p>생성자 함수로 객체가 여러 개 만들어져도 하나의 prototype을 공유하고 있기 때문에 공통적으로 적용할 수 있고 메모리를 객체 개수만큼 사용하지 않는다. </p><p>prototype은 내용이 많아 보여서 좀 더 알아봐야겠다.</p>]]></content>
      
      
      <categories>
          
          <category> Book </category>
          
          <category> 인사이드 자바스크립트 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> study </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 실행 컨텍스트</title>
      <link href="2020/04/12/book2-2/"/>
      <url>2020/04/12/book2-2/</url>
      
        <content type="html"><![CDATA[<br/><h3 id="1-실행-컨텍스트"><a href="#1-실행-컨텍스트" class="headerlink" title="1. 실행 컨텍스트"></a>1. 실행 컨텍스트</h3><p>특정 프로그램(크롬,엑셀…)을 실행하면 프로세스도 같이 실행되듯이 코드를 실행하면 실행 컨텍스트도 같이 실행된다. 코드 진행과 컨텍스트는 불가분의 관계이며, 컨텍스트에는드 실행 순서 등 실행에 필요한 메타 정보를 담고 있다.</p><p>컨텍스트 단위는 전역 코드에 대한 컨텍스트, 함수에 대한 컨텍스트, eval() 함수로 실행되는 코드로 나뉜다.</p><p>여기서는 전역 코드에 대한 컨텍스트, 함수에 대한 컨텍스트로 살펴 보겠다.</p> <a id="more"></a> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">console.log(<span class="string">"This is global context"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">ExContext1</span></span>()&#123;</span><br><span class="line">console.log(<span class="string">"This is ExContext1"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fucntion <span class="function"><span class="title">ExContext2</span></span>()&#123;</span><br><span class="line">ExContext1();</span><br><span class="line">    console.log(<span class="string">"This is ExContext2"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ExContext2();</span><br><span class="line"></span><br><span class="line">/*result</span><br><span class="line">This is global context</span><br><span class="line">This is ExContext1</span><br><span class="line">This is ExContext2</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p>컨텍스트는 실행전 스택으로 쌓이고 후입선출로 하나씩 실행된다. 위 코드로 순서를 살펴보면,</p><p>가장 먼저 전역 컨텍스트가 만들어지고  ExContext2() 컨텍스트, ExContext1() 컨텍스트가 만들어 지고 나서 실행과 종료를 거친 후 전역 실행 컨텍스트의 실행이 완료되면 모든 실행이 끝난다. </p><p>실행 컨텍스트 고려한 코드 실행 과정은 다음과 같다.</p><p>1) 활성 객체 생성</p><p>2) arguments 객체 생성</p><p>3) 스코프 정보 생성</p><p>4) 변수 생성</p><p>5) this 바인딩</p><p>6) 코드실행</p><p>1) 활성 객체 생성</p><ul><li>실행에 필요한 메타정보를 담고 있는 객체로, 사용자가 정의한 변수 및 객체를 저장하며 새로 만들어진 컨텍스트로 접근 가능하게 되어 있다.</li></ul><p>2) arguments 객체 생성</p><ul><li>arguments 객체는 함수를 호출할 때 넘긴 인자들이 배열 형태로 저장된 객체를 의미하며, 1)에서 만들어진 활성 객체가 arguments 객체를 참조한다.</li></ul><p>구체적으로 살펴보기 위해 아래처럼 add함수에 arguments객체를 찍어보면,</p><img src="/gallery/book2-2-1.jpg" width="400px" /><p>결과 값은 아래와 같다.</p><img src="/gallery/book2-2-2.jpg" width="400px" /><p>arguments객체를 살펴보면, 전달된 인자 값, 인자의 개수(length), 함수의 참조값(callee)를 확인할 수 있다.</p><p>3) 스코프 정보 생성</p><ul><li>컨텍스트의 유효 범위를 나타내는 스코프 정보를 생성한다. 유효 범위 안에서 변수와 함수가 존재한다. 예를 들어 C언어의 경우 if문,for문, 함수 안에서 선언된 변수는 해당 블록 안에서만 유효하므로 밖에서 접근할 수 없다.</li></ul><p>그러나 자바스크립트의 경우 for문,if문은 유효 범위가 없고 함수만이 유효 범위를 갖는다. 함수의 유효범위는 [[scope]]프로퍼티에서 정의되는데 각각의 함수는 [[scope]]프로퍼티로 컨텍스트의 스코프 체인을 참조한다. 정리하면 실행 컨텍스트는 실행된 함수의 [[scope]]프로퍼티를 기반으로 새로운 스코프 체인을 만든다.  </p><p>4) 변수 생성</p><ul><li>코드 실행에 사용되는 변수의 생성이 이루어진다. 함수 인자의 경우 각각의 프로퍼티가 만들어지고 그 값이 할당된다. 만약 값이 없다면 undefined가 할당 된다.</li></ul><p>5) this 바인딩</p><ul><li>this 키워드를 사용하는 값이 할당된다. 여기서 this가 참조하는 객체가 없으면 전역 객체를 참조한다.</li></ul><p>6) 코드 실행</p><p>코드 실행 ~^_^</p>]]></content>
      
      
      <categories>
          
          <category> Book </category>
          
          <category> 인사이드 자바스크립트 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> study </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 클로저</title>
      <link href="2020/04/12/book2-1/"/>
      <url>2020/04/12/book2-1/</url>
      
        <content type="html"><![CDATA[<br/><h3 id="1-클로저-이해"><a href="#1-클로저-이해" class="headerlink" title="1. 클로저 이해"></a>1. 클로저 이해</h3><p>클로저는 함수 안에 있는 함수이다. 함수 안에 있어서 외부 함수, 내부 함수(클로저)라고 구분해서 부른다. 클로저의 특징은 외부 함수의 변수를 참조한다는 점이다. 예제를 한 번 살펴보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">outerFunc</span></span>()&#123;</span><br><span class="line">var x = 10;</span><br><span class="line">    var innerFunc = <span class="function"><span class="title">function</span></span>() &#123;console.log(x);&#125;</span><br><span class="line">    <span class="built_in">return</span> innerFunc;</span><br><span class="line">    </span><br><span class="line">var inner = outerFunc();</span><br><span class="line">inner()</span><br><span class="line">//result</span><br><span class="line">//10</span><br></pre></td></tr></table></figure> <a id="more"></a> <p>예제에서 innerFunc() 함수가 클로저이다. inner 변수 객체를 생성한 뒤, inner()를 실행하면 outerFunc()이 끝나고 나서 innerFunc()을 실행시킨다. innerFunc()은 외부 함수인 outerFunc의 변수 x를 참조하여 10을 출력했다. outerFunc() 함수가 끝났음에도 변수 x를 참조하여 10을 출력한 것이다. 어떻게 가능할까?</p><p>이 원리를 스코프 체인으로 이해해 보면, innerFunc()의 [[scope]]가 outerFunc의 변수객체와 전역 객체를 가지기 때문이다.</p><p>다시 말해, outerFunc 실행 컨텍스트는 사라졌지만 outerFunc 변수 객체는 innerFunc()의 [[scope]]에 계속 남아있으므로 x를 출력할 수 있는 것이다. 그래서 클로저를 이미 생명 주기가 끝난 외부함수의 변수를 참조하는 함수라고 정의할 수 있다. 그리고 x와 같이 클로저로 참조되는 외부 변수를 자유 변수라고 한다.</p><h3 id="2-클로저-활용"><a href="#2-클로저-활용" class="headerlink" title="2. 클로저 활용"></a>2. 클로저 활용</h3><p>클로저는 성능 저하나 메모리 부담의 원인이 되기도 한다. 그럼에도 불구하고 고급 기술에서는 클로저가 많이 쓰이기 때문에 제대로 이해하고 활용하는 것이 중요하다. 클로저의 활용 예제를 살펴보자.</p><p>2-1) 특정 함수에 사용자가 정의한 객체의 메서드 연결하기</p><p>먼저 예제 하나를 살펴보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> HelloFunc(func)&#123;</span><br><span class="line">this.greeting = <span class="string">"hello"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HelloFunc.prototype.call = <span class="keyword">function</span>(func)&#123;</span><br><span class="line">func? func(this.greeting) : this.func(this.greeting);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var userFunc = <span class="keyword">function</span>(greeting)&#123;</span><br><span class="line">console.log(greeting);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var objHello = new HelloFunc();</span><br><span class="line">objHello.func = userFunc;</span><br><span class="line">objHello.call();</span><br><span class="line"></span><br><span class="line">//result</span><br><span class="line">hello</span><br></pre></td></tr></table></figure><p>예제의 실행 코드부터 보면 HelloFunc() 생성자 함수로 objHello 변수 객체를 생성했다.</p><p>objHello에 func 프로퍼티를 userFunc으로 할당했다.</p><p>objHello의 call함수를 실행시키면, HelloFunc에는 call함수가 없으므로 HelloFunc  prototype객체에서 찾는데</p><p>call 메서드가 있으므로 실행시킨다. call 함수 호출 시, 매개 변수가 없으므로 this.func(this.greeting)이 실행되며 func 프로퍼티는</p><p>userFunc이라고 정의했으므로 userFunc(this.greeting)이 실행되고 결과적으로 hello가 출력된다.</p><p>여기서 call함수가 받는 인자는 greeting하나뿐이다. 만약 call() 함수 변경 없이 인자를 더 넣어서 호출하려면 어떻게 해야 할까?</p><p>아래 예제를 보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> saySomething(obj, methodName, name)&#123;</span><br><span class="line"><span class="built_in">return</span> (<span class="keyword">function</span>(greeting)&#123;</span><br><span class="line">    <span class="built_in">return</span> obj[methodName](greeting, name);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> newObj(obj, name)&#123;</span><br><span class="line">obj.func = saySomething(this, <span class="string">"who"</span>, name);</span><br><span class="line">    <span class="built_in">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">newObj.prototype.who = <span class="keyword">function</span>(greeting, name)&#123;</span><br><span class="line">console.log(greeting + <span class="string">" "</span> + (name || <span class="string">"everyone"</span>) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var obj1 = new newObj(objHello, <span class="string">"zzoon"</span>);</span><br><span class="line">obj1.call();</span><br></pre></td></tr></table></figure><p>이번에는 newObj() 생성자 함수로 obj1 변수 객체를 생성했다.</p><p>매개변수 값으로 objHello 객체와 “zzoon” 문자를 전달했다. 그러면 objHello 객체의 func 프로퍼티로 saySomething(this,”who”,name);에서 반환되는 함수를 참조한다.</p><p>saySomething의 매개변수 값을 살펴보면,</p><p>obj = this로, newObject 객체</p><p>methodName = “who”</p><p>name = “zzoon” 이 된다.</p><p>그리고 function(greeting){} 함수를 반환하는 데 이것이 HelloFunc 객체의 func으로 참조된다.</p><p>결과적으로 bj1.call()로 실행되는 것은 newObj.prototype.who()가 된다.</p><h3 id="3-클로저-주의사항"><a href="#3-클로저-주의사항" class="headerlink" title="3. 클로저 주의사항"></a>3. 클로저 주의사항</h3><p>3-1) 자유 변수 값은 변경 가능하다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> outerFunc(argNum)&#123;</span><br><span class="line">var num = argNum;</span><br><span class="line">    <span class="built_in">return</span> <span class="keyword">function</span>(x)&#123;</span><br><span class="line">    num += x;</span><br><span class="line">        console.log(<span class="string">'num: '</span> + num);</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> var exam = outerFunc(40);</span><br><span class="line"> exam(5);</span><br><span class="line"> exam(-10);</span><br><span class="line">     </span><br><span class="line">//result</span><br><span class="line">//45</span><br><span class="line">//35</span><br></pre></td></tr></table></figure><p>자유 변수 num의 값은 계속 변화하기 때문에 주의해야 한다.</p><p>3-2) 루프 안에서 사용할 때</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> countSeconds(howMany)&#123;</span><br><span class="line"><span class="keyword">for</span>(var i = 1;i &lt;= howMany; i++)&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        console.log(i);</span><br><span class="line">        &#125;, i * 1000);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">countSeconds(3);</span><br></pre></td></tr></table></figure><p>1, 2, 3을 1초 간격으로 출력하는 예제이지만 결과는 4가 연속 3번 1초 간격으로 출력된다.</p><p>왜냐하면 setTimeout 함수의 인자로 들어가는 함수는 자유 변수 i를 참조한다. 하지만 setTimeout함수가 실행되는 시점은 countSeconds() 함수의 실행이 종료된 이후이고, i 값은 이미 4가 된 상태이다 그러므로 모두 4를 출력하게 된다.</p><p>원하는 결과를 얻고 싶으면 아래와 같이 하면 된다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> countSeconds(howMany)&#123;</span><br><span class="line"><span class="keyword">for</span> (var i = 1; i &lt;= howMany; i++) &#123;</span><br><span class="line">    (<span class="keyword">function</span> (currentI) &#123; </span><br><span class="line">        setTimeout(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">            console.log(currentI);</span><br><span class="line">            &#125;, currentI * 1000);</span><br><span class="line">        &#125;(i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">countSeconds(3);</span><br></pre></td></tr></table></figure><p>구현 방법은 (function ( currentI){})라는 함수를 정의함과 동시에 바로 실행되는 즉시 실행 함수(immediate function)로 setTimeout을 감싸는 것이다. 루프 i 값을 currentI에 복사해 사용하면 원하는 결과를 얻을 수 있다.</p><p>끝 ^_^</p>]]></content>
      
      
      <categories>
          
          <category> Book </category>
          
          <category> 인사이드 자바스크립트 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> study </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CH5. 신경망 학습하기-2 (경사하강법)</title>
      <link href="2020/04/11/book1-4/"/>
      <url>2020/04/11/book1-4/</url>
      
        <content type="html"><![CDATA[<p>지난 챕터에서는 데이터를 예측하고 예측 값에 대한 손실함수 구하기를 살펴보았다. </p><p>지난 챕터 바로가기 : <a href="https://myphiloprogramming.tistory.com/22">https://myphiloprogramming.tistory.com/22</a></p><p>다음 순서를 계속 진행해보자.</p><ol start="4"><li><p>경사하강법으로 가중치 값 개선하기</p><a id="more"></a> </li></ol><p>우리는 손실 함수 값을 줄여나감으로써 최적의 매개변수를 찾는다. 손실 함수 값을 줄이는 방법으로는 경사하강법을 사용하는데,</p><p>적용하기 전에 그 방법을 이해해보자.</p><p>먼저, 손실 함수값을 좌표 위에 찍어서 현재 위치를 확인한다. 적기로는 좌표 위에 점을 찍는다고 했지만, 실제로 차원은 가중치 매개변수 개수 만큼 있기 때문에 그릴수도, 그래프의 모양을 확인할 수도 없다.  적당히 이해하기로는 x축은 가중치 매개변수 개수 만큼있고 y축은 손실함수 값이 된다. 그림으로 나타내보면 다음과 같다.(이 그림은 이해를 돕기 위할 뿐이며 실제로는 그림으로 나타낼 수도 없다.)</p> <img src="/gallery/book1-4-1.jpg" width="400px" /><p>전체 그래프를 모르기 때문에 어디가 손실함수 값의 최솟값인지 짐작할 수 없다. 이런 상황에서 기울기를 이용해 최솟값을 찾으려는 것이 경사법이다. 기울어진 방향에 꼭 최솟값이 있는 것은 아니지만 그 방향으로 갔을 때 손실함수 값을 줄일 수 있다. 그래서 기울기를 단서로 나아갈 방향을 정하게 된다. 기울기는 아래 그림처럼 방향을 가진 벡터로 그려진다.</p> <img src="/gallery/book1-4-2.jpg" width="400px" /><p>기울기<br>화살표를 보면 한 곳을 향하고 있는데, 이 때 가리키는 위치가 가장 최솟값이 된다. 정리하면 현재 위치에서 기울기를 구한 후, 손실함수 값이 낮아지는 방향으로 이동한다.</p><p>경사하강법은 현 위치에서 기울어진 방향으로 일정 거리만큼이동한다. 그런 다음 이동한 곳에서 기울기를 한번 더 구하고 또 기울어진 방향으로 나아가기를 반복함으로써 최솟값을 찾아나간다. </p><p>경사하강법을 구현하면 다음과 같다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">def numerical_gradient(f, x):</span><br><span class="line">    h = 1e-4</span><br><span class="line">    grad = np.zeros_like(x)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> range(x.size):</span><br><span class="line">        tmp_val = x[idx]</span><br><span class="line">        x[idx] = tmp_val + h</span><br><span class="line">        fxh1 = f(x)</span><br><span class="line">        </span><br><span class="line">        x[idx] = tmp_val - h</span><br><span class="line">        fxh2 = f(x)</span><br><span class="line">        </span><br><span class="line">        grad[idx] = (fxh1 - fxh2) / (2*h)</span><br><span class="line">        x[idx] = tmp_val</span><br><span class="line">        </span><br><span class="line">    <span class="built_in">return</span> grad</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def gradient_descent(f, init_x, lr=0.01, step_num=100):</span><br><span class="line">    x = init_x</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(step_num):</span><br><span class="line">        grad = numerical_gradient(f,x)</span><br><span class="line">        x -= lr * grad</span><br><span class="line">    <span class="built_in">return</span> x</span><br></pre></td></tr></table></figure><p>gradient_descent함수의 파라미터를 살펴보면, f는 최적화하려는 함수, init_x는 초깃값, lr은 학습률, step_num은 반복 횟수를 의미한다.</p><p>그리고 numerical_gradient 함수는 기울기를 구한다.</p><p>init_x = np.array([-3.0, 4.0])<br>gradient_descent(function_2, init_x=init_x, lr=0.1, step_num=100)</p><p>gradient_descent 함수 실행 결과<br>gradient_descent함수를 사용하면 step_num만큼 반복하면서 찾은 최솟값의 위치를 리턴한다. 다시 말해, 손실함수가 최솟값이 되는 매개변수 값을 리턴한다. 위 예시에서는 초기 매개변수로 [-3.0, 4.0]을 넣었더니, [-6.11e-10, 8.14e-10] 결과가 반환됐다.</p><ol start="5"><li>2,3,4 반복하며 최적값 찾기</li></ol><p>gradient_descent 함수가 리턴한 값은 개선된 가중치 값이다. 이제 이 값을 가지고 다시 숫자 이미지를 맞춘다. 다시 배치 데이터를 뽑고 새로 갱신된 가중치 값으로 예측한 후, 새로운 손실함수 값을 또 최소화도록 경사하강법을 적용한다. 이렇게 이 과정을 반복하면서 가중치 최적값을 찾아나간다.</p><p>1번부터 5번까지에 대한 전체 코드는 다음과 같다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line">class TwoLayerNet:</span><br><span class="line">    def __init__(self, input_size, hidden_size, output_size, weight_init_std=0.01):</span><br><span class="line">        <span class="comment">#가중치 초기화</span></span><br><span class="line">        self.params = &#123;&#125;</span><br><span class="line">        self.params[<span class="string">'W1'</span>] = weight_init_std * \</span><br><span class="line">                            np.random.randn(input_size, hidden_size)</span><br><span class="line">        self.params[<span class="string">'b1'</span>] = np.zeros(hidden_size)</span><br><span class="line">        self.params[<span class="string">'W2'</span>] = weight_init_std * \</span><br><span class="line">                            np.random.randn(hidden_size, output_size)</span><br><span class="line">        self.params[<span class="string">'b2'</span>] = np.zeros(output_size)</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    def predict(self, x):</span><br><span class="line">        W1, W2 = self.params[<span class="string">'W1'</span>], self.params[<span class="string">'W2'</span>]</span><br><span class="line">        b1, b2 = self.params[<span class="string">'b1'</span>], self.params[<span class="string">'b2'</span>]</span><br><span class="line">        </span><br><span class="line">        a1 = np.dot(x, W1) + b1</span><br><span class="line">        z1 = sigmoid(a1)</span><br><span class="line">        a2 = np.dot(z1, W2) + b2</span><br><span class="line">        y = softmax(a2)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">return</span> y</span><br><span class="line">    </span><br><span class="line">    def loss(self, x, t):</span><br><span class="line">        y = self.predict(x)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">return</span> cross_entropy_error(y, t)</span><br><span class="line">    </span><br><span class="line">    def accuracy(self, x, t):</span><br><span class="line">        y = self.predict(x)</span><br><span class="line">        y = np.argmax(y, axis=1)</span><br><span class="line">        t = np.argmax(t, axis=1)</span><br><span class="line">        </span><br><span class="line">        accuracy = np.sum(y==t) / <span class="built_in">float</span>(x.shape[0])</span><br><span class="line">        <span class="built_in">return</span> accuracy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def numerical_gradient(self, x, t):</span><br><span class="line">        loss_W = lambda W: self.loss(x,t)</span><br><span class="line">        </span><br><span class="line">        grads = &#123;&#125;</span><br><span class="line">        grads[<span class="string">'W1'</span>] = numerical_gradient(loss_W, self.params[<span class="string">'W1'</span>])</span><br><span class="line">        grads[<span class="string">'b1'</span>] = numerical_gradient(loss_W, self.params[<span class="string">'b1'</span>])    </span><br><span class="line">        grads[<span class="string">'W2'</span>] = numerical_gradient(loss_W, self.params[<span class="string">'W2'</span>])</span><br><span class="line">        grads[<span class="string">'b2'</span>] = numerical_gradient(loss_W, self.params[<span class="string">'b2'</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">return</span> grads</span><br><span class="line"><span class="comment">#미니 배치</span></span><br><span class="line">(x_train, t_train), (x_test, t_test) = \</span><br><span class="line">    load_mnist(normalize=True, one_hot_label=True)</span><br><span class="line"></span><br><span class="line">train_loss_list = []</span><br><span class="line"></span><br><span class="line">iters_num = 10000</span><br><span class="line">train_size = x_train.shape[0]</span><br><span class="line">batch_size = 100</span><br><span class="line">learning_rate = 0.1</span><br><span class="line"></span><br><span class="line">network = TwoLayerNet(input_size=784, hidden_size=50, output_size=10)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(iters_num):</span><br><span class="line">    batch_mask = np.random.choice(train_size, batch_size)</span><br><span class="line">    x_batch = x_train[batch_mask]</span><br><span class="line">    t_batch = t_train[batch_mask]</span><br><span class="line">    </span><br><span class="line">    grad = network.numerical_gradient(x_batch, t_batch)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> (<span class="string">'W1'</span>,<span class="string">'b1'</span>,<span class="string">'W2'</span>,<span class="string">'b2'</span>):</span><br><span class="line">        network.params[key] -= learning_rate * grad[key]</span><br><span class="line">        </span><br><span class="line">    loss = network.loss(x_batch, t_batch)</span><br><span class="line">    train_loss_list.append(loss)</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">6. 테스트 데이터로 성능 테스트 해보기</span><br><span class="line"></span><br><span class="line">이로써 신경망 구현이 끝났다. 이제 테스트 데이터를 적용해서 정확도를 확인해보자.</span><br><span class="line"></span><br><span class="line">테스트 코드는 다음과 같다.</span><br><span class="line">``` bash</span><br><span class="line">(x_train, t_train), (x_test, t_test) = \</span><br><span class="line">    load_mnist(normalize=True, one_hot_label=True)</span><br><span class="line"></span><br><span class="line">network = TwoLayerNet(input_size=784, hidden_size=50, output_size=10)</span><br><span class="line"></span><br><span class="line">iters_num = 10000</span><br><span class="line">train_size = x_train.shape[0]</span><br><span class="line">batch_size = 100</span><br><span class="line">learning_rate = 0.1</span><br><span class="line"></span><br><span class="line">train_loss_list = []</span><br><span class="line">train_acc_list = []</span><br><span class="line">test_acc_list = []</span><br><span class="line"></span><br><span class="line">iters_per_epoch = max(train_size / batch_size, 1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(iters_num):</span><br><span class="line">    batch_mask = np.random.choice(train_size, batch_size)</span><br><span class="line">    x_batch = x_train[batch_mask]</span><br><span class="line">    t_batch = t_train[bathc_mask]</span><br><span class="line">    </span><br><span class="line">    grad = network.numerical_gradient(x_bathc, t_batch)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> (<span class="string">'W1'</span>,<span class="string">'b1'</span>,<span class="string">'W2'</span>,<span class="string">'b2'</span>):</span><br><span class="line">        network.params[key] -= learning_rate * grad[key]</span><br><span class="line">        </span><br><span class="line">    loss = network.loss(x_batch, t_batch)</span><br><span class="line">    train_loss_list.append(loss)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> i % iter_per_epoch == 0:</span><br><span class="line">        train_acc = network.accuracy(x_train, t_train)</span><br><span class="line">        test_acc = network.accuracy(x_test, t_test)</span><br><span class="line">        train_acc_list.append(train_acc)</span><br><span class="line">        test_acc_list.append(test_acc)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"train acc, test acc |"</span> + str(train_acc) + <span class="string">", "</span> + str(test_acc))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Book </category>
          
          <category> 밑바닥부터 시작하는 딥러닝 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 딥러닝 </tag>
            
            <tag> study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CH4. 신경망 학습하기-1 (손실함수, 교차엔트로피오차)</title>
      <link href="2020/04/11/book1-3/"/>
      <url>2020/04/11/book1-3/</url>
      
        <content type="html"><![CDATA[<p>이번 챕터에서는 신경망 학습 방법에 대해 알아본다. 우리는 “5”라고 쓴 손글씨 이미지를 입력하면 컴퓨터가 “5”라고 인식하는 모델을 만들고 싶다. 이 모델을 만들기 위해서 신경망을 학습시킬 것이다. (이를 모델링이라고도 한다.) 신경망은 학습을 통해 손글씨 값을 가장 잘 인식하는 가중치와 편향의 최적값을 찾아준다. 우리는 최적값을 가지고 숫자를 얼마나 잘 맞추는지 성능을 테스트 할 것이다.</p><p>우리가 사용할 데이터는 MNIST 패키지의 손글씨 이미지이다. 이미지는 다음과 같다.<br> <a id="more"></a> </p> <img src="/gallery/book1-3-1.jpg" width="200px" /><p>손글씨로 쓴 숫자 5의 이미지이다. 이미지를 넘파이 배열로 변환하여 학습시킬 것이다. 해당 이미지는 28 * 28 사이즈로, 픽셀별로 쪼개어 배열로 만든다. 회색조 이미지에서 각 픽셀은 색상에 따라 0에서 255까지의 값을 취한다. 위 이미지를 배열로 만들면 아래와 같으며 배열의 shape는 (1,784)이다.</p> <img src="/gallery/book1-3-2.jpg" width="400px" /><p>하나의 데이터는 위의 배열과 같다. 이제 신경망 학습법을 살펴보자.</p><p>(데이터 전처리는 따로 또 포스팅할 예정입니다.)</p><p>신경망 학습 절차는 아래와 같다. 우리는 이 과정을 짚어보며 신경망 학습 방법을 이해할 것이다.</p><ol><li>훈련데이터와 시험데이터 분리</li><li>훈련데이터 중 배치 돌릴 배치 데이터 랜덤 선택</li><li>배치 데이터로 손실함수 값 구하기</li><li>경사하강법으로 가중치 값 개선하기</li><li>2,3,4 반복하며 최적값 찾기</li><li>테스트 데이터로 성능 테스트 해보기</li></ol><ol><li><p>훈련데이터와 시험데이터 분리</p><p>MNIST 패키지의 손글씨 이미지는 7만장이다. 7만장을 훈련데이터와 시험데이터로 나눠 학습과 성능 테스트를 수행할 것이다. 훈련 데이터를 사용하여 최적의 매개변수를 찾은 다음, 시험데이터로 성능 테스트를 진행한다. 이는 범용능력을 위한 것으로, 다른 데이터가 들어왔을 때도 효과적인 값을 출력하는지 테스트하기 위함이다. 만약, 학습모델이 훈련데이터는 정확히 맞추더라도 시험데이터가 들어왔을 때 엉망이라면, 이 모델은 다른 데이터에는 사용할 수 없을 것이다. 이처럼 특정데이텅에 맞춰서 만들어진 모델을 오버피팅이라고 하며, 이 문제를 방지하기 위해 훈련데이터와 시험데이터를 분리한다. 여기서는 훈련데이터 6만장, 시험데이터를 1만장으로 분리할 것이다. 데이터를 분리하는 코드는 아래와 같다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import sys, os</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">path = <span class="string">"./deep-learning-from-scratch-master"</span></span><br><span class="line">sys.path.append(path)</span><br><span class="line"></span><br><span class="line">from dataset.mnist import load_mnist</span><br><span class="line"></span><br><span class="line">(x_train, t_train), (x_test, t_test) = \</span><br><span class="line">    load_mnist(normalize=True, one_hot_label=True)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"x_train shape is: "</span>+ str(x_train.shape)) <span class="comment">#훈련데이터</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"t_train shape is: "</span>+ str(t_train.shape)) <span class="comment">#훈련데이터 레이블</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"x_test shape is: "</span>+ str(x_test.shape))   <span class="comment">#시험데이터</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"t_test shape is: "</span>+ str(t_test.shape))   <span class="comment">#시험데이터 레이블</span></span><br></pre></td></tr></table></figure><img src="/gallery/book1-3-5.jpg" width="400px" /></li></ol><p>여기서 x_train과 x_test는 훈련데이터, 시험데이터이다. 한장 데이터의 shape는 (1, 784)인데, 6만장이 있으므로 (60000, 784)이다. 시험데이터는 1만장이므로 (10000,784)이다. 그리고 t_train과 t_test는 각각 훈련데이터 레이블과 시험데이터 레이블이다. 레이블은 정답표를 배열로 나타낸 것이다. 만약 특정 손글씨 숫자의 실제값이 “2”라면, 레이블은 [0,0,1,0,0,0,0,0,0,0]가 된다. 맨 앞에서부터 0,1,2 …9까지 총 10개의 정답표이며 실제 값에만 1을 표시한다. 하나의 정답 레이블의 shape는 (1,10)이며 이미지만큼 정답표가 있기 때문에 (60000,10),(10000,10)이다.</p><ol start="2"><li><p>훈련데이터 중 배치 돌릴 배치 데이터 랜덤 선택</p><p>훈련 데이터 x_train은 6만개이다. 6만개 전체를 학습 한 번에 전부 사용하면 시간이 너무 오래 걸린다. 더 많은 데이터의 경우 그 시간은 더 오래 걸릴 것이다. 이런 경우 데이터 일부를 추려 전체의 근사치로 사용한다. 가령 6만개의 훈련 데이터 중에서 100개를 무작위로 뽑아 그 100개 만을 사용하여 학습하고 다시 또 100개를 추출하여 학습하는 것을 반복한다. 이러한 학습 방법을 미니 배치 학습이라고 한다. 이렇게 무작위로 추출한 데이터를 배치 데이터라고 부르겠다. 훈련 데이터에서 지정한 수의 데이터를 무작위로 골라오는 코드를 작성해 보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">train_size = x_train.shape[0]</span><br><span class="line">batch_size = 100</span><br><span class="line">batch_mask = np.random.choice(train_size, batch_size)</span><br><span class="line">x_batch = x_train[batch_mask]</span><br><span class="line">t_batch = t_train[batch_mask]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(batch_mask)</span><br></pre></td></tr></table></figure><img src="/gallery/book1-3-6.jpg" width="400px" /></li><li><p>배치 데이터로 손실함수 값 구하기</p></li></ol><p>학습에 사용할 데이터 추출까지 모두 끝났다. 이제는 이 배치 데이터를 가지고 이미지 데이터의 숫자값을 예측한 후, 손실함수 값을 구할 것이다. 먼저 이미지 데이터 예측부터 살펴보자. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">W = np.random.randn(784,10)</span><br><span class="line">def predict(x):</span><br><span class="line">    <span class="built_in">return</span> np.dot(x, W)</span><br></pre></td></tr></table></figure><p>W는 가중치 매개변수로, 신경망의 최종목표인 가중치 최적값 찾기가 바로 이 W 변수이다. 신경망은 학습을 통해 W변수의 최적값을 찾을 것이다. 첫 예측에는 가중치 값이 없으므로 정규분포 값으로 랜덤추출하였다. 입력할 배치 데이터의 shape는 (100, 784)이므로 이미지당 예측값을 추정하기 위해서 가중치는 (784,10)형태여야 한다. 이는 행렬 곱을 위해서는 앞 행렬의 열과 뒤 행렬의 행이 같아야 하는 계산 방식 때문이다. 이렇게 하면 예측값의 shape는 (100,10)이며 이는 원소가 10개인 리스트가 100행이 있음을 의미한다. 다시 말해 predict()함수의 리턴 값의 shape는 (100,10)이 된다.</p><img src="/gallery/book1-3-3.jpg" width="400px" /><p>앞서 구한 배치 데이터(x_batch)를 가지고 predict 리턴 값의 한 줄을 출력해보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">predict(x_batch)[0]</span><br></pre></td></tr></table></figure><img src="/gallery/book1-3-7.jpg" width="400px" /><p>위 배열이 신경망이 이미지 데이터를 보고 생성한 추정치이다. 이 추정치가 100개가 있다. 추정치를 설명하면, 이미지 데이터가 0일 가능성이 14, 1일 가능성이 11, 9일 가능성이 10을 나타낸다. 그러면 최종 선택은 요소 중 가장 큰 값으로 숫자를 추정한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.argmax(predict(x_batch)[0])</span><br></pre></td></tr></table></figure><img src="/gallery/book1-3-8.jpg" width="400px" /><p>최종적으로 신경망이 추정한 값<br>여기서는 0일 때의 추정치가 값이 제일크기 때문에 이미지 데이터를 0으로 추정했다고 본다. 여기까지가 신경망의 예측이다. 이제 우리는 손실함수로 이 신경망의 성능이 얼마나 나쁜지 확인할 것이다.</p><p>손실함수</p><p>먼저, 손실함수란 신경망 성능의 ‘나쁨’을 나타내는 지표이다. 성능의 나쁨을 나타내는 손실함수의 값이 가장 작은 곳에 가중치 최적값이 있다. 신경망은 손실함수가 최저가 되게 만드는 가중치 값을 찾는다. 손실함수로는 오차제곱합과 교차 엔트로피 오차가 있는데 가장 유명한 교차 엔트로피 오차만 살펴 보겠다.</p><p>교차 엔트로피 오차</p><p>교차엔트로피오차 식은 다음과 같다. </p><img src="/gallery/book1-3-4.jpg" width="400px" /><p>여기서 log는 자연로그이며 yk는 신경망이 학습을 통해 이미지를 추정한 값, tk는 앞서 살펴본 정답레이블이다. 예를 들면 다음과 같다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t = [0,0,1,0,0,0,0,0,0,0]</span><br><span class="line">y = [0.1, 0.05, 0.6, 0.0, 0.05, 0.1, 0.0, 0.1, 0.0, 0.0]</span><br><span class="line"><span class="comment">#참고 : t, y값은 예시를 위해 직접 작성한 값입니다.</span></span><br></pre></td></tr></table></figure><p> 변수 t는 정답레이블로, 손글씨 데이터의 실제 숫자가 “2”임을 의미한다. 이는 원-핫 인코딩 방식으로 정답에 해당하는 값만 1로 나타낸 것이다. 그리고 변수 y는 신경망이 학습을 통해 이미지를 추정한 값이다. 0.6이 제일 높으므로 신경망은 손글씨 이미지가 “2”라고 추정하고 있다.</p><p>교차 엔트로피 오차 식을 다시 살펴보면, 정답레이블(tk)을 곱하기 때문에 답이 아닌경우(=tk가 0인 경우) 는 값이 0이고 정답인 경우에만 값이 있으므로 실질적으로 정답일 때의 자연로그를 계산하는 식이 된다. 교차 엔트로피 오차 수식은 다음과 같이 구현한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">def cross_entropy_error(y, t):</span><br><span class="line">    delta = 1e-7</span><br><span class="line">    <span class="built_in">return</span> -np.sum(t * np.log(y + delta))</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">cross_entropy_error(np.array(y), np.array(t))</span><br></pre></td></tr></table></figure><img src="/gallery/book1-3-9.jpg" width="200px" /><p>2가 정답일 때 신경망의 추정치는 0.6이며 이 때의 교차 엔트로피 오차는 약 0.51이다. 하나 더 살펴보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">y = [0.1, 0.05, 0.2, 0.1, 0.05, 0.1, 0.1, 0.1, 0.1, 0.1]</span><br><span class="line"></span><br><span class="line">cross_entropy_error(np.array(y), np.array(t))</span><br></pre></td></tr></table></figure><img src="/gallery/book1-3-10.jpg" width="200px" /><p>이번에는 2가 정답일 때 2에 대한 신경망의 추정치는 0.2이다. 이 때의 교차 엔트로피 오차는 1.61이다. 추정치가 정답과 멀어질수록 오차값이 큰 것을 알 수 있다.</p><p>여기까지 전체 데이터를 훈련데이터와 시험데이터로 분리하고 훈련데이터에서 배치 데이터 100개을 랜덤 추출했다. 그리고 이 배치 데이터를 예측하여 예측 값에 대한 손실함수를 구하는 것까지 살펴보았다.</p><p>다음 챕터에서 이 손실함수 예측값을 갖고 가중치 매개변수 최적값을 구하는 방법을 살펴볼 것이다. 그럼 안뇽~!</p>]]></content>
      
      
      <categories>
          
          <category> Book </category>
          
          <category> 밑바닥부터 시작하는 딥러닝 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 딥러닝 </tag>
            
            <tag> study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CH3. 딥러닝의 시작2, 신경망 - 활성화 함수</title>
      <link href="2020/04/11/book1-2/"/>
      <url>2020/04/11/book1-2/</url>
      
        <content type="html"><![CDATA[<p>앞선 글에서 퍼셉트론, 가중치, 편향, 비선형, 다중퍼셉트론을 살펴보았다. 퍼셉트론 식을 구현하는 데 있어 가중치와 편향을 적절한 값으로 직접 설정했다. 그러나 층이 많아질수록 직접 설정할 수 없을 것이다. 신경망은 학습을 통해 가중치, 편향에 대한 적절한 값을 찾아준다.</p><h4 id="신경망"><a href="#신경망" class="headerlink" title="신경망"></a>신경망</h4> <img src="/gallery/book1-2-1.jpg" width="300px" /><h4 id="신경망-네트워크"><a href="#신경망-네트워크" class="headerlink" title="신경망 네트워크"></a>신경망 네트워크</h4><p>신경망 네트워크는 입력층 - 은닉층 - 출력층으로 구성되는데, 은닉층의 경우 처리 과정을 확인할 수 없다.</p><p>신경망의 구조는 다층 퍼셉트론과 유사하다. 퍼셉트론에서 신경망으로 나아가 보자.</p><a id="more"></a> <p>앞서 정의한 퍼셉트론 식을 다시 보자.</p> <img src="/gallery/book1-2-2.jpg" width="600px" /><h4 id="단층-퍼셉트론-식"><a href="#단층-퍼셉트론-식" class="headerlink" title="단층 퍼셉트론 식"></a>단층 퍼셉트론 식</h4><p>x1,x2는 입력신호, w1,w2는 가중치, b는 편향이다. 이 3가지를 네트워크로 나타내보자.</p> <img src="/gallery/book1-2-3.jpg" width="400px" /><h4 id="단층-퍼셉트론-네트워크"><a href="#단층-퍼셉트론-네트워크" class="headerlink" title="단층 퍼셉트론 네트워크"></a>단층 퍼셉트론 네트워크</h4><p>익숙한 그림이지만 편향이 추가됐다. 이 그림은 위 퍼셉트론 식을 1<em>b + w1</em>x1 + w2*x2라고 풀어서 나타낸 것이다.</p><p>우리는 이 식을 새로 정의하여 아래처럼 간략화할 수 있다.</p> <img src="/gallery/book1-2-4.jpg" width="400px" /><p>이 식을 설명하면 기존의 계산식(b+w1x1+w2x2)이 h(x) 함수를 거쳐 출력신호 y를 반환한다. 이 때, h(x)함수는 입력이 0을 넘으면 1을 반환하고 있다. h(x)함수는 활성화 함수라 부르며, 입력 신호의 총합을 처리하여 출력 값을 정하는 역할을 한다. </p><p>다시 말해, 기존의 단층 퍼셉트론 식은 입력신호의 총합을 갖고 출력신호를 반환했지만, 이제는 입력신호의 총합이 활성화 함수를 거쳐서 출력신호를 반환한다.</p><p>이렇게 활성화 함수를 추가하는 이유는 비선형성을 추가하기 위함이다. 바로 살펴보겠지만 활성화 함수들은 모두 비선형성 함수이다. 활성화 함수가 선형 함수라면 층을 깊게 하는 의미가 없어진다. 왜냐하면 복합함수로 설명될 수 있기 때문이다. f(x) * f(x) * f(x) 이런 식으로…</p><p>즉, 은닉층이 없는 네트워크가 된다. 그래서 다층 퍼셉트론에서는 활성화 함수가 필요하다.</p><p>활성화 함수를 네트워크 그림에 포함하면 아래와 같다.<br> <img src="/gallery/book1-2-5.jpg" width="400px" /></p><p>입력 신호의 총합(a)은 활성화함수(h())를 거쳐 출력값(y)를 반환한다.</p><h4 id="활성화-함수"><a href="#활성화-함수" class="headerlink" title="활성화 함수"></a>활성화 함수</h4><p>활성화 함수의 역할을 하는 함수가 여럿있는데 대표적으로는 계단함수, 시그모이드함수, ReLu함수가 있다. 이 함수가 어떻게 활성화시키는지 살펴보자.</p><h4 id="계단-함수"><a href="#계단-함수" class="headerlink" title="계단 함수"></a>계단 함수</h4><p> 계단 함수는 임계값 이전에는 출력값이 0이 었다가 임계값을 넘으면 1이 되는 함수이다. 계단 함수를 구현한 식은 아래와 같다. 여기서 임계값은 0이다.</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">def step_function(x):</span><br><span class="line">    <span class="built_in">return</span> np.array(x&gt;0, dtype=np.int)</span><br></pre></td></tr></table></figure><p>구현한 식을 가지고 그래프를 그려보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pylab as plt</span><br><span class="line"></span><br><span class="line">x = np.arange(-5.0, 5.0, 0.1)</span><br><span class="line">y = step_function(x)</span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.ylim(-0.1, 1.1)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure> <img src="/gallery/book1-2-6.jpg" width="600px" /><h4 id="계단-함수-그래프"><a href="#계단-함수-그래프" class="headerlink" title="계단 함수 그래프"></a>계단 함수 그래프</h4><p>그래프와 같이 x &lt;= 0 이면, y값은 계속 0이다가, x &gt; 0 이면 y값이 1이 된다. 앞서 언급한 단층 퍼셉트론이 이 경우에 해당한다.</p><h4 id="시그모이드-함수"><a href="#시그모이드-함수" class="headerlink" title="시그모이드 함수"></a>시그모이드 함수</h4><p> 시그모이드 함수는 신경망에서 자주 이용하는 활성화 함수로 수식은 다음과 같다. exp()는 지수함수를 의미한다.</p> <img src="/gallery/book1-2-7.jpg" width="300px" /><p>시그모이드 함수는 아래와 같이 구현할 수 있다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def sigmoid(x):</span><br><span class="line">    <span class="built_in">return</span> 1/ (1+np.exp(-x))</span><br></pre></td></tr></table></figure><p>시그모이드 함수를 그래프로 나타내보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(-5.0, 5.0, 0.1)</span><br><span class="line">y = sigmoid(x)</span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.ylim(-0.1, 1.1)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure> <img src="/gallery/book1-2-8.jpg" width="600px" /><p>계단함수처럼 이분적이지 않고 x값에 따라 y값이 계속 달라진다. </p><h4 id="ReLu-함수"><a href="#ReLu-함수" class="headerlink" title="ReLu 함수"></a>ReLu 함수</h4><p>ReLu 함수도 신경망에서 주로 이용하는 함수중 하나로, 입력이 0을 넘으면 입력을 그대로 출력하고 0이하이면 0을 출력한다.</p><p>수식과 그래프는 다음과 같다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def relu(x):</span><br><span class="line">    <span class="built_in">return</span> np.maximum(0, x)</span><br><span class="line">x = np.arange(-5.0, 5.0, 0.1)</span><br><span class="line">y = relu(x)</span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.ylim(-0.1, 1.1)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure> <img src="/gallery/book1-2-9.jpg" width="600px" /><h4 id="출력층-활성화-함수"><a href="#출력층-활성화-함수" class="headerlink" title="출력층 활성화 함수"></a>출력층 활성화 함수</h4><p> 앞서 신경망은 입력층 - 은닉층 - 출력층으로 구성되어 있다고 언급했는데, 출력층에서의 활성화 함수는 다른 함수를 사용한다. 일반적으로신경망이 어떤 문제를 해결하느냐에 따라 다른 함수를 사용하는데, 분류 문제를 해결하는 경우 softmax함수를 사용하고 회귀에서는 항등함수를 사용한다. 항등 함수부터 살펴보자.</p><h4 id="항등-함수-identity-function"><a href="#항등-함수-identity-function" class="headerlink" title="항등 함수(identity function)"></a>항등 함수(identity function)</h4><p> 항등 함수는 간단하다. 입력 값을 그대로 출력한다. f(x) = x 이다. 그래서 출력층에서 항등 함수를 사용하면 입력 신호가 그대로 출력 신호가 된다. </p><h4 id="소프트맥스-함수-softmax-function"><a href="#소프트맥스-함수-softmax-function" class="headerlink" title="소프트맥스 함수(softmax function)"></a>소프트맥스 함수(softmax function)</h4><p> 소프트맥스 함수의 식은 다음과 같다.<br> <img src="/gallery/book1-2-10.jpg" width="300px" /></p><p>소프트맥수 함수의 분자는 입력 신호 ak의 지수함수, 분모는 모든 입력 신호의 지수 함수의 합으로 구성된다. 소프트맥스 함수를 그림으로 나타내면 다음과 같은데, 소프트맥스의 출력은 모든 입력 신호로부터 화살표를 받는다. 식의 분모에서 보듯, 출력층은 모든 입력 신호에서 영향을 받기 때문이다.</p> <img src="/gallery/book1-2-11.jpg" width="300px" />]]></content>
      
      
      <categories>
          
          <category> Book </category>
          
          <category> 밑바닥부터 시작하는 딥러닝 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 딥러닝 </tag>
            
            <tag> study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CH2.딥러닝의 시작, 퍼셉트</title>
      <link href="2020/04/11/book1-1/"/>
      <url>2020/04/11/book1-1/</url>
      
        <content type="html"><![CDATA[<p>퍼셉트론 알고리즘</p><p>퍼셉트론은 딥러닝의 기원이 되는 알고리즘으로, 다수의 신호를 입력으로 받아 처리한 후 하나의 신호를 출력한다. </p> <img src="/gallery/book1-1-1.jpg" width="400px" /><a id="more"></a> <p>좀 더 구체적으로 설명하면 입력 받은 신호에 가중치를 곱해서 신호의 총합이 정해진 한계(임계값)를 넘어설 때만 1을 출력한다. 이 동작 원리를 수식으로 나타내면 아래와 같다.</p> <img src="/gallery/book1-1-2.jpg" width="400px" /><p>퍼셉트론 수식<br>위 식의 x1,x2는 입력신호, w1,w2는 가중치를 나타낸다. 그리고 계산식의 합이 임계값(θ)를 넘는 경우에만 1을 출력한다.</p><p>입력신호(x1,x2)는 우리가 결정할 수 없는, 그저 받는 값이지만, 가중치와 임계값은 조절할 수 있다. 계산식에서 가중치(w1,w2)로 입력신호의 중요도를 조절하고, 임계값으로 얼마나 쉽게 1을 출력할 것인지를 설정한다. 가중치는 높을수록 입력신호의 값이 커져 영향력이 커지게 되며 낮을수록 그 입력신호는 영향력이 작아진다. 그리고 임계값이 낮을수록 1은 쉽게 출력될 것이다. 이처럼 가중치와 임계값은 각 신호가 결과에 주는 영향력을 조절한다.</p><p>이번에는 임계값을 좌변으로 옮겨 아래와 같이 수식으로 나타낼 수 있다.</p><p>가중치와 편향<br>임계값을 좌변으로 넘기고(b) 임계값을 더한 계산식의 합이 0이 넘는 경우에만 1을 출력한다. 항상 계산식이 0보다 크면 1을 출력하므로 이해하기 훨씬 간편하다. 우리는 이 b를 편향이라고 부른다. </p><p>논리 회로 구현하기</p><p>앞서 작성한 퍼셉트론 식으로 논리 회로를 구현해 보자. 논리 회로는 하나 이상의 논리 값이 들어오면 게이트에 따라 출력 논리 값을 반환한다. 게이트로는 AND게이트, OR게이트, XOR게이트, NAND게이트를 살펴 볼 것이다.</p><p>AND 게이트<br>아래 표는 AND논리회로의 진리표이다. 입력 값이 둘 다 1인 경우에만 1을 반환한다.</p> <img src="/gallery/book1-1-3.jpg" width="200px" /><p>   이 진리표를 퍼셉트론으로 표현하려면 가중치와 편향을 어떻게 설정해야 할까?</p><p>입력값을 x1, x2에 대한 가중치를 w1, w2라고 했을 때 (w1,w2,b)는 (0.5,0.5,-0.7), (1.0,1.0,-1.0)등이 될 수 있을 것이다.<br>이처럼 가중치와 편향을 적절히 하여 AND 논리회로를 구현해보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">def AND(x1, x2):</span><br><span class="line">    x = np.array([x1, x2])</span><br><span class="line">    w = np.array([0.5, 0.5])</span><br><span class="line">    b = -0.7</span><br><span class="line">    tmp = np.sum(w*x) + b</span><br><span class="line">    <span class="keyword">if</span> tmp &lt;= 0 :</span><br><span class="line">        <span class="built_in">return</span> 0</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">return</span> 1</span><br></pre></td></tr></table></figure> <img src="/gallery/book1-1-4.jpg" width="200px" /><p>OR, NAND게이트</p><p>다음으로 OR, NAND게이트도 마저 구현해 본다.  OR게이트는 입력값이 모두 0인 경우를 제외하고 1을 반환하고 NAND게이트는 입력값이 모두 1인 경우에 0을 반환한다.</p> <img src="/gallery/book1-1-5.jpg" width="150"/> <img src="/gallery/book1-1-6.jpg" width="160px"/><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">def OR(x1, x2):</span><br><span class="line">    x = np.array([x1, x2])</span><br><span class="line">    w = np.array([0.5, 0.5])</span><br><span class="line">    b = -0.2</span><br><span class="line">    tmp = np.sum(w*x) + b</span><br><span class="line">    <span class="keyword">if</span> tmp &lt;= 0 :</span><br><span class="line">        <span class="built_in">return</span> 0</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">return</span> 1</span><br><span class="line"></span><br><span class="line">OR 함수 결과</span><br><span class="line">def NAND(x1, x2):</span><br><span class="line">    x = np.array([x1, x2])</span><br><span class="line">    w = np.array([-0.5, -0.5])</span><br><span class="line">    b = 0.7</span><br><span class="line">    tmp = np.sum(w*x) + b</span><br><span class="line">    <span class="keyword">if</span> tmp &lt;= 0 :</span><br><span class="line">        <span class="built_in">return</span> 0</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">return</span> 1</span><br></pre></td></tr></table></figure><p>NAND 함수 결과<br>XOR 논리회로는?</p><p>아래는 XOR논리회로의 진리표이다.</p> <img src="/gallery/book1-1-7.jpg" width="200px" /><p>XOR 논리회로 진리표<br>XOR 논리회로는 x1,x2가 다른 경우에만 1을 반환한다. 마찬가지로 코드로 구현하려니 앞서 다른 논리회로와 같은 방식으로는 구현할 수가 없다. 왜 그럴까? 그래프로 살펴보자</p> <img src="/gallery/book1-1-8.jpg" width="600px" /><p>먼저 OR진리표를 그래프로 나타낸 것이다. OR그래프는 0과 1을 분리하기 위해서 1차식으로 나타낼 수 있다. AND와 NAND논리회로 역시 1차식으로 나타낼 수 있다. 직접 그려보기 바란다.</p><p>다음으로 XOR그래프를 살펴보자</p> <img src="/gallery/book1-1-9.jpg" width="600px" /><p>XOR논리회로 그래프<br>XOR 그래프는 0과 1을 분리하기 위해 1차식으로 구현할 수 없다. 1과 0을 분리하기 위해서는 곡선이 들어가게 된다.</p><p>정리하면 AND,OR,NAND가 선형 문제인 반면에 XOR은 비선형 문제이므로 1차식으로 문제를 해결할 수 없는 것이다.</p><p>비선형 문제 해결하기 : 다층 퍼셉트론<br>그렇다면 퍼셉트론 식만으로 비선형 문제를 어떻게 해결해야 할까? XOR같은 비선형 문제를 해결하는 것이야 말로 퍼셉트론의 진가이다. 1차식 만으로 해결할 수 없는 비선형 문제는 층을 쌓아 해결한다. 이것을 다층 퍼셉트론이라고 부른다. </p><p>다층 퍼셉트론을 그림으로 나타내면 다음과 같다.</p> <img src="/gallery/book1-1-10.jpg" width="600px" /><p>다층 퍼셉트론<br>하나의 처리과정을 한 층이라고 부른다. 해당 퍼셉트론은 처리 과정이 2개이므로 2층 퍼셉트론이다. 그림을 설명하면 입력신호(x1,x2)에 대한 처리를 하고 처리된 신호(s1,s2)를 다시 처리하여 y를 출력한다. 기존의 1층 처리 방식과 달리 처리된 것을 다시 처리하여 출력한다. 이 방식을  XOR에 적용해보자. 먼저 XOR 방식을 해결하기 위한 처리 과정은 아래와 같다.</p> <img src="/gallery/book1-1-11.jpg" width="600px" /><p>입력 신호(x1, x2)는 다른 논리회로와 같다. 다만 입력신호를 NAND로 처리한 s1과 OR로 처리한 s2(1층)를 다시 AND 신호(2층)로 처리한다. 이를 수식으로 나타내면 아래와 같다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def XOR(x1, x2):</span><br><span class="line">    s1 = NAND(x1, x2)</span><br><span class="line">    s2 = OR(x1, x2)</span><br><span class="line">    y = AND(s1, s2)</span><br><span class="line">    <span class="built_in">return</span> y</span><br></pre></td></tr></table></figure> <img src="/gallery/book1-1-13.jpg" width="600px" /> <img src="/gallery/book1-1-12.jpg" width="200px" /><p>XOR 함수 결과<br>이처럼 퍼셉트론은 층을 쌓아 더 다양한 것을 표현할 수 있다.</p>]]></content>
      
      
      <categories>
          
          <category> Book </category>
          
          <category> 밑바닥부터 시작하는 딥러닝 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 딥러닝 </tag>
            
            <tag> study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/04/05/hello-world/"/>
      <url>2020/04/05/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
